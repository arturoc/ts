{
  "version": 3,
  "sources": ["../../node_modules/gl-matrix/esm/common.js", "../../node_modules/gl-matrix/esm/mat3.js", "../../node_modules/gl-matrix/esm/mat4.js", "../../node_modules/gl-matrix/esm/quat.js", "../../node_modules/gl-matrix/esm/vec3.js", "../../node_modules/gl-matrix/esm/vec4.js", "../../node_modules/gl-matrix/esm/vec2.js", "../device.ts", "../../webgl2/blit.ts", "../../webgl2/buffer.ts", "../../webgl2/clear.ts", "../../webgl2/extensions.ts", "../../webgl2/draw.ts", "../../webgl2/limits.ts", "../../webgl2/frameBuffer.ts", "../../webgl2/misc.ts", "../../webgl2/program.ts", "../../webgl2/read.ts", "../../webgl2/renderBuffer.ts", "../../webgl2/sampler.ts", "../../webgl2/state.ts", "../../webgl2/texture.ts", "../../webgl2/timer.ts", "../../webgl2/transformFeedback.ts", "../../webgl2/uniforms.ts", "../../webgl2/vao.ts", "../../core3d/state/default.ts", "../../core3d/state/modify.ts", "../../core3d/state/index.ts", "../../core3d/matrices.ts", "../../core3d/viewFrustum.ts", "../../core3d/buffers.ts", "../../core3d/resource.ts", "../../core3d/util.ts", "../../core3d/context.ts", "../../core3d/wasm/float16.ts", "../../core3d/wasm/index.ts", "../../core3d/ktx.ts", "../../core3d/modules/background/index.ts", "../../core3d/modules/grid/index.ts", "../../core3d/modules/octree/shaders/index.ts", "../../core3d/modules/octree/mesh.ts", "../../core3d/modules/octree/node.ts", "../../core3d/scene.ts", "../../core3d/modules/octree/worker/schema_2_0.ts", "../../core3d/modules/octree/worker/util.ts", "../../core3d/modules/octree/worker/parser.ts", "../../core3d/modules/octree/worker/download.ts", "../../core3d/modules/octree/mutex.ts", "../../core3d/modules/octree/worker/handler.ts", "../../core3d/modules/octree/worker/index.ts", "inline-worker:__inline-worker", "../../core3d/modules/octree/worker/index.worker.ts", "../../core3d/modules/octree/loader.ts", "../../core3d/modules/octree/gradient.ts", "../../core3d/modules/octree/context.ts", "../../core3d/modules/octree/module.ts", "../../core3d/modules/tonemap/index.ts", "../../core3d/modules/cube/shaders/index.ts", "../../core3d/modules/cube/index.ts", "../../core3d/modules/clipping/index.ts", "../../core3d/modules/watermark/index.ts", "../../core3d/modules/dynamic/index.ts", "../../core3d/modules/toon_outline/index.ts", "../../core3d/modules/index.ts", "../../core3d/highlight.ts", "../../core3d/benchmark/benchmark.ts", "../../core3d/benchmark/util.ts", "../../core3d/benchmark/shaders/index.ts", "../../core3d/benchmark/fillrate.ts", "../../core3d/benchmark/pointrate.ts", "../../core3d/geometry.ts", "../../core3d/gltf/loader.ts", "../../core3d/gltf/parser.ts", "../../core3d/gltf/index.ts", "../../core3d/index.ts", "../controller/input.ts", "../controller/base.ts", "../controller/orientation.ts", "../controller/orbit.ts", "../controller/ortho.ts", "../controller/flight.ts", "../controller/panorama.ts", "../flip.ts", "../view.ts", "../serviceWorker/helper.ts", "../serviceWorker/promiseBag.ts", "../index.ts"],
  "sourcesContent": ["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "import type { DeviceProfile } from \"core3d\";\n\nexport type GPUTier = 0 | 1 | 2 | 3; // larger means more powerful GPU\n/*\nRough outline of intended tier levels:\ntier 0: Unknown GPU - better safe than sorry, or a weak android device.\ntier 1: IOS, IPad, high-end android device (e.g. modern Samsung S8 Tablet), weak intergrated (intel) GPU\ntier 2: Mac M1 or better, strong integrated GPU or weak/old discrete GPU.\ntier 3: Discrete GPU, mid to high end.\n*/\n\n// A simple tier system is probably too simplistic. We may want to add info about OS and browser here as well.\nexport function getDeviceProfile(tier: GPUTier, resolutionScaling?: number): DeviceProfile {\n    const outline = tier > 2;\n    const maxGPUBytes = ([500_000_000, 750_000_000, 2_000_000_000, 5_000_000_000] as const)[tier];\n    const maxPrimitives = ([20_000_000, 20_000_000, 20_000_000, 50_000_000] as const)[tier]; // this is not supposed to be used to regulate FPS, but rather avoid rendering taking so long it will crash the browser.\n    const maxSamples = ([4, 4, 8, 16] as const)[tier]; // MSAA\n    const detailBias = ([0.25, .50, .75, 1] as const)[tier];\n    let renderResolution = ([0.5, 0.75, 1, 1] as const)[tier];\n    if (resolutionScaling) {\n        renderResolution *= resolutionScaling;\n    }\n\n    let adreno600 = false;\n    let slowShaderRecompile = false;\n\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\") as HTMLCanvasElement;\n    canvas.width = 1;\n    canvas.height = 1;\n    document.body.appendChild(canvas);\n    const gl = canvas.getContext(\"webgl\", { failIfMajorPerformanceCaveat: true });\n    canvas.remove();\n\n    if (gl) {\n        const debugInfo = gl.getExtension(\"WEBGL_debug_renderer_info\");\n        const renderer = debugInfo\n            ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL)\n            : gl.getParameter(gl?.VERSION);\n        if (RegExp(\"Adreno.+6[0-9][0-9]\").test(renderer)) {\n            adreno600 = true;\n        }\n        else if (RegExp(\"Apple M1\").test(renderer) || RegExp(\"Iris\").test(renderer)) {\n            slowShaderRecompile = true;\n        }\n    }\n\n\n    const coreProfile = {\n        features: {\n            outline,\n        },\n        limits: {\n            maxGPUBytes,\n            maxPrimitives,\n            maxSamples,\n        },\n        quirks: {\n            adreno600,\n            slowShaderRecompile\n        },\n        detailBias,\n    };\n\n    return {\n        ...coreProfile,\n        renderResolution,\n        framerateTarget: 30\n    } as const;\n}\n\n// const coreProfile = {\n//     features: {\n//         outline: true,\n//     },\n//     limits: {\n//         maxGPUBytes: 2_000_000_000,\n//         maxPrimitives: 100_000_000,\n//         maxSamples: 4, // MSAA\n//     },\n//     quirks: {\n//         iosShaderBug: false, // Older (<A15) IOS devices has a bug when using flat interpolation in complex shaders, which causes Safari to crash after a while. Update: Fixed with WEBGL_provoking_vertex extension!\n//     },\n//     detailBias: 0.6,\n// } as const satisfies DeviceProfile;\n\n\n// export const deviceProfile = {\n//     ...coreProfile,\n//     renderResolution: 1,\n//     framerateTarget: 30 as number\n// } as const;\n\n", "/** @public */\nexport function glBlit(gl: WebGL2RenderingContext, params: BlitParams) {\n    const w = gl.drawingBufferWidth;\n    const h = gl.drawingBufferHeight;\n    let mask = 0;\n    if (params.color)\n        mask |= gl.COLOR_BUFFER_BIT;\n    if (params.depth)\n        mask |= gl.DEPTH_BUFFER_BIT;\n    if (params.stencil)\n        mask |= gl.STENCIL_BUFFER_BIT;\n    const filter = gl[params.filter ?? \"NEAREST\"];\n    const srcX0 = params.srcX0 ?? 0;\n    const srcY0 = params.srcY0 ?? 0;\n    const srcX1 = params.srcX1 ?? w;\n    const srcY1 = params.srcY1 ?? h;\n    const dstX0 = params.dstX0 ?? 0;\n    const dstY0 = params.dstY0 ?? 0;\n    const dstX1 = params.dstX1 ?? w;\n    const dstY1 = params.dstY1 ?? h;\n    const src = params.source == null ? null : params.source;\n    const dst = params.destination == null ? null : params.destination;\n\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, src);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dst);\n    gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n}\n\nexport interface BlitParams {\n    readonly source: WebGLFramebuffer | null;\n    readonly destination: WebGLFramebuffer | null;\n\n    readonly color?: true;\n    readonly depth?: true;\n    readonly stencil?: true;\n\n    readonly filter?: \"NEAREST\" | \"LINEAR\"; // \"NEAREST\"\n\n    readonly srcX0?: number; // default: 0\n    readonly srcY0?: number; // default: 0\n    readonly srcX1?: number; // default: width\n    readonly srcY1?: number; // default: height\n\n    readonly dstX0?: number; // default: 0\n    readonly dstY0?: number; // default: 0\n    readonly dstX1?: number; // default: width\n    readonly dstY1?: number; // default: height\n}\n", "\nexport function glCreateBuffer(gl: WebGL2RenderingContext, params: BufferParams): WebGLBuffer {\n    const target = gl[params.kind];\n    const usage = gl[params.usage ?? \"STATIC_DRAW\"];\n    const buffer = gl.createBuffer()!;\n    gl.bindBuffer(target, buffer);\n    if (\"byteSize\" in params) {\n        gl.bufferData(target, params.byteSize, usage);\n    } else {\n        gl.bufferData(target, params.srcData, usage);\n    }\n    gl.bindBuffer(target, null);\n    return buffer;\n}\n\nexport function glUpdateBuffer(gl: WebGL2RenderingContext, params: UpdateParams) {\n    const target = gl[params.kind];\n    const srcOffset = params.srcElementOffset ?? 0;\n    const targetOffset = params.dstByteOffset ?? 0;\n    const src = params.srcData;\n    const srcData = ArrayBuffer.isView(src) ? src : new Uint8Array(src);\n    gl.bindBuffer(target, params.targetBuffer);\n    gl.bufferSubData(target, targetOffset, srcData, srcOffset, params.byteSize);\n    gl.bindBuffer(target, null);\n}\n\nexport type BufferParams = BufferParamsSize | BufferParamsData;\n\nexport type BufferTargetString = \"ARRAY_BUFFER\" | \"ELEMENT_ARRAY_BUFFER\" | \"COPY_READ_BUFFER\" | \"COPY_WRITE_BUFFER\" | \"TRANSFORM_FEEDBACK_BUFFER\" | \"UNIFORM_BUFFER\" | \"PIXEL_PACK_BUFFER\" | \"PIXEL_UNPACK_BUFFER\";\nexport type BufferUsageString = \"STATIC_DRAW\" | \"DYNAMIC_DRAW\" | \"STREAM_DRAW\" | \"STATIC_READ\" | \"DYNAMIC_READ\" | \"STREAM_READ\" | \"STATIC_COPY\" | \"DYNAMIC_COPY\" | \"STREAM_COPY\";\n\nexport interface BufferParamsSize {\n    readonly kind: BufferTargetString;\n    readonly byteSize: GLsizeiptr;\n    readonly usage?: BufferUsageString; // default: \"STATIC_DRAW\"\n}\n\nexport interface BufferParamsData {\n    readonly kind: BufferTargetString;\n    readonly srcData: BufferSource;\n    readonly usage?: BufferUsageString; // default: \"STATIC_DRAW\"\n}\n\nexport interface UpdateParams {\n    readonly kind: BufferTargetString;\n    readonly srcData: BufferSource;\n    readonly targetBuffer: WebGLBuffer;\n    readonly srcElementOffset?: number; // start element (in typed view) index. default: 0\n    readonly dstByteOffset?: number; // default: 0\n    readonly byteSize?: number; // default: 0, which will copy entire srcData\n}\n", "export function glClear(gl: WebGL2RenderingContext, params: ClearParams) {\n    const { kind } = params;\n    switch (kind) {\n        case \"back_buffer\": {\n            let bits = 0;\n            if (params.color != undefined) {\n                gl.clearColor(...params.color);\n                bits |= gl.COLOR_BUFFER_BIT;\n            }\n            if (params.depth != undefined) {\n                gl.clearDepth(params.depth);\n                bits |= gl.DEPTH_BUFFER_BIT;\n            }\n            if (params.stencil != undefined) {\n                gl.clearStencil(params.stencil);\n                bits |= gl.STENCIL_BUFFER_BIT;\n            }\n            if (bits) {\n                gl.clear(bits);\n            }\n            break;\n        }\n        case \"DEPTH\":\n        case \"STENCIL\":\n        case \"DEPTH_STENCIL\": {\n            const { drawBuffer } = params;\n            const depth = \"depth\" in params ? params.depth : 1.0;\n            const stencil = \"stencil\" in params ? params.stencil : 0;\n            gl.clearBufferfi(gl[kind], drawBuffer ?? 0, depth, stencil);\n            break;\n        }\n        case \"COLOR\": {\n            const { drawBuffer } = params;\n            const type = params.type ?? \"Float\";\n            const target = gl.COLOR;\n            const color = params.color ?? [0, 0, 0, 0];\n            switch (type) {\n                case \"Float\": gl.clearBufferfv(target, drawBuffer ?? 0, color); break;\n                case \"Int\": gl.clearBufferiv(target, drawBuffer ?? 0, color); break;\n                case \"Uint\": gl.clearBufferuiv(target, drawBuffer ?? 0, color); break;\n                default: exhaustiveColorCheck(type);\n            }\n            break;\n        }\n        default: exhaustiveBufferCheck(kind);\n    }\n}\n\nexport type ClearParams = ClearParamsBack | ClearParamsColor | ClearDepth | ClearStencil | ClearDepthStencil;\n\nexport interface ClearParamsBack {\n    readonly kind: \"back_buffer\";\n    readonly color?: readonly [red: number, green: number, blue: number, alpha: number]; // default: [0, 0, 0, 1]\n    readonly depth?: number;\n    readonly stencil?: number;\n}\n\nexport interface ClearParamsColor {\n    readonly kind: \"COLOR\";\n    readonly drawBuffer?: number; // 0 - MAX_DRAW_BUFFERS, default: 0\n    readonly color?: readonly [red: number, green: number, blue: number, alpha: number]; // default: [0, 0, 0, 1]\n    readonly type?: \"Int\" | \"Uint\" | \"Float\"; // default: Float\n}\n\nexport interface ClearDepth {\n    readonly kind: \"DEPTH\";\n    readonly drawBuffer?: number; // 0 - MAX_DRAW_BUFFERS, default: 0\n    readonly depth: number;\n}\nexport interface ClearStencil {\n    readonly kind: \"STENCIL\";\n    readonly drawBuffer?: number; // 0 - MAX_DRAW_BUFFERS, default: 0\n    readonly stencil: number;\n}\nexport interface ClearDepthStencil {\n    readonly kind: \"DEPTH_STENCIL\";\n    readonly drawBuffer?: number; // 0 - MAX_DRAW_BUFFERS, default: 0\n    readonly depth: number;\n    readonly stencil: number;\n}\n\nfunction exhaustiveBufferCheck(value: never) {\n    throw new Error(`Unknown buffer type: ${value}!`);\n}\n\nfunction exhaustiveColorCheck(value: never) {\n    throw new Error(`Unknown clear color type: ${value}!`);\n}\n\n", "export function glExtensions(gl: WebGL2RenderingContext, refresh = false) {\n    let ext = glExtensionsMap.get(gl);\n    if (!ext || refresh) {\n        ext = getWebGL2Extensions(gl);\n        glExtensionsMap.set(gl, ext);\n    }\n    return ext;\n}\n\nfunction getWebGL2Extensions(gl: WebGL2RenderingContext) {\n    return {\n        colorBufferFloat: gl.getExtension(\"EXT_color_buffer_float\") as WEBGL_color_buffer_float | null, // also includes half floats\n        parallelShaderCompile: gl.getExtension(\"KHR_parallel_shader_compile\") as KHR_parallel_shader_compile | null,\n        loseContext: gl.getExtension(\"WEBGL_lose_context\") as WEBGL_lose_context | null,\n        multiDraw: gl.getExtension(\"WEBGL_MULTI_DRAW\") as WEBGL_multi_draw | null,\n        drawBuffersIndexed: gl.getExtension(\"OES_draw_buffers_indexed\") as OES_draw_buffers_indexed_ext | null,\n        disjointTimerQuery: gl.getExtension('EXT_disjoint_timer_query_webgl2') as EXT_disjoint_timer_query_webgl2_ext,\n        provokingVertex: gl.getExtension('WEBGL_provoking_vertex') as WEBGL_provoking_vertex | null,\n    } as const;\n}\n\nconst glExtensionsMap = new WeakMap<WebGL2RenderingContext, ExtensionsGL>();\n\nexport type ExtensionsGL = ReturnType<typeof getWebGL2Extensions>;\n\n// temporary types until extensions become part of standard ts lib\nexport interface OES_draw_buffers_indexed_ext {\n    enableiOES(target: number, index: number): void;\n    disableiOES(target: number, index: number): void;\n    blendEquationiOES(buf: number, mode: number): void;\n    blendEquationSeparateiOES(buf: number, modeRGB: number, modeAlpha: number): void;\n    blendFunciOES(buf: number, src: number, dst: number): void;\n    blendFuncSeparateiOES(buf: number, srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;\n    colorMaskiOES(buf: number, r: boolean, g: boolean, b: boolean, a: boolean): void;\n};\n\nexport interface EXT_disjoint_timer_query_webgl2_ext {\n    readonly QUERY_COUNTER_BITS_EXT: 0x8864; // GL.QUERY_COUNTER_BITS_EXT;\n    readonly TIME_ELAPSED_EXT: 0x88BF; // GL.TIME_ELAPSED_EXT;\n    readonly TIMESTAMP_EXT: 0x8E28; // GL.TIMESTAMP_EXT;\n    readonly GPU_DISJOINT_EXT: 0x8FBB;  // GL.GPU_DISJOINT_EXT;\n    queryCounterEXT(query: WebGLQuery, target: 0x8E28 /*GL.TIMESTAMP_EXT*/): void;\n}\n\nexport interface WEBGL_provoking_vertex {\n    readonly FIRST_VERTEX_CONVENTION_WEBGL: 0x8E4D;\n    readonly LAST_VERTEX_CONVENTION_WEBGL: 0x8E4E; // default\n    readonly PROVOKING_VERTEX_WEBGL: 0x8E4F;\n    provokingVertexWEBGL(provokeMode: 0x8E4D | 0x8E4E): void;\n};", "import { glExtensions } from \"./extensions\";\n\nexport function glDraw(gl: WebGL2RenderingContext, params: DrawParams): DrawStatistics {\n    let numPrimitives = 0;\n    const mode = params.mode ?? \"TRIANGLES\";\n    const primitiveType = gl[mode];\n    if (isMultiDraw(params)) {\n        const { multiDraw } = glExtensions(gl);\n        if (multiDraw) {\n            const { drawCount, counts, countsOffset } = params;\n            switch (params.kind) {\n                case \"arrays_multidraw\":\n                    const { firstsList, firstsOffset } = params;\n                    multiDraw.multiDrawArraysWEBGL(primitiveType, firstsList, firstsOffset ?? 0, counts, countsOffset ?? 0, drawCount);\n                    break;\n                case \"elements_multidraw\":\n                    const { byteOffsets, byteOffsetsOffset, indexType } = params;\n                    multiDraw.multiDrawElementsWEBGL(primitiveType, counts, countsOffset ?? 0, gl[indexType], byteOffsets, byteOffsetsOffset ?? 0, drawCount);\n                    break;\n            }\n            const offs = countsOffset ?? 0;\n            for (let i = 0; i < drawCount; i++) {\n                numPrimitives += calcNumPrimitives(counts[i + offs], mode);\n            }\n        } else {\n            console.warn(\"no multi_draw gl extension!\");\n        }\n    } else {\n        const { count } = params;\n        if (isInstanced(params)) {\n            const { instanceCount } = params;\n            numPrimitives = calcNumPrimitives(count, mode) * instanceCount;\n            if (isElements(params)) {\n                gl.drawElementsInstanced(primitiveType, count, gl[params.indexType], params.byteOffset ?? 0, instanceCount);\n            } else {\n                gl.drawArraysInstanced(primitiveType, params.first ?? 0, count, instanceCount);\n            }\n        } else {\n            numPrimitives = calcNumPrimitives(count, mode);\n            if (isElements(params)) {\n                if (isRange(params)) {\n                    gl.drawRangeElements(primitiveType, params.minIndex, params.maxIndex, count, gl[params.indexType], params.byteOffset ?? 0);\n                } else {\n                    gl.drawElements(primitiveType, count, gl[params.indexType], params.byteOffset ?? 0);\n                }\n            } else {\n                gl.drawArrays(primitiveType, params.first ?? 0, count);\n            }\n        }\n    }\n\n    if (primitiveType >= gl.TRIANGLES) {\n        return { points: 0, lines: 0, triangles: numPrimitives };\n    } else if (primitiveType >= gl.LINES) {\n        return { points: 0, lines: numPrimitives, triangles: 0 };\n    } else {\n        return { points: numPrimitives, lines: 0, triangles: 0 };\n    }\n}\n\nfunction calcNumPrimitives(vertexCount: number, primitiveType: string) {\n    switch (primitiveType) {\n        case \"TRIANGLES\":\n            return vertexCount / 3;\n        case \"TRIANGLE_STRIP\":\n        case \"TRIANGLE_FAN\":\n            return vertexCount - 2;\n        case \"LINES\":\n            return vertexCount / 2;\n        case \"LINE_STRIP\":\n            return vertexCount - 1;\n        default:\n            return vertexCount;\n    }\n}\n\nfunction isInstanced(params: DrawParams): params is DrawParamsArraysInstanced | DrawParamsElementsInstanced {\n    return \"instanceCount\" in params && params.instanceCount != undefined;\n}\n\nfunction isElements(params: DrawParams): params is DrawParamsElements | DrawParamsElementsInstanced | DrawParamsElementsRange | DrawParamsElementsMultiDraw {\n    return \"indexType\" in params && params.indexType != undefined;\n}\n\nfunction isRange(params: DrawParams): params is DrawParamsElementsRange {\n    return \"start\" in params && \"end\" in params && params.start != undefined;\n}\n\nfunction isMultiDraw(params: DrawParams): params is DrawParamsArraysMultiDraw | DrawParamsElementsMultiDraw {\n    return \"drawCount\" in params && params.drawCount != undefined;\n}\n\nexport type DrawStatistics =\n    { readonly points: number; readonly lines: 0; readonly triangles: 0 } |\n    { readonly points: 0; readonly lines: number; readonly triangles: 0 } |\n    { readonly points: 0; readonly lines: 0; readonly triangles: number };\n\nexport type DrawParams =\n    DrawParamsArrays | DrawParamsArraysMultiDraw | DrawParamsArraysInstanced |\n    DrawParamsElements | DrawParamsElementsRange | DrawParamsElementsMultiDraw | DrawParamsElementsInstanced;\n// TODO: Add multi_draw_instanced variants for arrays and elements\n\nexport type DrawMode = \"POINTS\" | \"LINE_STRIP\" | \"LINE_LOOP\" | \"LINES\" | \"TRIANGLE_STRIP\" | \"TRIANGLE_FAN\" | \"TRIANGLES\";\n\nexport interface DrawParamsBase {\n    readonly mode?: DrawMode; // default: TRIANGLES\n}\n\nexport interface DrawParamsArrays extends DrawParamsBase {\n    /** Equivalent to gl.drawArrays() */\n    readonly kind: \"arrays\",\n    readonly count: number;\n    readonly first?: number; // default: 0\n}\n\nexport interface DrawParamsArraysMultiDraw extends DrawParamsBase {\n    /** Equivalent to `ext.multiDrawArraysWEBGL()` */\n    readonly kind: \"arrays_multidraw\",\n    readonly drawCount: number;\n    readonly firstsList: Int32Array;\n    readonly firstsOffset?: number; // default: 0\n    readonly counts: Int32Array;\n    readonly countsOffset?: number; // default: 0\n}\n\nexport interface DrawParamsElements extends DrawParamsBase {\n    /** Equivalent to gl.drawElements() */\n    readonly kind: \"elements\",\n    /** # of indices to draw */\n    readonly count: number;\n    /** Type of indices */\n    readonly indexType: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\n    /** Byte offset in the element array buffer. Must be a valid multiple of the size of the given type. */\n    readonly byteOffset?: number; // default: 0\n}\n\nexport interface DrawParamsElementsRange extends DrawParamsBase {\n    /** Equivalent to gl.drawRangeElements() */\n    readonly kind: \"elements_range\",\n    /** # of indices to draw */\n    readonly count: number;\n    /** Type of indices */\n    readonly indexType: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\n    /** Byte offset in the element array buffer. Must be a valid multiple of the size of the given type. */\n    readonly byteOffset?: number; // default: 0\n    /** The minimum array index contained in buffer range. */\n    readonly minIndex: number; // start vertex index\n    /** The maximum array index contained in buffer range. */\n    readonly maxIndex: number; // end vertex index\n}\n\nexport interface DrawParamsElementsMultiDraw extends DrawParamsBase {\n    /** Equivalent to `ext.multiDrawArraysWEBGL()` */\n    readonly kind: \"elements_multidraw\",\n    readonly drawCount: number;\n    readonly indexType: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\n    readonly byteOffsets: Int32Array;\n    readonly byteOffsetsOffset?: number; // default: 0\n    readonly counts: Int32Array;\n    readonly countsOffset?: number; // default: 0\n}\n\nexport interface DrawParamsArraysInstanced extends DrawParamsBase {\n    /** Equivalent to gl.drawArraysInstanced() */\n    readonly kind: \"arrays_instanced\",\n    readonly count: number;\n    readonly instanceCount: number;\n    readonly first?: number; // default: 0\n}\n\nexport interface DrawParamsElementsInstanced extends DrawParamsBase {\n    /** Equivalent to gl.drawElementsInstanced() */\n    readonly kind: \"elements_instanced\",\n    readonly count: number;\n    readonly instanceCount: number;\n    readonly indexType: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\n    readonly byteOffset?: number; // default: 0\n}\n\n", "export function glLimits(gl: WebGL2RenderingContext) {\n    let ext = glLimitsMap.get(gl);\n    if (!ext) {\n        ext = getWebGL2Limits(gl);\n        glLimitsMap.set(gl, ext);\n    }\n    return ext;\n}\n\nconst glLimitsMap = new WeakMap<WebGL2RenderingContext, LimitsGL>();\n\nfunction getWebGL2Limits(gl: WebGL2RenderingContext) {\n    const names = [\n        \"MAX_TEXTURE_SIZE\",\n        \"MAX_VIEWPORT_DIMS\",\n        \"MAX_TEXTURE_IMAGE_UNITS\",\n        \"MAX_VERTEX_UNIFORM_VECTORS\",\n        \"MAX_VARYING_VECTORS\",\n        \"MAX_VERTEX_ATTRIBS\",\n        \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",\n        \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",\n        \"MAX_TEXTURE_IMAGE_UNITS\",\n        \"MAX_FRAGMENT_UNIFORM_VECTORS\",\n        \"MAX_CUBE_MAP_TEXTURE_SIZE\",\n        \"MAX_RENDERBUFFER_SIZE\",\n        \"MAX_3D_TEXTURE_SIZE\",\n        \"MAX_ELEMENTS_VERTICES\",\n        \"MAX_ELEMENTS_INDICES\",\n        \"MAX_TEXTURE_LOD_BIAS\",\n        \"MAX_FRAGMENT_UNIFORM_COMPONENTS\",\n        \"MAX_VERTEX_UNIFORM_COMPONENTS\",\n        \"MAX_ARRAY_TEXTURE_LAYERS\",\n        \"MIN_PROGRAM_TEXEL_OFFSET\",\n        \"MAX_PROGRAM_TEXEL_OFFSET\",\n        \"MAX_VARYING_COMPONENTS\",\n        \"MAX_VERTEX_OUTPUT_COMPONENTS\",\n        \"MAX_FRAGMENT_INPUT_COMPONENTS\",\n        \"MAX_SERVER_WAIT_TIMEOUT\",\n        \"MAX_ELEMENT_INDEX\",\n        \"MAX_DRAW_BUFFERS\",\n        \"MAX_COLOR_ATTACHMENTS\",\n        \"MAX_SAMPLES\",\n        \"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS\",\n        \"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS\",\n        \"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS\",\n        \"MAX_VERTEX_UNIFORM_BLOCKS\",\n        \"MAX_FRAGMENT_UNIFORM_BLOCKS\",\n        \"MAX_COMBINED_UNIFORM_BLOCKS\",\n        \"MAX_UNIFORM_BUFFER_BINDINGS\",\n        \"MAX_UNIFORM_BLOCK_SIZE\",\n        \"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS\",\n        \"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS\",\n    ] as const;\n\n    type Limits = { [P in typeof names[number]]: number };\n    const limits = {} as Limits;\n    for (const name of names) {\n        limits[name] = gl.getParameter(gl[name]) as number;\n    }\n    return limits as Readonly<Limits>;\n}\n\nexport type LimitsGL = ReturnType<typeof getWebGL2Limits>;\n", "import { glLimits } from \"./limits\";\nimport type { ResourceBin } from \"../core3d/resource\";\n\nexport function glCreateFrameBuffer(gl: WebGL2RenderingContext, params: FrameBufferParams): WebGLFramebuffer {\n    const frameBuffer = gl.createFramebuffer()!;\n    const limits = glLimits(gl);\n    console.assert(params.color.length <= limits.MAX_COLOR_ATTACHMENTS);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\n    function bind(binding: FrameBufferBinding, attachment: number) {\n        const target = gl[binding.kind];\n        if (isTextureAttachment(binding)) {\n            const { texture } = binding;\n            if (binding.layer === undefined) {\n                const texTarget = gl[binding.texTarget ?? \"TEXTURE_2D\"];\n                gl.framebufferTexture2D(target, attachment, texTarget, texture, binding.level ?? 0);\n            } else {\n                gl.framebufferTextureLayer(target, attachment, texture, binding.level ?? 0, binding.layer);\n            }\n        } else {\n            const { renderBuffer } = binding;\n            gl.framebufferRenderbuffer(target, attachment, gl.RENDERBUFFER, renderBuffer);\n        }\n    }\n    if (params.depth)\n        bind(params.depth, gl.DEPTH_ATTACHMENT);\n    if (params.stencil)\n        bind(params.stencil, gl.STENCIL_ATTACHMENT);\n    let i = gl.COLOR_ATTACHMENT0;\n    for (const color of params.color) {\n        if (color) {\n            bind(color, i);\n        }\n        i++;\n    }\n\n    const debug = false; // TODO: get from build environment\n    if (debug) {\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n        switch (status) {\n            case gl.FRAMEBUFFER_COMPLETE:\n                break;\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw new Error(\"Framebuffer incomplete attachment!\");\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw new Error(\"Framebuffer missing attachment!\")\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw new Error(\"Framebuffer incomplete dimensions!\")\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw new Error(\"Framebuffer unsupported!\")\n            case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n                throw new Error(\"Framebuffer incomplete multisample!\")\n            default:\n                throw new Error(\"Unknown framebuffer error!\")\n        }\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return frameBuffer;\n}\n\nexport function glInvalidateFrameBuffer(gl: WebGL2RenderingContext, params: InvalidateFrameBufferParams) {\n    if (!params.frameBuffer) {\n        return;\n    }\n    const attachments: number[] = [];\n    if (params.depth && params.stencil) {\n        attachments.push(gl.DEPTH_STENCIL_ATTACHMENT);\n    } else if (params.depth) {\n        attachments.push(gl.DEPTH_ATTACHMENT);\n    } else if (params.stencil) {\n        attachments.push(gl.STENCIL_ATTACHMENT);\n    }\n    let i = 0;\n    for (const invalidate of params.color) {\n        if (invalidate) {\n            attachments.push(gl.COLOR_ATTACHMENT0 + i);\n        }\n        i++;\n    }\n    const { frameBuffer, kind } = params;\n    const target = gl[kind];\n    gl.bindFramebuffer(target, frameBuffer);\n    gl.invalidateFramebuffer(target, attachments);\n    gl.bindFramebuffer(target, null);\n}\n\nfunction isTextureAttachment(attachment: FrameBufferBinding): attachment is FrameBufferTextureBinding {\n    return typeof attachment == \"object\" && \"texture\" in attachment;\n}\n\nexport interface FrameBufferParams {\n    readonly depth?: FrameBufferBinding;\n    readonly stencil?: FrameBufferBinding;\n    readonly color: readonly (FrameBufferBinding | null)[]; // length: [0, MAX_COLOR_ATTACHMENTS>\n}\n\nexport interface FrameBufferTextureBinding {\n    readonly kind: \"FRAMEBUFFER\" | \"DRAW_FRAMEBUFFER\" | \"READ_FRAMEBUFFER\";\n    readonly texture: WebGLTexture | null;\n    readonly texTarget?: \"TEXTURE_2D\";\n    readonly level?: number; // default: 0, mip-map level\n    readonly layer?: number; // default: 0, face in cube map, z in 3d and index in 2d array\n}\n\nexport interface FrameBufferRenderBufferBinding {\n    readonly kind: \"FRAMEBUFFER\" | \"DRAW_FRAMEBUFFER\" | \"READ_FRAMEBUFFER\";\n    readonly renderBuffer: WebGLRenderbuffer | null;\n}\n\nexport type FrameBufferBinding = FrameBufferTextureBinding | FrameBufferRenderBufferBinding;\n\n\nexport interface InvalidateFrameBufferParams {\n    readonly kind: \"FRAMEBUFFER\" | \"DRAW_FRAMEBUFFER\" | \"READ_FRAMEBUFFER\";\n    readonly frameBuffer: WebGLFramebuffer | null;\n    readonly depth?: boolean;\n    readonly stencil?: boolean;\n    readonly color: readonly (boolean)[]; // length: [0, MAX_COLOR_ATTACHMENTS>\n}\n", "import { GL } from \"./constants.js\";\n\nexport function glErrorMessage(status: number) {\n    switch (status) {\n        case GL.NO_ERROR: break;\n        case GL.INVALID_ENUM:\n            return \"Invalid enum\";\n        case GL.INVALID_VALUE:\n            return \"Invalid value\";\n        case GL.INVALID_OPERATION:\n            return \"Invalid operation\";\n        case GL.INVALID_FRAMEBUFFER_OPERATION:\n            return \"Invalid framebuffer operation\";\n        case GL.OUT_OF_MEMORY:\n            return \"Out of memory\";\n        case GL.CONTEXT_LOST_WEBGL:\n            return \"Context lost\";\n        default:\n            return \"Unknown status\";\n    }\n}\n\nexport function glAttributesInfo(gl: WebGL2RenderingContext, program: WebGLProgram) {\n    const numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    const attributes: WebGLActiveInfo[] = [];\n    for (let i = 0; i < numAttributes; ++i) {\n        const attrib = gl.getActiveAttrib(program, i)!;\n        attributes.push(attrib);\n    }\n    return attributes;\n}\n\nexport function resizeCanvasToDisplaySize(canvas: HTMLCanvasElement, scale: number = window.devicePixelRatio) {\n    // Lookup the size the browser is displaying the canvas in CSS pixels.\n    const { width, height } = canvas.getBoundingClientRect();\n    const displayWidth = Math.round(width * scale);\n    const displayHeight = Math.round(height * scale);\n\n    // Check if the canvas is not the same size.\n    const needResize = canvas.width != displayWidth || canvas.height != displayHeight;\n\n    if (needResize) {\n        // Make the canvas the same size\n        canvas.width = displayWidth;\n        canvas.height = displayHeight;\n    }\n\n    return needResize;\n}\n\nexport function getPixelFormatChannels(format: string) {\n    switch (format) {\n        case \"ALPHA\":\n        case \"RED\":\n        case \"RED_INTEGER\":\n            return 1;\n        case \"RG\":\n        case \"RG_INTEGER\":\n            return 2;\n        case \"RGB\":\n        case \"RGB_INTEGER\":\n            return 3;\n        case \"RGBA\":\n        case \"RGBA_INTEGER\":\n            return 4;\n    }\n    throw new Error(`Unknown pixel format: ${format}!`);\n}\n\nexport function getBufferViewType(type: string) {\n    switch (type) {\n        case \"BYTE\":\n            return Int8Array;\n        case \"UNSIGNED_BYTE\":\n            return Uint8Array;\n        case \"SHORT\":\n            return Int16Array;\n        case \"UNSIGNED_SHORT_5_6_5\":\n        case \"UNSIGNED_SHORT_4_4_4_4\":\n        case \"UNSIGNED_SHORT_5_5_5_1\":\n        case \"HALF_FLOAT\":\n        case \"HALF_FLOAT_OES\":\n            return Uint16Array;\n        case \"UNSIGNED_INT\":\n        case \"UNSIGNED_INT_24_8_WEBGL\":\n        case \"UNSIGNED_INT_5_9_9_9_REV\":\n        case \"UNSIGNED_INT_2_10_10_10_REV\":\n        case \"UNSIGNED_INT_10F_11F_11F_REV\":\n            return Uint32Array;\n        case \"INT\":\n            return Int32Array;\n        case \"FLOAT\":\n            return Float32Array;\n        // case \"FLOAT_32_UNSIGNED_INT_24_8_REV\":\n        //     return null;\n    }\n    throw new Error(`Unknown buffer type: ${type}!`);\n}\n", "import { glExtensions } from \"./extensions\";\n\nexport type ShaderExtensionName = \"GL_ANGLE_multi_draw\";\n\nexport function* glShaderExtensions(gl: WebGL2RenderingContext): IterableIterator<ShaderExtension> {\n    if (glExtensions(gl).multiDraw) {\n        yield {\n            name: \"GL_ANGLE_multi_draw\",\n            behaviour: \"require\",\n        } as const satisfies ShaderExtension;\n    }\n}\n\n\nexport function glCompile(gl: WebGL2RenderingContext, params: ShaderParams): WebGLShader {\n    const source = params.shader;\n    const shader = gl.createShader(gl[params.kind])!;\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n}\n\n// remember to call gl.LinkProgram(program) on the returned program\n// call glCheckProgram() to check for completely and verify status\nexport function glCreateProgramAsync(gl: WebGL2RenderingContext, params: ProgramAsyncParams) {\n    const { header } = params;\n    const headerCode = formatHeader(gl, header);\n    const vertex = glCompile(gl, { kind: \"VERTEX_SHADER\", shader: headerCode + params.vertexShader });\n    const fragment = glCompile(gl, { kind: \"FRAGMENT_SHADER\", shader: headerCode + (params.fragmentShader ?? \"void main() {}\") });\n    const program = gl.createProgram()!;\n    gl.attachShader(program, vertex);\n    gl.attachShader(program, fragment);\n    return { program, vertex, fragment } as const;\n}\n\nexport function glCheckProgram(gl: WebGL2RenderingContext, params: ReturnType<typeof glCreateProgramAsync>) {\n    const { program, vertex, fragment } = params;\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) || gl.isContextLost()) {\n        console.assert(gl.getProgramParameter(program, gl.ATTACHED_SHADERS) == 2); // make sure not to call this function again after it returns true!\n        gl.detachShader(program, vertex);\n        gl.detachShader(program, fragment);\n        gl.deleteShader(vertex);\n        gl.deleteShader(fragment);\n    } else {\n        const status = { link: gl.getProgramInfoLog(program), vertex: gl.getShaderInfoLog(vertex), fragment: gl.getShaderInfoLog(fragment) } as const;\n        return status;\n    }\n}\n\nexport function glCreateProgram(gl: WebGL2RenderingContext, params: ProgramParams) {\n    const { flags, transformFeedback, uniformBufferBlocks, textureUniforms, headerChunk, commonChunk } = params;\n    const extensions: string[] = [];\n    if (glExtensions(gl).multiDraw) {\n        extensions.push(\"#extension GL_ANGLE_multi_draw : require\\n\");\n    }\n    const defaultHeader = `#version 300 es\\n${extensions.join(\"\")}precision highp float;\\nprecision highp int;\\nprecision highp usampler2D;\\n`;\n    const header = headerChunk ?? defaultHeader;\n    const defines = flags?.map(flag => `#define ${flag}\\n`)?.join(\"\") ?? \"\";\n    const common = commonChunk ?? \"\";\n    const vs = header + defines + common + params.vertexShader;\n    const fs = header + defines + common + (params.fragmentShader ?? \"void main() {}\");\n    const vertexShader = compileShader(gl, \"VERTEX_SHADER\", vs);\n    const fragmentShader = compileShader(gl, \"FRAGMENT_SHADER\", fs);\n    const program = gl.createProgram()!;\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    if (transformFeedback) {\n        const { varyings, bufferMode } = transformFeedback;\n        gl.transformFeedbackVaryings(program, varyings, gl[bufferMode]);\n    }\n\n    // TODO: Consider doing async linking, so as to take advantage of parallel shader compilation. (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#Compile_Shaders_and_Link_Programs_in_parallel)\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    gl.detachShader(program, vertexShader);\n    gl.detachShader(program, fragmentShader);\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS) && !gl.isContextLost())\n        throw new Error(`Failed to compile link shaders!\\r\\n${gl.getProgramInfoLog(program)}`);\n\n    gl.useProgram(program);\n\n    if (uniformBufferBlocks) {\n        let idx = 0;\n        for (const name of uniformBufferBlocks) {\n            if (name) {\n                const blockIndex = gl.getUniformBlockIndex(program, name);\n                if (blockIndex != gl.INVALID_INDEX) {\n                    gl.uniformBlockBinding(program, blockIndex, idx);\n                } else {\n                    console.warn(`Shader has no uniform block named: ${name}!`);\n                }\n            }\n            idx++;\n        }\n    }\n\n    if (textureUniforms) {\n        let i = 0;\n        for (const name of textureUniforms) {\n            const location = gl.getUniformLocation(program, name);\n            gl.uniform1i(location, i++);\n        }\n    }\n\n    gl.useProgram(null);\n    return program;\n}\n\nfunction compileShader(gl: WebGL2RenderingContext, type: \"VERTEX_SHADER\" | \"FRAGMENT_SHADER\", source: string): WebGLShader {\n    const shader = gl.createShader(gl[type])!;\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS) && !gl.isContextLost()) {\n        const typeName = type.split(\"_\")[0].toLocaleLowerCase();\n        const errorMsg = gl.getShaderInfoLog(shader);\n        throw new Error(`: Failed to compile glsl ${typeName} shader!\\r\\n${errorMsg}`);\n    }\n    return shader;\n}\n\nfunction defaultHeaderParams(gl: WebGL2RenderingContext): ShaderHeaderParams {\n    return {\n        version: \"300 es\",\n        extensions: [...glShaderExtensions(gl)],\n        defaultPrecisions: {\n            float: \"high\",\n            int: \"high\",\n            sampler2D: \"high\",\n            samplerCube: \"high\",\n            sampler3D: \"high\",\n            samplerCubeShadow: \"high\",\n            sampler2DShadow: \"high\",\n            sampler2DArray: \"high\",\n            sampler2DArrayShadow: \"high\",\n            isampler2D: \"high\",\n            isampler3D: \"high\",\n            isamplerCube: \"high\",\n            isampler2DArray: \"high\",\n            usampler2D: \"high\",\n            usampler3D: \"high\",\n            usamplerCube: \"high\",\n            usampler2DArray: \"high\",\n        },\n        flags: [],\n        defines: [],\n        commonChunk: \"\",\n    } as const satisfies ShaderHeaderParams;\n}\n\nfunction formatHeader(gl: WebGL2RenderingContext, params: string | Partial<ShaderHeaderParams> | undefined): string {\n    if (!params)\n        return \"\";\n    if (typeof params == \"string\")\n        return params;\n    const p = { ...defaultHeaderParams(gl), ...params };\n    const version = `#version ${p.version}\\n`;\n    const extensions = p.extensions.map(ext => `#extension ${ext.name} : ${ext.behaviour}\\n`).join(\"\");\n    const precisions = Object.entries(p.defaultPrecisions).map(([type, precision]) => (`precision ${precision}p ${type};\\n`)).join(\"\");\n    const flags = p.flags.map(flag => `#define ${flag}\\n`).join(\"\");\n    const defines = p.defines.map(def => `#define ${def.name} ${def.value}\\n`).join(\"\");\n    const common = p.commonChunk;\n    const header = version + extensions + precisions + flags + defines + common;\n    return header;\n}\n\nexport interface ProgramAsyncParams {\n    readonly header?: string | Partial<ShaderHeaderParams>;\n    readonly vertexShader: string;\n    readonly fragmentShader: string | undefined;\n}\n\nexport interface VertexShaderParams {\n    readonly kind: \"VERTEX_SHADER\";\n    readonly shader: string;\n}\n\nexport interface FragmentShaderParams {\n    readonly kind: \"FRAGMENT_SHADER\";\n    readonly shader: string;\n}\n\nexport type ShaderParams = VertexShaderParams | FragmentShaderParams;\n\nexport interface ShaderExtension {\n    readonly name: ShaderExtensionName | string;\n    readonly behaviour: \"enable\" | \"require\" | \"warn\" | \"disable\";\n}\n\nexport interface ShaderDefine {\n    readonly name: string;\n    readonly value?: string;\n}\n\nexport type ShaderPrecision = \"high\" | \"medium\" | \"low\";\n\nexport interface ShaderDefaultPrecisions {\n    readonly float: ShaderPrecision; // high in vert shader, no default value in frag shader\n    readonly int: ShaderPrecision; // high in vert shader, medium in frag shader.\n\n    // lowp by default\n    readonly sampler2D: ShaderPrecision;\n    readonly samplerCube: ShaderPrecision;\n\n    // no default value\n    readonly sampler3D: ShaderPrecision;\n    readonly samplerCubeShadow: ShaderPrecision;\n    readonly sampler2DShadow: ShaderPrecision;\n    readonly sampler2DArray: ShaderPrecision;\n    readonly sampler2DArrayShadow: ShaderPrecision;\n    readonly isampler2D: ShaderPrecision;\n    readonly isampler3D: ShaderPrecision;\n    readonly isamplerCube: ShaderPrecision;\n    readonly isampler2DArray: ShaderPrecision;\n    readonly usampler2D: ShaderPrecision;\n    readonly usampler3D: ShaderPrecision;\n    readonly usamplerCube: ShaderPrecision;\n    readonly usampler2DArray: ShaderPrecision;\n}\n\nexport interface ShaderHeaderParams {\n    readonly version: \"300 es\";\n    readonly extensions: readonly ShaderExtension[];\n    readonly defaultPrecisions: Partial<ShaderDefaultPrecisions>;\n    readonly flags: readonly string[]; // flags are turned into preprocessor #define's with no values (#ifdef)\n    readonly defines: readonly ShaderDefine[]; // Preprocessor #define statements.\n    readonly commonChunk: string; // this string is injected before the shader code prior to compilation\n}\n\nexport interface ProgramParams {\n    readonly vertexShader: string;\n    readonly fragmentShader?: string;\n    readonly headerChunk?: string; // this string is injected at the very top of shaders prior to compilation for things that must come before #define's, such as #version and extention directives\n    readonly flags?: readonly string[]; // flags are turned into preprocessor #define's with no values (#ifdef)\n    readonly commonChunk?: string; // this string is injected before the shader code prior to compilation\n    readonly uniformBufferBlocks?: string[]; // The names of the shader uniform blocks, which will be bound to the index in which the name appears in this array using gl.uniformBlockBinding().\n    readonly textureUniforms?: readonly string[]; // Texture uniforms will be bound to the index in which they appear in the name array.\n    readonly transformFeedback?: {\n        readonly bufferMode: \"INTERLEAVED_ATTRIBS\" | \"SEPARATE_ATTRIBS\";\n        readonly varyings: readonly string[];\n    }\n}\n\n", "export function glReadPixels(gl: WebGL2RenderingContext, params: ReadPixelsParams) {\n    const x = params.x ?? 0;\n    const y = params.y ?? 0;\n    const width = params.width ?? gl.drawingBufferWidth;\n    const height = params.height ?? gl.drawingBufferHeight;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, params.frameBuffer);\n    for (const { buffer, attachment, format, type } of params.buffers) {\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer);\n        gl.readBuffer(gl[attachment]);\n        gl.readPixels(x, y, width, height, gl[format], gl[type], 0);\n    }\n    // reset state\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n    gl.readBuffer(gl.BACK);\n}\nexport interface ReadPixelsParams {\n    readonly x?: number; // default: 0\n    readonly y?: number; // default: 0\n    readonly width?: number; // default: gl.drawingBufferWidth\n    readonly height?: number; // default: gl.drawingBufferHeight\n    readonly frameBuffer: WebGLFramebuffer | null;\n    readonly buffers: readonly ReadPixelsBuffer[];\n}\n\nexport interface ReadPixelsBuffer {\n    readonly attachment: AttachmentType;\n    readonly buffer: WebGLBuffer;\n    readonly format: PixelFormat;\n    readonly type: PixelType;\n}\n\nexport interface ReadPixelsAsyncParams {\n    readonly x: number;\n    readonly y: number;\n    readonly width?: number; // default: 1\n    readonly height?: number; // default: 1\n    readonly attachment?: AttachmentType; // default: BACK\n    readonly format?: PixelFormat; // default: RGBA\n    readonly type?: PixelType; // default: UNSIGNED_BYTE\n}\n\nexport type AttachmentType = \"BACK\" | `COLOR_ATTACHMENT${0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15}`;\nexport type PixelFormat = \"ALPHA\" | \"RGB\" | \"RGBA\" | \"RED\" | \"RG\" | \"RED_INTEGER\" | \"RG_INTEGER\" | \"RGB_INTEGER\" | \"RGBA_INTEGER\";\nexport type PixelType = \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_6_5\" | \"UNSIGNED_SHORT_4_4_4_4\" | \"UNSIGNED_SHORT_5_5_5_1\" | \"FLOAT\" | \"BYTE\" | \"UNSIGNED_INT_2_10_10_10_REV\" | \"HALF_FLOAT\" | \"SHORT\" | \"UNSIGNED_SHORT\" | \"INT\" | \"UNSIGNED_INT\" | \"UNSIGNED_INT_10F_11F_11F_REV\" | \"UNSIGNED_INT_10F_11F_11F_REV\";\nexport type Pixels = Float32Array | Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\n", "import { glLimits } from \"./limits\";\n\nexport function glCreateRenderbuffer(gl: WebGL2RenderingContext, params: RenderbufferParams): WebGLRenderbuffer {\n    const limits = glLimits(gl);\n    const buffer = gl.createRenderbuffer()!;\n    const { internalFormat, width, height } = params;\n    const samples = params.samples == undefined ? 1 : params.samples === \"max\" ? limits.MAX_SAMPLES : params.samples;\n    console.assert(samples <= limits.MAX_SAMPLES);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, buffer);\n    if (params.samples === undefined) {\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl[internalFormat], width, height);\n    } else {\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl[internalFormat], width, height);\n    }\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    return buffer;\n}\n\nexport type RenderBufferFormat =\n    \"R8\" | \"R8UI\" | \"R8I\" | \"R16UI\" | \"R16I\" | \"R32UI\" | \"R32I\" |\n    \"RG8\" | \"RG8UI\" | \"RG8I\" | \"RG16UI\" | \"RG16I\" | \"RG32UI\" | \"RG32I\" | \"RGB8\" |\n    \"RGBA8\" | \"SRGB8_ALPHA8\" | \"RGBA4\" | \"RGB565\" | \"RGB5_A1\" | \"RGB10_A2\" | \"RGBA8UI\" | \"RGBA8I\" | \"RGB10_A2UI\" | \"RGBA16UI\" | \"RGBA16I\" | \"RGBA32I\" | \"RGBA32UI\" |\n    \"DEPTH_COMPONENT16\" | \"DEPTH_COMPONENT24\" | \"DEPTH_COMPONENT32F\" | \"DEPTH24_STENCIL8\" | \"DEPTH32F_STENCIL8\" | \"STENCIL_INDEX8\" |\n    \"R16F\" | \"RG16F\" | \"RGBA16F\" | \"R32F\" | \"RG32F\" | \"RGBA32F\" | \"R11F_G11F_B10F\"; // EXT_color_buffer_float\n\nexport interface RenderbufferParams {\n    readonly internalFormat: RenderBufferFormat;\n    readonly width: number;\n    readonly height: number;\n    readonly samples?: number | \"max\"; // default: undefined (single sampled)\n};\n", "export type WrapString = \"CLAMP_TO_EDGE\" | \"MIRRORED_REPEAT\" | \"REPEAT\";\nexport type MinFilterString = \"NEAREST\" | \"LINEAR\" | \"NEAREST_MIPMAP_NEAREST\" | \"LINEAR_MIPMAP_NEAREST\" | \"NEAREST_MIPMAP_LINEAR\" | \"LINEAR_MIPMAP_LINEAR\";\nexport type MagFilterString = \"NEAREST\" | \"LINEAR\";\nexport type CompareFuncString = \"NEVER\" | \"LESS\" | \"EQUAL\" | \"LEQUAL\" | \"GREATER\" | \"NOTEQUAL\" | \"GEQUAL\" | \"ALWAYS\";\nexport type CompareModeString = \"COMPARE_REF_TO_TEXTURE\" | \"NONE\";\n\nexport function glCreateSampler(gl: WebGL2RenderingContext, params: SamplerParams): WebGLSampler {\n    const sampler = gl.createSampler()!;\n    gl.bindSampler(0, sampler);\n    const { minificationFilter, magnificationFilter, minLOD, maxLOD, wrap, compareFunction, compareMode } = params;\n    if (minificationFilter)\n        gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, gl[minificationFilter]); // default: NEAREST_MIPMAP_LINEAR\n    if (magnificationFilter)\n        gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, gl[magnificationFilter]); // default: LINEAR\n    if (wrap) {\n        const [s, t, r] = wrap;\n        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, gl[s]); // default: REPEAT\n        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, gl[t]); // default: REPEAT\n        if (r)\n            gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_R, gl[r]); // default: REPEAT\n    }\n    if (minLOD)\n        gl.samplerParameterf(sampler, gl.TEXTURE_MIN_LOD, minLOD); // default: -1000\n    if (maxLOD)\n        gl.samplerParameterf(sampler, gl.TEXTURE_MAX_LOD, maxLOD); // default: 1000\n    if (compareFunction)\n        gl.samplerParameteri(sampler, gl.TEXTURE_COMPARE_FUNC, gl[compareFunction]);\n    if (compareMode)\n        gl.samplerParameteri(sampler, gl.TEXTURE_COMPARE_MODE, gl[compareMode]);\n    return sampler;\n}\n\nexport interface SamplerParams {\n    readonly minificationFilter?: MinFilterString; // default: NEAREST_MIPMAP_LINEAR\n    readonly magnificationFilter?: MagFilterString; // default: LINEAR\n    readonly minLOD?: number; // default: -1000\n    readonly maxLOD?: number; // default: 1000\n    readonly compareFunction?: CompareFuncString;\n    readonly compareMode?: CompareModeString;\n    readonly wrap?: readonly [WrapString, WrapString] | readonly [WrapString, WrapString, WrapString]; // ST, or STR coordinate wrapping. default: REPEAT\n};\n\n", "import { glExtensions } from \"./extensions\";\nimport { glLimits, type LimitsGL } from \"./limits\";\n\nexport function glState(gl: WebGL2RenderingContext, params: StateParams | null) {\n    if (!params) {\n        const limits = glLimits(gl);\n        params = glDefaultState(limits);\n    }\n\n    const { blend, cull, depth, polygon, sample, scissor, stencil, frameBuffer, vertexArrayObject, drawBuffers, attributeDefaults, textures, uniforms, uniformBuffers } = params;\n\n    function setFlag(cap: FilteredKeys<WebGL2RenderingContext, number>, value: boolean | undefined) {\n        if (value !== undefined) {\n            if (value) {\n                gl.enable(gl[cap]);\n            } else {\n                gl.disable(gl[cap]);\n            }\n        }\n    }\n\n    function set<T>(setter: (this: WebGLRenderingContext, ...values: any) => void, values: T, defaultValues: any, ...keys: readonly (keyof T)[]) {\n        if (keys.some(key => values![key] !== undefined)) {\n            const args = keys.map(key => {\n                const v = values![key] ?? defaultValues[key];\n                return typeof v == \"string\" ? gl[v as keyof WebGL2RenderingContext] : v;\n            });\n            (<Function>setter).apply(gl, args);\n        }\n    }\n\n    setFlag(\"DITHER\", params.ditherEnable);\n    setFlag(\"RASTERIZER_DISCARD\", params.rasterizerDiscard);\n    set((rgba: readonly [boolean, boolean, boolean, boolean]) => { gl.colorMask(...rgba); }, params, \"colorMask\");\n    set(rect => gl.viewport(rect.x ?? 0, rect.y ?? 0, rect.width, rect.height), params, defaultConstants, \"viewport\");\n\n    if (blend) {\n        const defaultValues = defaultConstants.blend;\n        const { drawBuffersIndexed } = glExtensions(gl);\n        if (drawBuffersIndexed) {\n            // only change settings for drawbuffer 0.\n            if (blend.enable) {\n                drawBuffersIndexed.enableiOES(gl.BLEND, 0);\n            } else {\n                drawBuffersIndexed.disableiOES(gl.BLEND, 0);\n            }\n            set((modeRGB, modeAlpha) => drawBuffersIndexed.blendEquationSeparateiOES(0, modeRGB, modeAlpha), blend, defaultValues, \"equationRGB\", \"equationAlpha\");\n            set((srcRGB, dstRGB, srcAlpha, dstAlpha) => drawBuffersIndexed.blendFuncSeparateiOES(0, srcRGB, dstRGB, srcAlpha, dstAlpha), blend, defaultValues, \"srcRGB\", \"dstRGB\", \"srcAlpha\", \"dstAlpha\");\n        } else {\n            setFlag(\"BLEND\", blend.enable);\n            set(gl.blendEquationSeparate, blend, defaultValues, \"equationRGB\", \"equationAlpha\");\n            set(gl.blendFuncSeparate, blend, defaultValues, \"srcRGB\", \"dstRGB\", \"srcAlpha\", \"dstAlpha\");\n        }\n        set((rgba: readonly [number, number, number, number]) => { gl.blendColor(...rgba); }, blend, defaultValues, \"color\");\n    }\n\n    if (cull) {\n        const defaultValues = defaultConstants.cull;\n        setFlag(\"CULL_FACE\", cull.enable);\n        set(gl.cullFace, cull, defaultValues, \"mode\");\n        set(gl.frontFace, cull, defaultValues, \"frontFace\");\n    }\n\n    if (depth) {\n        const defaultValues = defaultConstants.depth;\n        setFlag(\"DEPTH_TEST\", depth.test);\n        set(gl.depthFunc, depth, defaultValues, \"func\");\n        set(gl.depthMask, depth, defaultValues, \"writeMask\");\n        set((range: readonly [number, number]) => gl.depthRange(...range), depth, defaultValues, \"range\");\n    }\n\n    if (polygon) {\n        const defaultValues = defaultConstants.polygon;\n        setFlag(\"POLYGON_OFFSET_FILL\", polygon.offsetFill);\n        set(gl.polygonOffset, polygon, defaultValues, \"offsetFactor\", \"offsetUnits\");\n    }\n\n    if (sample) {\n        const defaultValues = defaultConstants.sample;\n        setFlag(\"SAMPLE_ALPHA_TO_COVERAGE\", sample.alphaToCoverage);\n        setFlag(\"SAMPLE_COVERAGE\", sample.coverage);\n        set(gl.sampleCoverage, sample, defaultValues, \"coverageValue\", \"coverageInvert\");\n    }\n\n    if (scissor) {\n        const defaultValues = defaultConstants.scissor;\n        setFlag(\"SCISSOR_TEST\", scissor.test);\n        set(rect => gl.scissor(rect.x ?? 0, rect.y ?? 0, rect.width, rect.height), scissor, defaultValues, \"box\");\n    }\n\n    if (stencil) {\n        const defaultValues = defaultConstants.stencil;\n        setFlag(\"STENCIL_TEST\", stencil.test);\n        set((func, ref, mask) => gl.stencilFuncSeparate(gl.FRONT, func, ref, mask), stencil, defaultValues, \"func\", \"ref\", \"valueMask\");\n        set((func, ref, mask) => gl.stencilFuncSeparate(gl.BACK, func, ref, mask), stencil, defaultValues, \"backFunc\", \"backRef\", \"backValueMask\");\n    }\n\n    if (vertexArrayObject !== undefined) {\n        gl.bindVertexArray(vertexArrayObject);\n    }\n\n    if (frameBuffer !== undefined) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    }\n\n    if (drawBuffers) {\n        gl.drawBuffers(drawBuffers.map(b => gl[b!]));\n    }\n\n    const { program } = params;\n    if (program !== undefined) {\n        gl.useProgram(program);\n    }\n\n    if (attributeDefaults) {\n        for (let i = 0; i < attributeDefaults.length; i++) {\n            const defaults = attributeDefaults[i];\n            if (defaults) {\n                const { type, values } = defaults;\n                gl[`vertexAttrib${type}v`](i, values);\n            }\n        }\n    }\n\n    if (textures) {\n        const texture0 = gl.TEXTURE0;\n        for (let i = 0; i < textures.length; i++) {\n            const binding = textures[i];\n            const texture = binding?.texture ?? null;\n            gl.activeTexture(texture0 + i);\n            gl.bindTexture(gl[binding?.kind ?? \"TEXTURE_2D\"], texture);\n            const sampler = binding?.sampler ?? null;\n            gl.bindSampler(i, sampler);\n            gl.uniform1i(binding?.uniform ?? null, i);\n        }\n        gl.activeTexture(texture0);\n    }\n\n    if (uniforms) {\n        function isMatrix(binding: UniformBinding): binding is UniformBindingMatrix {\n            return binding.kind.startsWith(\"Matrix\");\n        }\n        function isScalar(binding: UniformBinding): binding is UniformBindingScalar {\n            return binding.kind.startsWith(\"1\");\n        }\n        for (const binding of uniforms) {\n            if (isMatrix(binding)) {\n                const methodName = `uniform${binding.kind}v` as const;\n                gl[methodName](binding.location, binding.transpose ?? false, binding.value);\n            } else if (isScalar(binding)) {\n                const methodName = `uniform${binding.kind}` as const;\n                gl[methodName](binding.location, binding.value);\n            } else {\n                const methodName = `uniform${binding.kind}v` as const;\n                gl[methodName](binding.location, binding.value);\n            }\n        }\n    }\n\n    if (uniformBuffers) {\n        let idx = 0;\n        for (const uniformBindingParams of uniformBuffers) {\n            if (uniformBindingParams === undefined)\n                continue;\n            if (isUniformBufferBindingRange(uniformBindingParams)) {\n                const { buffer, byteOffset, byteSize } = uniformBindingParams;\n                gl.bindBufferRange(gl.UNIFORM_BUFFER, idx, buffer, byteOffset, byteSize);\n            } else {\n                gl.bindBufferBase(gl.UNIFORM_BUFFER, idx, uniformBindingParams);\n            }\n            idx++;\n        }\n    }\n}\n\nexport function glDefaultState(limits: LimitsGL): State {\n    return {\n        ...defaultConstants,\n        drawBuffers: [\"BACK\"] as ReadonlyArray<ColorAttachment | \"BACK\" | \"NONE\">,\n        attributeDefaults: Array<AttributeDefault | null>(limits.MAX_VERTEX_ATTRIBS).fill({ type: \"4f\", values: [0, 0, 0, 1] }) as ReadonlyArray<AttributeDefault | null>,\n        textures: Array<TextureBinding | null>(limits.MAX_COMBINED_TEXTURE_IMAGE_UNITS).fill(null) as ReadonlyArray<TextureBinding | null>,\n    } as const;\n}\n\ntype ScopedParamsKeys = \"blend\" | \"cull\" | \"depth\" | \"polygon\" | \"sample\" | \"stencil\" | \"scissor\";\nexport type StateParams = Partial<Omit<State, ScopedParamsKeys>> & { readonly [P in ScopedParamsKeys]?: Partial<State[P]> };\n\nexport interface State {\n    // blend state (except constant color) only applies to COLOR_ATTACHMENT0 if OES_draw_buffers_indexed is supported.\n    readonly blend: {\n        readonly enable: boolean; // BLEND\n        readonly color: RGBA; // BLEND_COLOR\n        readonly dstAlpha: BlendFunction; // BLEND_DST_ALPHA\n        readonly dstRGB: BlendFunction; // BLEND_DST_RGB\n        readonly equationAlpha: BlendEquation; // BLEND_EQUATION_ALPHA\n        readonly equationRGB: BlendEquation; // BLEND_EQUATION_RGB\n        readonly srcAlpha: BlendFunction; // BLEND_EQUATION_ALPHA\n        readonly srcRGB: BlendFunction; // BLEND_SRC_RGB\n    };\n\n    readonly cull: {\n        readonly enable: boolean; // CULL_FACE\n        readonly mode: CullMode; // CULL_FACE_MODE\n        readonly frontFace: Winding; // FRONT_FACE\n    };\n\n    readonly depth: {\n        readonly test: boolean; // DEPTH_TEST\n        readonly func: DepthFunc; // DEPTH_FUNC\n        readonly writeMask: boolean; // DEPTH_WRITEMASK\n        readonly range: readonly [near: number, far: number]; // DEPTH_RANGE\n    };\n\n    readonly polygon: {\n        readonly offsetFill: boolean; // POLYGON_OFFSET_FILL\n        readonly offsetFactor: number; // POLYGON_OFFSET_FACTOR\n        readonly offsetUnits: number; // POLYGON_OFFSET_UNITS\n    };\n\n    readonly sample: {\n        readonly alphaToCoverage: boolean; // SAMPLE_ALPHA_TO_COVERAGE\n        readonly coverage: boolean; // SAMPLE_COVERAGE\n        readonly coverageValue: number; // SAMPLE_COVERAGE_VALUE\n        readonly coverageInvert: boolean; // SAMPLE_COVERAGE_INVERT\n    };\n\n    readonly stencil: {\n        readonly test: boolean; // STENCIL_TEST\n        readonly func: DepthFunc; // STENCIL_FUNC\n        readonly valueMask: number; // STENCIL_VALUE_MASK\n        readonly ref: number; // STENCIL_REF\n        readonly backFunc: DepthFunc; // STENCIL_BACK_FUNC\n        readonly backValueMask: number; // STENCIL_BACK_VALUE_MASK\n        readonly backRef: number; // STENCIL_BACK_REF\n    };\n\n    readonly scissor: {\n        readonly test: boolean; // SCISSOR_TEST\n        readonly box: Rect;\n    }\n\n    readonly ditherEnable: boolean; // DITHER\n    readonly colorMask: readonly [red: boolean, green: boolean, blue: boolean, alpha: boolean];\n    readonly viewport: Rect;\n    readonly rasterizerDiscard: boolean; // RASTERIZER_DISCARD\n    readonly frameBuffer: WebGLFramebuffer | null;\n    readonly vertexArrayObject: WebGLVertexArrayObject | null;\n    readonly program: WebGLProgram | null;\n    readonly uniforms: readonly UniformBinding[];\n    readonly uniformBuffers: readonly UniformBufferBinding[]; // max length: MAX_UNIFORM_BUFFER_BINDINGS\n    readonly drawBuffers: readonly (ColorAttachment | \"BACK\" | \"NONE\")[];\n    readonly attributeDefaults: readonly (AttributeDefault | null)[];\n    readonly textures: readonly (TextureBinding | null)[];\n}\n\n\nexport type BlendEquation = \"FUNC_ADD\" | \"FUNC_SUBTRACT\" | \"FUNC_REVERSE_SUBTRACT\" | \"MIN\" | \"MAX\";\nexport type BlendFunction = \"ZERO\" | \"ONE\" | \"SRC_COLOR\" | \"ONE_MINUS_SRC_COLOR\" | \"DST_COLOR\" | \"ONE_MINUS_DST_COLOR\" | \"SRC_ALPHA\" | \"ONE_MINUS_SRC_ALPHA\" | \"DST_ALPHA\" | \"ONE_MINUS_DST_ALPHA\" | \"CONSTANT_COLOR\" | \"ONE_MINUS_CONSTANT_COLOR\" | \"CONSTANT_ALPHA\" | \"ONE_MINUS_CONSTANT_ALPHA\" | \"SRC_ALPHA_SATURATE\";\nexport type CullMode = \"FRONT\" | \"BACK\" | \"FRONT_AND_BACK\";\nexport type DepthFunc = \"NEVER\" | \"LESS\" | \"EQUAL\" | \"LEQUAL\" | \"GREATER\" | \"NOTEQUAL\" | \"GEQUAL\" | \"ALWAYS\";\nexport type Winding = \"CW\" | \"CCW\";\nexport type ColorAttachment = `COLOR_ATTACHMENT${0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15}`;\nexport type RGBA = readonly [r: number, g: number, b: number, a: number];\nexport type XYZW = readonly [x: number, y: number, z: number, w: number];\n\nexport interface Rect {\n    readonly x?: number;\n    readonly y?: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface AttributeDefault {\n    readonly type: \"4f\" | \"I4i\" | \"I4ui\";\n    readonly values: XYZW;\n}\n\nexport interface AttributeBinding {\n    readonly type: \"4f\" | \"I4i\" | \"I4ui\";\n    readonly values: XYZW;\n}\n\nexport type UniformTypeScalar = \"1f\" | \"1i\" | \"1ui\";\n\nexport type UniformTypeVector =\n    \"2f\" | \"3f\" | \"4f\" |\n    \"2i\" | \"3i\" | \"4i\" |\n    \"2ui\" | \"3ui\" | \"4ui\";\n\nexport type UniformTypeMatrix =\n    \"Matrix2f\" | \"Matrix3f\" | \"Matrix4f\" |\n    \"Matrix2x3f\" | \"Matrix2x4f\" |\n    \"Matrix3x2f\" | \"Matrix3x4f\" |\n    \"Matrix4x2f\" | \"Matrix4x3f\";\n\nexport interface UniformBindingScalar {\n    readonly kind: UniformTypeScalar;\n    readonly location: WebGLUniformLocation | null;\n    readonly value: number;\n}\n\nexport interface UniformBindingVector {\n    readonly kind: UniformTypeVector;\n    readonly location: WebGLUniformLocation | null;\n    readonly value: readonly number[];\n}\n\nexport interface UniformBindingMatrix {\n    readonly kind: UniformTypeMatrix;\n    readonly location: WebGLUniformLocation | null;\n    readonly value: readonly number[];\n    readonly transpose?: boolean; // default: false\n}\n\nexport type UniformBinding = UniformBindingScalar | UniformBindingVector | UniformBindingMatrix;\n\n\nexport interface UniformBufferBindingRange {\n    readonly buffer: WebGLBuffer;\n    readonly byteOffset: number;\n    readonly byteSize: number;\n}\n\nexport type UniformBufferBinding = UniformBufferBindingRange | WebGLBuffer | null | undefined; // if undefined, the buffer binding will not be changed\n\nexport interface TextureBinding {\n    readonly kind: \"TEXTURE_2D\" | \"TEXTURE_3D\" | \"TEXTURE_2D_ARRAY\" | \"TEXTURE_CUBE_MAP\";\n    readonly texture: WebGLTexture | null;\n    readonly sampler: WebGLSampler | null;\n    readonly uniform?: WebGLUniformLocation | null;\n}\n\ntype FilteredKeys<T, U> = { [P in keyof T]: T[P] extends U ? P : never }[keyof T];\n\nfunction isUniformBufferBindingRange(params: UniformBufferBindingRange | WebGLBuffer | null): params is UniformBufferBindingRange {\n    return params != null && \"byteOffset\" in params && \"byteSize\" in params;\n}\n\nconst defaultConstants = {\n    blend: {\n        enable: false, // BLEND\n        color: [0, 0, 0, 0], // BLEND_COLOR\n        dstAlpha: \"ZERO\", // BLEND_DST_ALPHA\n        dstRGB: \"ZERO\", // BLEND_DST_RGB\n        equationAlpha: \"FUNC_ADD\", // BLEND_EQUATION_ALPHA\n        equationRGB: \"FUNC_ADD\", // BLEND_EQUATION_RGB\n        srcAlpha: \"ONE\", // BLEND_EQUATION_ALPHA\n        srcRGB: \"ONE\", // BLEND_SRC_RGB\n    },\n\n    cull: {\n        enable: false, // CULL_FACE\n        mode: \"BACK\", // CULL_FACE_MODE\n        frontFace: \"CCW\", // FRONT_FACE\n    },\n\n    depth: {\n        test: false, // DEPTH_TEST\n        func: \"LESS\", // DEPTH_FUNC\n        writeMask: true, // DEPTH_WRITEMASK\n        range: [0, 1], // DEPTH_RANGE\n    },\n\n    ditherEnable: true, // DITHER\n\n    colorMask: [true, true, true, true],\n\n    polygon: {\n        offsetFill: false, // POLYGON_OFFSET_FILL\n        offsetFactor: 0, // POLYGON_OFFSET_FACTOR\n        offsetUnits: 0, // POLYGON_OFFSET_UNITS\n    },\n\n    sample: {\n        alphaToCoverage: false, // SAMPLE_ALPHA_TO_COVERAGE\n        coverage: false, // SAMPLE_COVERAGE\n        coverageValue: 1, // SAMPLE_COVERAGE_VALUE\n        coverageInvert: false, // SAMPLE_COVERAGE_INVERT\n    },\n\n    stencil: {\n        test: false, // STENCIL_TEST\n        func: \"ALWAYS\", // STENCIL_FUNC\n        valueMask: 0x7FFFFFFF, // STENCIL_VALUE_MASK\n        ref: 0, // STENCIL_REF\n        backFunc: \"ALWAYS\", // STENCIL_BACK_FUNC\n        backValueMask: 0x7FFFFFFF, // STENCIL_BACK_VALUE_MASK\n        backRef: 0, // STENCIL_BACK_REF\n    },\n\n    viewport: { // VIEWPORT\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    } as Rect,\n\n    scissor: {\n        test: false, // SCISSOR_TEST\n        box: { // SCISSOR_BOX\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n        } as Rect,\n    },\n\n    rasterizerDiscard: false, // RASTERIZER_DISCARD\n\n    frameBuffer: null,\n    vertexArrayObject: null,\n\n    program: null,\n    uniforms: [],\n    uniformBuffers: [], // max length: MAX_UNIFORM_BUFFER_BINDINGS\n} as const;\n", "import { GL } from \"./constants.js\";\nimport { getBufferViewType } from \"./misc.js\";\n\nexport function glCreateTexture(gl: WebGL2RenderingContext, params: TextureParams) {\n    const texture = gl.createTexture()!;\n    const width = params.width ?? params.image.width;\n    const height = params.height ?? params.image.height;\n    const target = gl[params.kind];\n    const depth = \"depth\" in params ? params.depth : undefined;\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(target, texture);\n\n    const { internalFormat, format, type, arrayType } = getFormatInfo(gl, params.internalFormat, \"type\" in params ? params.type : undefined);\n\n    type ImageTarget = typeof gl[TextureImageTargetString];\n\n    function textureImage(imgTarget: ImageTarget, data: BufferSource | null, level: number, sizeX: number, sizeY: number, sizeZ = 0) {\n        if (!data)\n            return;\n        const source = data;\n        const view = ArrayBuffer.isView(source) ? source : undefined;\n        const buffer = ArrayBuffer.isView(view) ? view.buffer : source as ArrayBufferLike;\n        const byteOffset = view?.byteOffset ?? 0;\n        const byteLength = view?.byteLength ?? buffer?.byteLength;\n        const pixels = buffer === null ? null : new arrayType(buffer, byteOffset, byteLength / arrayType.BYTES_PER_ELEMENT);\n        const offsetX = 0;\n        const offsetY = 0\n        const offsetZ = 0;\n        if (type) {\n            if (sizeZ) {\n                gl.texSubImage3D(imgTarget, level, offsetX, offsetY, offsetZ, sizeX, sizeY, sizeZ, format as number, type, pixels);\n            } else {\n                gl.texSubImage2D(imgTarget, level, offsetX, offsetY, sizeX, sizeY, format as number, type, pixels);\n            }\n        } else {\n            if (sizeZ) {\n                gl.compressedTexSubImage3D(imgTarget, level, offsetX, offsetY, offsetZ, sizeX, sizeY, sizeZ, internalFormat, pixels!);\n            } else {\n                gl.compressedTexSubImage2D(imgTarget, level, offsetX, offsetY, sizeX, sizeY, internalFormat, pixels!);\n            }\n        }\n    }\n\n    function textureMipLevel(level: number, image: BufferSource | readonly BufferSource[] | null) {\n        function isArray(img: typeof image): img is readonly BufferSource[] {\n            return Array.isArray(img);\n        }\n        const n = 1 << level;\n        if (isArray(image)) {\n            console.assert(target == gl.TEXTURE_CUBE_MAP);\n            const cubeImages = image[level];\n            if (cubeImages) {\n                let side = gl.TEXTURE_CUBE_MAP_POSITIVE_X;\n                for (let img of image) {\n                    textureImage((side++) as ImageTarget, img, level, width / n, height / n);\n                }\n            }\n        } else {\n            if (depth) {\n                if (target == gl.TEXTURE_3D) {\n                    textureImage(gl.TEXTURE_3D, image, level, width / n, height / n, depth / n);\n                }\n                else {\n                    console.assert(target == gl.TEXTURE_2D_ARRAY);\n                    textureImage(gl.TEXTURE_3D, image, level, width / n, height / n, depth);\n                }\n            } else {\n                console.assert(target == gl.TEXTURE_2D);\n                textureImage(gl.TEXTURE_2D, image, level, width, height);\n            }\n        }\n    }\n\n    function textureStorage(levels: number = 1) {\n        if (depth) {\n            gl.texStorage3D(target, levels, internalFormat, width, height, depth);\n        } else {\n            gl.texStorage2D(target, levels, internalFormat, width, height);\n        }\n    }\n\n    if (\"mipMaps\" in params) {\n        // mip mapped\n        const { mipMaps } = params;\n        const isNumber = typeof mipMaps == \"number\";\n        const levels = isNumber ? mipMaps : mipMaps.length;\n        textureStorage(levels);\n        if (!isNumber) {\n            for (let level = 0; level < levels; level++) {\n                const mipMap = mipMaps[level];\n                if (mipMap) {\n                    textureMipLevel(level, mipMap);\n                }\n            }\n        }\n    } else if (isBufferSource(params.image)) {\n        const generateMipMaps = \"generateMipMaps\" in params && params.generateMipMaps;\n        if (generateMipMaps && !(isPowerOf2(width) && isPowerOf2(height) && type)) {\n            throw new Error(`Cannot generate mip maps on a texture of non-power of two sizes (${width}, ${height})!`);\n        }\n        const levels = generateMipMaps ? Math.log2(Math.min(width, height)) : 1;\n        textureStorage(levels);\n        textureMipLevel(0, params.image);\n        if (generateMipMaps && params.image) {\n            gl.generateMipmap(target);\n        }\n    } else {\n        const generateMipMaps = \"generateMipMaps\" in params && params.generateMipMaps;\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format!, type!, params.image as TextureImageSource);\n        if (generateMipMaps && isPowerOf2(width) && isPowerOf2(height)) {\n            gl.generateMipmap(target);\n        }\n    }\n    gl.bindTexture(target, null);\n    return texture;\n}\n\nexport function glUpdateTexture(gl: WebGL2RenderingContext, targetTexture: WebGLTexture, params: TextureParams) {\n    const width = params.width ?? params.image.width;\n    const height = params.height ?? params.image.height;\n    const target = gl[params.kind];\n    const depth = \"depth\" in params ? params.depth : undefined;\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(target, targetTexture);\n\n    const { internalFormat, format, type, arrayType } = getFormatInfo(gl, params.internalFormat, \"type\" in params ? params.type : undefined);\n\n    type ImageTarget = typeof gl[TextureImageTargetString];\n\n    function textureImage(imgTarget: typeof gl[TextureImageTargetString], data: BufferSource | null, level: number, sizeX: number, sizeY: number, sizeZ = 0) {\n        if (!data)\n            return;\n        const source = data;\n        const view = ArrayBuffer.isView(source) ? source : undefined;\n        const buffer = ArrayBuffer.isView(view) ? view.buffer : source as ArrayBufferLike;\n        const byteOffset = view?.byteOffset ?? 0;\n        const byteLength = view?.byteLength ?? buffer?.byteLength;\n        const pixels = buffer === null ? null : new arrayType(buffer, byteOffset, byteLength / arrayType.BYTES_PER_ELEMENT);\n        const offsetX = 0;\n        const offsetY = 0\n        const offsetZ = 0;\n        if (type) {\n            if (sizeZ) {\n                gl.texSubImage3D(imgTarget, level, offsetX, offsetY, offsetZ, sizeX, sizeY, sizeZ, format as number, type, pixels);\n            } else {\n                gl.texSubImage2D(imgTarget, level, offsetX, offsetY, sizeX, sizeY, format as number, type, pixels);\n            }\n        } else {\n            if (sizeZ) {\n                gl.compressedTexSubImage3D(imgTarget, level, offsetX, offsetY, offsetZ, sizeX, sizeY, sizeZ, internalFormat, pixels!);\n            } else {\n                gl.compressedTexSubImage2D(imgTarget, level, offsetX, offsetY, sizeX, sizeY, internalFormat, pixels!);\n            }\n        }\n    }\n\n    function textureMipLevel(level: number, image: BufferSource | readonly BufferSource[] | null) {\n        function isArray(img: typeof image): img is readonly BufferSource[] {\n            return Array.isArray(img);\n        }\n        const n = 1 << level;\n        if (isArray(image)) {\n            console.assert(target == gl.TEXTURE_CUBE_MAP);\n            const cubeImages = image[level];\n            if (cubeImages) {\n                let side = gl.TEXTURE_CUBE_MAP_POSITIVE_X;\n                for (let img of image) {\n                    textureImage((side++) as ImageTarget, img, level, width / n, height / n);\n                }\n            }\n        } else {\n            if (depth) {\n                if (target == gl.TEXTURE_3D) {\n                    textureImage(gl.TEXTURE_3D, image, level, width / n, height / n, depth / n);\n                }\n                else {\n                    console.assert(target == gl.TEXTURE_2D_ARRAY);\n                    textureImage(gl.TEXTURE_3D, image, level, width / n, height / n, depth);\n                }\n            } else {\n                console.assert(target == gl.TEXTURE_2D);\n                textureImage(gl.TEXTURE_2D, image, level, width, height);\n            }\n        }\n    }\n\n    if (\"mipMaps\" in params) {\n        // mip mapped\n        const { mipMaps } = params;\n        const isNumber = typeof mipMaps == \"number\";\n        const levels = isNumber ? mipMaps : mipMaps.length;\n        if (!isNumber) {\n            for (let level = 0; level < levels; level++) {\n                const mipMap = mipMaps[level];\n                if (mipMap) {\n                    textureMipLevel(level, mipMap);\n                }\n            }\n        }\n    } else if (isBufferSource(params.image)) {\n        const generateMipMaps = \"generateMipMaps\" in params && params.generateMipMaps;\n        if (generateMipMaps && !(isPowerOf2(width) && isPowerOf2(height) && type)) {\n            throw new Error(`Cannot generate mip maps on a texture of non-power of two sizes (${width}, ${height})!`);\n        }\n        const levels = generateMipMaps ? Math.log2(Math.min(width, height)) : 1;\n        textureMipLevel(0, params.image);\n        if (generateMipMaps && params.image) {\n            gl.generateMipmap(target);\n        }\n    } else {\n        const generateMipMaps = \"generateMipMaps\" in params && params.generateMipMaps;\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format!, type!, params.image as TextureImageSource);\n        if (generateMipMaps && isPowerOf2(width) && isPowerOf2(height)) {\n            gl.generateMipmap(target);\n        }\n    }\n    gl.bindTexture(target, null);\n}\n\nfunction isPowerOf2(value: number) {\n    return (value & (value - 1)) == 0;\n}\n\nfunction isFormatCompressed(format: UncompressedTextureFormatString | CompressedTextureFormatString): format is CompressedTextureFormatString {\n    return format.startsWith(\"COMPRESSED\");\n}\n\nfunction isBufferSource(image: unknown): image is BufferSource {\n    return image == undefined || Array.isArray(image) || image instanceof ArrayBuffer || ArrayBuffer.isView(image);\n}\n\nfunction getFormatInfo(gl: WebGL2RenderingContext, internalFormatString: UncompressedTextureFormatString | CompressedTextureFormatString, typeString?: TexelTypeString) {\n    if (isFormatCompressed(internalFormatString)) {\n        const internalFormat = compressedFormats[internalFormatString];\n        const format = undefined;\n        const type = undefined;\n        const arrayType = Uint8Array;\n        return { internalFormat, format, type, arrayType };\n    } else {\n        const internalFormat = gl[internalFormatString] as keyof typeof internalFormat2FormatLookup;\n        const format = internalFormat2FormatLookup[internalFormat];\n        const type = gl[typeString!];\n        const arrayType = getBufferViewType(typeString!);\n        return { internalFormat, format, type, arrayType };\n    }\n}\n\nexport type TextureParams =\n    TextureParams2DUncompressedImage | TextureParams2DUncompressed | TextureParams2DCompressed | TextureParams2DUncompressedMipMapped | TextureParams2DCompressedMipMapped |\n    TextureParamsCubeUncompressed | TextureParamsCubeCompressed | TextureParamsCubeUncompressedMipMapped | TextureParamsCubeCompressedMipMapped |\n    TextureParams3DUncompressed | TextureParams3DCompressed | TextureParams3DUncompressedMipMapped | TextureParams3DCompressedMipMapped |\n    TextureParams2DArrayUncompressed | TextureParams2DArrayCompressed | TextureParams2DArrayUncompressedMipMapped | TextureParams2DArrayCompressedMipMapped;\n\nexport type TextureTargetString = TextureParams[\"kind\"];\n\nexport type TextureImageSource = ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas;\n\n// 2D\nexport type TextureParams2DUncompressedImage = Uncompressed & Partial<Size2D> & GenMipMap & {\n    readonly kind: \"TEXTURE_2D\";\n    readonly image: TextureImageSource;\n};\n\nexport type TextureParams2DUncompressed = Uncompressed & Size2D & GenMipMap & {\n    readonly kind: \"TEXTURE_2D\";\n    readonly image: BufferSource | TextureImageSource | null;\n};\n\nexport interface TextureParams2DCompressed extends Compressed, Size2D {\n    readonly kind: \"TEXTURE_2D\";\n    readonly image: BufferSource;\n};\n\nexport type TextureParams2DUncompressedMipMapped = Uncompressed & Size2D<Pow2> & GenMipMap & {\n    readonly kind: \"TEXTURE_2D\";\n    readonly mipMaps: number | readonly (BufferSource | null)[];\n};\n\nexport interface TextureParams2DCompressedMipMapped extends Compressed, Size2D<Pow2> {\n    readonly kind: \"TEXTURE_2D\";\n    readonly mipMaps: readonly (BufferSource)[];\n};\n\n// Cube\nexport type TextureParamsCubeUncompressed = Uncompressed & Size2D & GenMipMap & {\n    readonly kind: \"TEXTURE_CUBE_MAP\";\n    readonly image: CubeImages | null;\n}\n\nexport interface TextureParamsCubeCompressed extends Compressed, Size2D {\n    readonly kind: \"TEXTURE_CUBE_MAP\";\n    readonly image: CubeImages;\n}\n\nexport type TextureParamsCubeUncompressedMipMapped = Uncompressed & Size2D<Pow2> & {\n    readonly kind: \"TEXTURE_CUBE_MAP\";\n    readonly mipMaps: number | readonly (CubeImages | null)[];\n}\n\nexport interface TextureParamsCubeCompressedMipMapped extends Compressed, Size2D<Pow2> {\n    readonly kind: \"TEXTURE_CUBE_MAP\";\n    readonly mipMaps: readonly (CubeImages)[];\n}\n\n// 3D\nexport type TextureParams3DUncompressed = Uncompressed & Size3D & GenMipMap & {\n    readonly kind: \"TEXTURE_3D\";\n    readonly image: BufferSource | null;\n}\n\nexport interface TextureParams3DCompressed extends Compressed, Size3D {\n    readonly kind: \"TEXTURE_3D\";\n    readonly image: BufferSource;\n}\n\nexport type TextureParams3DUncompressedMipMapped = Uncompressed & Size3D<Pow2> & {\n    readonly kind: \"TEXTURE_3D\";\n    readonly mipMaps: number | readonly (BufferSource | null)[];\n}\n\nexport interface TextureParams3DCompressedMipMapped extends Compressed, Size3D<Pow2> {\n    readonly kind: \"TEXTURE_3D\";\n    readonly mipMaps: readonly (BufferSource)[];\n}\n\n// 2D Array\nexport type TextureParams2DArrayUncompressed = Uncompressed & Size3D & GenMipMap & {\n    readonly kind: \"TEXTURE_2D_ARRAY\";\n    readonly image: BufferSource | null;\n}\n\nexport interface TextureParams2DArrayCompressed extends Compressed, Size3D {\n    readonly kind: \"TEXTURE_2D_ARRAY\";\n    readonly image: BufferSource;\n}\n\nexport type TextureParams2DArrayUncompressedMipMapped = Uncompressed & Size3D<Pow2> & {\n    readonly kind: \"TEXTURE_2D_ARRAY\";\n    readonly mipMaps: number | readonly (BufferSource | null)[];\n}\n\nexport interface TextureParams2DArrayCompressedMipMapped extends Compressed, Size3D<Pow2> {\n    readonly kind: \"TEXTURE_2D_ARRAY\";\n    readonly mipMaps: readonly (BufferSource)[];\n}\n\nexport type TextureImageTargetString = \"TEXTURE_2D\" | \"TEXTURE_3D\" | \"TEXTURE_2D_ARRAY\" | \"TEXTURE_CUBE_MAP_POSITIVE_X\" | \"TEXTURE_CUBE_MAP_NEGATIVE_X\" | \"TEXTURE_CUBE_MAP_POSITIVE_Y\" | \"TEXTURE_CUBE_MAP_NEGATIVE_Y\" | \"TEXTURE_CUBE_MAP_POSITIVE_Z\" | \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\n\n// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexStorage2D.xhtml\nexport type UncompressedTextureFormatType =\n    { internalFormat: \"R8\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"R8_SNORM\", type: \"BYTE\" } |\n    { internalFormat: \"R16F\", type: \"HALF_FLOAT\" | \"FLOAT\" } |\n    { internalFormat: \"R32F\", type: \"FLOAT\" } |\n    { internalFormat: \"R8UI\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"R8I\", type: \"BYTE\" } |\n    { internalFormat: \"R16UI\", type: \"UNSIGNED_SHORT\" } |\n    { internalFormat: \"R16I\", type: \"SHORT\" } |\n    { internalFormat: \"R32UI\", type: \"UNSIGNED_INT\" } |\n    { internalFormat: \"R32I\", type: \"INT\" } |\n    { internalFormat: \"RG8\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"RG8_SNORM\", type: \"BYTE\" } |\n    { internalFormat: \"RG16F\", type: \"HALF_FLOAT\" | \"FLOAT\" } |\n    { internalFormat: \"RG32F\", type: \"FLOAT\" } |\n    { internalFormat: \"RG8UI\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"RG8I\", type: \"BYTE\" } |\n    { internalFormat: \"RG16UI\", type: \"UNSIGNED_SHORT\" } |\n    { internalFormat: \"RG16I\", type: \"SHORT\" } |\n    { internalFormat: \"RG32UI\", type: \"UNSIGNED_INT\" } |\n    { internalFormat: \"RG32I\", type: \"INT\" } |\n    { internalFormat: \"RGB8\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"SRGB8\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"RGB565\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_6_5\" } |\n    { internalFormat: \"RGB8_SNORM\", type: \"BYTE\" } |\n    { internalFormat: \"R11F_G11F_B10F\", type: \"UNSIGNED_INT_10F_11F_11F_REV\" | \"HALF_FLOAT\" | \"FLOAT\" } |\n    { internalFormat: \"RGB9_E5\", type: \"UNSIGNED_INT_5_9_9_9_REV\" | \"HALF_FLOAT\" | \"FLOAT\" } |\n    { internalFormat: \"RGB16F\", type: \"HALF_FLOAT\" | \"FLOAT\" } |\n    { internalFormat: \"RGB32F\", type: \"FLOAT\" } |\n    { internalFormat: \"RGB8UI\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"RGB8I\", type: \"BYTE\" } |\n    { internalFormat: \"RGB16UI\", type: \"UNSIGNED_SHORT\" } |\n    { internalFormat: \"RGB16I\", type: \"SHORT\" } |\n    { internalFormat: \"RGB32UI\", type: \"UNSIGNED_INT\" } |\n    { internalFormat: \"RGB32I\", type: \"INT\" } |\n    { internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"SRGB8_ALPHA8\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"RGBA8_SNORM\", type: \"BYTE\" } |\n    { internalFormat: \"RGB5_A1\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_5_5_1\" | \"UNSIGNED_INT_2_10_10_10_REV\" } |\n    { internalFormat: \"RGBA4\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_4_4_4_4\" } |\n    { internalFormat: \"RGB10_A2\", type: \"UNSIGNED_INT_2_10_10_10_REV\" } |\n    { internalFormat: \"RGBA16F\", type: \"HALF_FLOAT\" | \"FLOAT\" } |\n    { internalFormat: \"RGBA32F\", type: \"FLOAT\" } |\n    { internalFormat: \"RGBA8UI\", type: \"UNSIGNED_BYTE\" } |\n    { internalFormat: \"RGBA8I\", type: \"BYTE\" } |\n    { internalFormat: \"RGB10_A2UI\", type: \"UNSIGNED_INT_2_10_10_10_REV\" } |\n    { internalFormat: \"RGBA16UI\", type: \"UNSIGNED_SHORT\" } |\n    { internalFormat: \"RGBA16I\", type: \"SHORT\" } |\n    { internalFormat: \"RGBA32I\", type: \"INT\" } |\n    { internalFormat: \"RGBA32UI\", type: \"UNSIGNED_INT\" } |\n    { internalFormat: \"DEPTH_COMPONENT16\", type: \"UNSIGNED_SHORT\" } |\n    { internalFormat: \"DEPTH_COMPONENT24\", type: \"UNSIGNED_INT\" } |\n    { internalFormat: \"DEPTH_COMPONENT32F\", type: \"FLOAT\" } |\n    { internalFormat: \"DEPTH24_STENCIL8\", type: \"UNSIGNED_INT_24_8\" } |\n    { internalFormat: \"DEPTH32F_STENCIL8\", type: \"FLOAT_32_UNSIGNED_INT_24_8_REV\" }; // FLOAT_32_UNSIGNED_INT_24_8_REV is for reading z-buffer and can't be created from an image: https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage3D;\n\nexport type UncompressedTextureFormatString = UncompressedTextureFormatType[\"internalFormat\"];\nexport type TexelTypeString = UncompressedTextureFormatType[\"type\"];\n\nexport type CompressedTextureFormatString =\n    // WEBGL_compressed_texture_s3tc\n    \"COMPRESSED_RGB_S3TC_DXT1_EXT\" | \"COMPRESSED_RGBA_S3TC_DXT1_EXT\" | \"COMPRESSED_RGBA_S3TC_DXT3_EXT\" | \"COMPRESSED_RGBA_S3TC_DXT5_EXT\" |\n\n    // WEBGL_compressed_texture_s3tc_srgb    \n    \"COMPRESSED_SRGB_S3TC_DXT1_EXT\" | \"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\" | \"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\" | \"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\" |\n\n    // WEBGL_compressed_texture_etc\n    \"COMPRESSED_R11_EAC\" | \"COMPRESSED_SIGNED_R11_EAC\" | \"COMPRESSED_RG11_EAC\" | \"COMPRESSED_SIGNED_RG11_EAC\" | \"COMPRESSED_RGB8_ETC2\" | \"COMPRESSED_RGBA8_ETC2_EAC\" | \"COMPRESSED_SRGB8_ETC2\" | \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\" | \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\" | \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\" |\n\n    // WEBGL_compressed_texture_pvrtc\n    \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\" | \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\" | \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\" | \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\" |\n\n    // WEBGL_compressed_texture_etc1\n    \"COMPRESSED_RGB_ETC1_WEBGL\" |\n\n    // WEBGL_compressed_texture_astc    \n    \"COMPRESSED_RGBA_ASTC_4x4_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_5x4_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_5x5_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_6x5_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_6x6_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_8x5_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_8x6_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_8x8_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_10x5_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_10x6_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_10x10_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_12x10_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR\" |\n    \"COMPRESSED_RGBA_ASTC_12x12_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR\" |\n\n    // EXT_texture_compression_bptc\n    \"COMPRESSED_RGBA_BPTC_UNORM_EXT\" | \"COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT\" | \"COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT\" | \"COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT\" |\n\n    // EXT_texture_compression_rgtc\n    \"COMPRESSED_RED_RGTC1_EXT\" | \"COMPRESSED_SIGNED_RED_RGTC1_EXT\" | \"COMPRESSED_RED_GREEN_RGTC2_EXT\" | \"COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT\";\n\nexport type Pow2 = 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32758 | 65536;\nexport type CubeImages = readonly [posX: BufferSource, negX: BufferSource, posY: BufferSource, negZ: BufferSource, posZ: BufferSource, negZ: BufferSource];\n\ntype Uncompressed = UncompressedTextureFormatType;\n\ninterface Compressed {\n    readonly internalFormat: CompressedTextureFormatString;\n}\n\ninterface GenMipMap {\n    readonly generateMipMaps?: boolean; //  default: false. Mip maps can only be created for textures with power of 2 sizes.\n}\n\ninterface Size2D<T extends number = number> {\n    readonly width: T;\n    readonly height: T;\n}\n\ninterface Size3D<T extends number = number> {\n    readonly width: T;\n    readonly height: T;\n    readonly depth: T;\n}\n\n// https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\nconst internalFormat2FormatLookup = {\n    [GL.RGB]: GL.RGB,\n    [GL.RGBA]: GL.RGBA,\n    [GL.LUMINANCE_ALPHA]: GL.LUMINANCE_ALPHA,\n    [GL.LUMINANCE]: GL.LUMINANCE,\n    [GL.ALPHA]: GL.ALPHA,\n    [GL.R8]: GL.RED,\n    [GL.R8_SNORM]: GL.RED,\n    [GL.RG8]: GL.RG,\n    [GL.RG8_SNORM]: GL.RG,\n    [GL.RGB8]: GL.RGB,\n    [GL.RGB8_SNORM]: GL.RGB,\n    [GL.RGB565]: GL.RGB,\n    [GL.RGBA4]: GL.RGBA,\n    [GL.RGB5_A1]: GL.RGBA,\n    [GL.RGBA8]: GL.RGBA,\n    [GL.RGBA8_SNORM]: GL.RGBA,\n    [GL.RGB10_A2]: GL.RGBA,\n    [GL.RGB10_A2UI]: GL.RGBA_INTEGER,\n    [GL.SRGB8]: GL.RGB,\n    [GL.SRGB8_ALPHA8]: GL.RGBA,\n    [GL.R16F]: GL.RED,\n    [GL.RG16F]: GL.RG,\n    [GL.RGB16F]: GL.RGB,\n    [GL.RGBA16F]: GL.RGBA,\n    [GL.R32F]: GL.RED,\n    [GL.RG32F]: GL.RG,\n    [GL.RGB32F]: GL.RGB,\n    [GL.RGBA32F]: GL.RGBA,\n    [GL.R11F_G11F_B10F]: GL.RGB,\n    [GL.RGB9_E5]: GL.RGB,\n    [GL.R8I]: GL.RED_INTEGER,\n    [GL.R8UI]: GL.RED_INTEGER,\n    [GL.R16I]: GL.RED_INTEGER,\n    [GL.R16UI]: GL.RED_INTEGER,\n    [GL.R32I]: GL.RED_INTEGER,\n    [GL.R32UI]: GL.RED_INTEGER,\n    [GL.RG8I]: GL.RG_INTEGER,\n    [GL.RG8UI]: GL.RG_INTEGER,\n    [GL.RG16I]: GL.RG_INTEGER,\n    [GL.RG16UI]: GL.RG_INTEGER,\n    [GL.RG32I]: GL.RG_INTEGER,\n    [GL.RG32UI]: GL.RG_INTEGER,\n    [GL.RGB8I]: GL.RGB_INTEGER,\n    [GL.RGB8UI]: GL.RGB_INTEGER,\n    [GL.RGB16I]: GL.RGB_INTEGER,\n    [GL.RGB16UI]: GL.RGB_INTEGER,\n    [GL.RGB32I]: GL.RGB_INTEGER,\n    [GL.RGB32UI]: GL.RGB_INTEGER,\n    [GL.RGBA8I]: GL.RGBA_INTEGER,\n    [GL.RGBA8UI]: GL.RGBA_INTEGER,\n    [GL.RGBA16I]: GL.RGBA_INTEGER,\n    [GL.RGBA16UI]: GL.RGBA_INTEGER,\n    [GL.RGBA32I]: GL.RGBA_INTEGER,\n    [GL.RGBA32UI]: GL.RGBA_INTEGER,\n    [GL.DEPTH_COMPONENT16]: GL.DEPTH_COMPONENT,\n    [GL.DEPTH_COMPONENT24]: GL.DEPTH_COMPONENT,\n    [GL.DEPTH_COMPONENT32F]: GL.DEPTH_COMPONENT,\n    [GL.DEPTH24_STENCIL8]: GL.DEPTH_STENCIL,\n    [GL.DEPTH32F_STENCIL8]: GL.DEPTH_STENCIL,\n} as const;\n\n// we could read these from extensions instead...\nconst compressedFormats = {\n    // WEBGL_compressed_texture_s3tc\n    COMPRESSED_RGB_S3TC_DXT1_EXT: GL.COMPRESSED_RGB_S3TC_DXT1_EXT,\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: GL.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: GL.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: GL.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    // WEBGL_compressed_texture_s3tc_srgb\n    COMPRESSED_SRGB_S3TC_DXT1_EXT: GL.COMPRESSED_SRGB_S3TC_DXT1_EXT,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n    // WEBGL_compressed_texture_etc\n    COMPRESSED_R11_EAC: GL.COMPRESSED_R11_EAC,\n    COMPRESSED_SIGNED_R11_EAC: GL.COMPRESSED_SIGNED_R11_EAC,\n    COMPRESSED_RG11_EAC: GL.COMPRESSED_RG11_EAC,\n    COMPRESSED_SIGNED_RG11_EAC: GL.COMPRESSED_SIGNED_RG11_EAC,\n    COMPRESSED_RGB8_ETC2: GL.COMPRESSED_RGB8_ETC2,\n    COMPRESSED_RGBA8_ETC2_EAC: GL.COMPRESSED_RGBA8_ETC2_EAC,\n    COMPRESSED_SRGB8_ETC2: GL.COMPRESSED_SRGB8_ETC2,\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n    // WEBGL_compressed_texture_pvrtc\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG: GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG: GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\n    // WEBGL_compressed_texture_etc1    \n    COMPRESSED_RGB_ETC1_WEBGL: GL.COMPRESSED_RGB_ETC1_WEBGL,\n    // WEBGL_compressed_texture_astc    \n    COMPRESSED_RGBA_ASTC_4x4_KHR: GL.COMPRESSED_RGBA_ASTC_4x4_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\n    COMPRESSED_RGBA_ASTC_5x4_KHR: GL.COMPRESSED_RGBA_ASTC_5x4_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\n    COMPRESSED_RGBA_ASTC_5x5_KHR: GL.COMPRESSED_RGBA_ASTC_5x5_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\n    COMPRESSED_RGBA_ASTC_6x5_KHR: GL.COMPRESSED_RGBA_ASTC_6x5_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\n    COMPRESSED_RGBA_ASTC_6x6_KHR: GL.COMPRESSED_RGBA_ASTC_6x6_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\n    COMPRESSED_RGBA_ASTC_8x5_KHR: GL.COMPRESSED_RGBA_ASTC_8x5_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\n    COMPRESSED_RGBA_ASTC_8x6_KHR: GL.COMPRESSED_RGBA_ASTC_8x6_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\n    COMPRESSED_RGBA_ASTC_8x8_KHR: GL.COMPRESSED_RGBA_ASTC_8x8_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\n    COMPRESSED_RGBA_ASTC_10x5_KHR: GL.COMPRESSED_RGBA_ASTC_10x5_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\n    COMPRESSED_RGBA_ASTC_10x6_KHR: GL.COMPRESSED_RGBA_ASTC_10x6_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\n    COMPRESSED_RGBA_ASTC_10x10_KHR: GL.COMPRESSED_RGBA_ASTC_10x10_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\n    COMPRESSED_RGBA_ASTC_12x10_KHR: GL.COMPRESSED_RGBA_ASTC_12x10_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\n    COMPRESSED_RGBA_ASTC_12x12_KHR: GL.COMPRESSED_RGBA_ASTC_12x12_KHR,\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,\n    // EXT_texture_compression_bptc    \n    COMPRESSED_RGBA_BPTC_UNORM_EXT: GL.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n    COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: GL.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,\n    COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: GL.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n    COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: GL.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n    // EXT_texture_compression_rgtc    \n    COMPRESSED_RED_RGTC1_EXT: GL.COMPRESSED_RED_RGTC1_EXT,\n    COMPRESSED_SIGNED_RED_RGTC1_EXT: GL.COMPRESSED_SIGNED_RED_RGTC1_EXT,\n    COMPRESSED_RED_GREEN_RGTC2_EXT: GL.COMPRESSED_RED_GREEN_RGTC2_EXT,\n    COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: GL.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,\n} as const;\n", "import { type EXT_disjoint_timer_query_webgl2_ext, glExtensions } from \"./extensions\";\n\nexport function glCreateTimer(gl: WebGL2RenderingContext, cpuFallback = false): Timer {\n    const { disjointTimerQuery } = glExtensions(gl);\n    if (disjointTimerQuery) {\n        // Clear the disjoint state before starting to work with queries to increase the chances that the results will be valid.\n        gl.getParameter(disjointTimerQuery.GPU_DISJOINT_EXT);\n        const useTimestamps = gl.getQuery(disjointTimerQuery.TIMESTAMP_EXT, disjointTimerQuery.QUERY_COUNTER_BITS_EXT) ?? 0 > 0;\n        if (useTimestamps)\n            return new GPUTimerTS(gl, disjointTimerQuery);\n        else\n            return new GPUTimer(gl, disjointTimerQuery);\n    } else {\n        if (cpuFallback) {\n            return new CPUTimer(gl);\n        } else {\n            return new NullTimer(gl);\n        }\n    }\n}\n\nexport type Timer = NullTimer | CPUTimer | GPUTimer | GPUTimerTS;\n\nclass NullTimer {\n    readonly kind = \"null\";\n    readonly promise: Promise<number | undefined>;\n    readonly creationTime;\n\n    constructor(readonly gl: WebGL2RenderingContext) {\n        this.creationTime = performance.now();\n        this.promise = Promise.resolve(undefined);\n    }\n\n    dispose() { }\n    begin() { }\n    end() { }\n    poll() {\n        return true;\n    }\n}\n\nclass CPUTimer {\n    readonly kind = \"cpu\";\n    readonly promise: Promise<number | undefined>;\n    readonly creationTime;\n    private beginTime = 0;\n    private endTime = 0;\n    private resolve: ((value: number | PromiseLike<number> | undefined) => void) | undefined;\n\n    constructor(readonly gl: WebGL2RenderingContext) {\n        this.creationTime = performance.now();\n        this.promise = new Promise<number | undefined>(resolve => { this.resolve = resolve; });\n    }\n\n    dispose() {\n        this.resolve?.(undefined);\n        this.resolve = undefined;\n    }\n\n    begin() {\n        this.gl.getError(); // flush gpu pipeline\n        this.beginTime = performance.now();\n    }\n\n    end() {\n        this.gl.getError(); // flush gpu pipeline\n        this.endTime = performance.now();\n    }\n\n    poll() {\n        this.resolve?.(this.endTime - this.beginTime) // in milliseconds \n        this.resolve = undefined;\n        return true;\n    }\n}\n\nclass GPUTimer {\n    readonly kind = \"gpu_time_elapsed\";\n    readonly promise: Promise<number | undefined>;\n    readonly creationTime;\n    private readonly query;\n    private resolve: ((value: number | PromiseLike<number> | undefined) => void) | undefined;\n\n    constructor(readonly gl: WebGL2RenderingContext, readonly ext: EXT_disjoint_timer_query_webgl2_ext) {\n        this.creationTime = performance.now();\n        this.query = gl.createQuery()!;\n        this.promise = new Promise<number | undefined>(resolve => { this.resolve = resolve; });\n    }\n\n    dispose() {\n        const { gl, query, resolve } = this;\n        gl.deleteQuery(query);\n        resolve?.(undefined);\n        this.resolve = undefined;\n    }\n\n    begin() {\n        const { gl, ext, query } = this;\n        gl.beginQuery(ext.TIME_ELAPSED_EXT, query);\n    }\n\n    end() {\n        const { gl, ext } = this;\n        gl.endQuery(ext.TIME_ELAPSED_EXT);\n    }\n\n    poll() {\n        const { gl, ext, query, resolve } = this;\n        let disjoint = gl.getParameter(ext.GPU_DISJOINT_EXT);\n        if (!disjoint) {\n            const available = gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);\n            if (available) {\n                const timeElapsed = gl.getQueryParameter(query, gl.QUERY_RESULT) as number; // in nanoseconds\n                resolve?.(timeElapsed / 1000000); // in milliseconds\n                this.resolve = undefined;\n                return true;\n            }\n        }\n        if (performance.now() > this.creationTime + 1000) {\n            resolve?.(undefined);\n            this.resolve = undefined;\n            return true;\n        }\n        return false;\n    }\n}\n\n\nclass GPUTimerTS {\n    readonly kind = \"gpu_timestamp\";\n    readonly promise: Promise<number | undefined>;\n    readonly creationTime;\n    private readonly startQuery;\n    private readonly endQuery;\n    private resolve: ((value: number | PromiseLike<number> | undefined) => void) | undefined;\n\n    constructor(readonly gl: WebGL2RenderingContext, readonly ext: EXT_disjoint_timer_query_webgl2_ext) {\n        this.creationTime = performance.now();\n        this.startQuery = gl.createQuery()!;\n        this.endQuery = gl.createQuery()!;\n        this.promise = new Promise<number | undefined>((resolve, reject) => { this.resolve = resolve; });\n    }\n\n    dispose() {\n        const { gl, startQuery, endQuery, resolve } = this;\n        gl.deleteQuery(startQuery);\n        gl.deleteQuery(endQuery);\n        resolve?.(undefined);\n        this.resolve = undefined;\n    }\n\n    begin() {\n        const { ext, startQuery } = this;\n        ext.queryCounterEXT(startQuery, ext.TIMESTAMP_EXT);\n    }\n\n    end() {\n        const { ext, endQuery } = this;\n        ext.queryCounterEXT(endQuery, ext.TIMESTAMP_EXT);\n    }\n\n    poll() {\n        const { gl, ext, startQuery, endQuery, resolve } = this;\n        let disjoint = gl.getParameter(ext.GPU_DISJOINT_EXT);\n        if (!disjoint) {\n            const available = gl.getQueryParameter(endQuery, gl.QUERY_RESULT_AVAILABLE);\n            if (available) {\n                const timeStart = gl.getQueryParameter(startQuery, gl.QUERY_RESULT);\n                const timeEnd = gl.getQueryParameter(endQuery, gl.QUERY_RESULT);\n                const timeElapsed = timeEnd - timeStart; // in nanoseconds\n                resolve?.(timeElapsed / 1000000); // in milliseconds\n                this.resolve = undefined;\n                return true;\n            }\n        }\n        if (performance.now() > this.creationTime + 1000) {\n            resolve?.(undefined);\n            this.resolve = undefined;\n            return true;\n        }\n        return false;\n    }\n}\n", "export function glTransformFeedback(gl: WebGL2RenderingContext, params: TransformFeedbackParams) {\n    const { kind, transformFeedback, outputBuffers, count, first } = params;\n    const mode = gl[kind];\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedback);\n    for (let i = 0; i < outputBuffers.length; i++) {\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, outputBuffers[i]);\n    }\n    gl.beginTransformFeedback(mode);\n    gl.enable(gl.RASTERIZER_DISCARD);\n    gl.drawArrays(mode, first ?? 0, count);\n    gl.disable(gl.RASTERIZER_DISCARD);\n    gl.endTransformFeedback();\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n    for (let i = 0; i < outputBuffers.length; i++) {\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, null);\n    }\n}\n\nexport type TransformFeedbackPrimitiveMode = \"POINTS\" | \"LINES\" | \"TRIANGLES\";\n\nexport interface TransformFeedbackParams {\n    readonly kind: TransformFeedbackPrimitiveMode;\n    readonly count: number;\n    readonly first?: number; // default: 0\n    readonly transformFeedback: WebGLTransformFeedback\n    readonly outputBuffers: readonly WebGLBuffer[];\n}\n", "import { glCreateBuffer } from \"./buffer\";\nimport { GL } from \"./constants\";\n\nexport function glGetUniformsInfo(gl: WebGL2RenderingContext, program: WebGLProgram) {\n    const numUniforms = gl.getProgramParameter(program, GL.ACTIVE_UNIFORMS);\n    const uniformData: any[] = [];\n    const uniformIndices: number[] = [];\n\n    for (let i = 0; i < numUniforms; ++i) {\n        uniformIndices.push(i);\n        uniformData.push({});\n        const uniformInfo = gl.getActiveUniform(program, i)!;\n        uniformData[i].name = uniformInfo.name;\n    }\n\n    function getInfo(pname: number, key: string) {\n        gl.getActiveUniforms(program, uniformIndices, pname).forEach(function (value: string, idx: number) {\n            uniformData[idx][key] = value;\n        });\n    }\n    getInfo(GL.UNIFORM_TYPE, \"type\");\n    getInfo(GL.UNIFORM_SIZE, \"size\");\n    getInfo(GL.UNIFORM_BLOCK_INDEX, \"blockIndex\");\n    getInfo(GL.UNIFORM_OFFSET, \"offset\");\n    return uniformData as readonly UniformInfo[];\n}\n\nexport type UniformType =\n    GL.FLOAT | GL.FLOAT_VEC2 | GL.FLOAT_VEC3 | GL.FLOAT_VEC4 |\n    GL.INT | GL.INT_VEC2 | GL.INT_VEC3 | GL.INT_VEC4 |\n    GL.UNSIGNED_INT | GL.UNSIGNED_INT_VEC2 | GL.UNSIGNED_INT_VEC3 | GL.UNSIGNED_INT_VEC4 |\n    GL.BOOL | GL.BOOL_VEC2 | GL.BOOL_VEC3 | GL.BOOL_VEC4 |\n    GL.FLOAT_MAT2 | GL.FLOAT_MAT3 | GL.FLOAT_MAT4 |\n    GL.FLOAT_MAT2x3 | GL.FLOAT_MAT2x4 | GL.FLOAT_MAT3x2 | GL.FLOAT_MAT3x4 | GL.FLOAT_MAT4x2 | GL.FLOAT_MAT4x3 |\n    GL.SAMPLER_2D | GL.SAMPLER_2D_ARRAY | GL.SAMPLER_2D_ARRAY_SHADOW | GL.SAMPLER_2D_ARRAY_SHADOW | GL.SAMPLER_3D | GL.SAMPLER_CUBE | GL.SAMPLER_CUBE_SHADOW;\n\nexport interface UniformInfo {\n    readonly name: string;\n    readonly type: UniformType;\n    readonly size: number; // num elements\n    readonly blockIndex: number; // -1 if not in block\n    readonly offset: number; // -1 if not in block\n}\n\nexport function glUniformLocations<const T extends readonly string[]>(gl: WebGL2RenderingContext, program: WebGLProgram, names: T, prefix?: string) {\n    const locations: any = {};\n    for (const name of names) {\n        locations[name] = gl.getUniformLocation(program, `${prefix ?? \"\"}${name}`);\n    }\n    return locations as Record<T[number], WebGLUniformLocation | null>;\n}\n\n// apply std140 layout rules (https://registry.khronos.org/OpenGL/specs/gl/glspec45.core.pdf#page=159)\nexport function glUBOProxy<const T extends Record<string, UniformTypes>>(values: T) {\n    type Keys = Extract<keyof T, string>;\n    const offsetsMap: Record<string, readonly number[]> = {};\n    let offset = 0;\n    for (const [key, value] of Object.entries(values)) {\n        const { alignment, components, rows } = uniformTypes[value];\n        const padding = (alignment - 1) - ((offset + alignment - 1) % alignment);\n        offset += padding;\n        const offsets: number[] = [];\n        for (let row = 0; row < rows; row++) {\n            for (let component = 0; component < components; component++) {\n                offsets.push(offset++);\n            }\n            if (rows > 1) {\n                offset = (offset + 3) & ~3; // align to the next vec4, regardless of component size\n            }\n        }\n        offsetsMap[key] = offsets;\n    }\n    const byteSize = ((offset + 3) & ~3) * 4;\n\n    const buffer = new ArrayBuffer(byteSize);\n    const views = {\n        i32: new Int32Array(buffer),\n        u32: new Uint32Array(buffer),\n        f32: new Float32Array(buffer),\n    };\n    const validators = {\n        i32: (value: number) => {\n            if (!Number.isInteger(value)) {\n                throw new Error(\"Uniform value not an integer!\");\n            }\n        },\n        u32: (value: number) => {\n            if (value < 0 || !Number.isInteger(value)) {\n                throw new Error(\"Uniform value not an unsigned integer!\");\n            }\n        },\n        f32: (value: number) => { },\n    };\n\n    const dirtyRange = new DirtyRange(byteSize);\n\n    const proxy = {\n        buffer,\n        dirtyRange,\n        values: {} as { [P in Keys]: T[P] extends \"bool\" ? boolean : T[P] extends \"int\" | \"uint\" | \"float\" ? number : ArrayLike<number> },\n    } as const;\n\n    for (const [key, value] of Object.entries(values)) {\n        const componentType = uniformTypes[value].type;\n        const view = views[componentType];\n        const validate = validators[componentType];\n        const offsets = offsetsMap[key];\n        const begin = offsets[0] * 4;\n        const end = offsets[offsets.length - 1] * 4 + 4;\n        const type = values[key];\n        const get =\n            type == \"bool\" ? () => {\n                return view[offsets[0]] != 0;\n            } : type == \"int\" || type == \"uint\" || type == \"float\" ? () => {\n                return view[offsets[0]];\n            } : () => {\n                return offsets.map(o => view[o]);\n            };\n\n        const set =\n            type == \"bool\" ? (value: boolean) => {\n                view[offsets[0]] = value ? 0 : -1;\n                dirtyRange.expand(begin, end);\n            } : type == \"int\" || type == \"uint\" || type == \"float\" ? (value: number) => {\n                validate(value);\n                view[offsets[0]] = value;\n                dirtyRange.expand(begin, end);\n            } : (values: ArrayLike<number>) => {\n                console.assert(values.length == offsets.length);\n                for (let i = 0; i < values.length; i++) {\n                    validate(values[i]);\n                    view[offsets[i]] = values[i];\n                }\n                dirtyRange.expand(begin, end);\n            };\n\n        Reflect.defineProperty(proxy.values, key, {\n            configurable: false,\n            enumerable: true,\n            get,\n            set,\n        });\n    }\n\n    return proxy;\n}\n\nclass DirtyRange {\n    begin: number;\n    end: number;\n\n    constructor(readonly size: number) {\n        this.begin = 0;\n        this.end = size;\n    }\n\n    get isEmpty() {\n        return this.begin >= this.end;\n    }\n\n    clear() {\n        this.begin = this.size;\n        this.end = 0;\n    }\n\n    reset() {\n        this.begin = 0;\n        this.end = this.size;\n    }\n\n    expand(begin: number, end: number) {\n        if (this.begin > begin) {\n            this.begin = begin;\n        }\n        if (this.end < end) {\n            this.end = end;\n        }\n    }\n}\n\nexport interface UniformsProxy {\n    readonly buffer: ArrayBuffer;\n    readonly dirtyRange: DirtyRange;\n    readonly values: { [index: string]: boolean | number | ArrayLike<number> };\n}\n\nconst uniformTypes = {\n    bool: { type: \"i32\", alignment: 1, components: 1, rows: 1 },\n    int: { type: \"i32\", alignment: 1, components: 1, rows: 1 },\n    uint: { type: \"u32\", alignment: 1, components: 1, rows: 1 },\n    float: { type: \"f32\", alignment: 1, components: 1, rows: 1 },\n\n    ivec2: { type: \"i32\", alignment: 2, components: 2, rows: 1 },\n    uvec2: { type: \"u32\", alignment: 2, components: 2, rows: 1 },\n    vec2: { type: \"f32\", alignment: 2, components: 2, rows: 1 },\n\n    ivec3: { type: \"i32\", alignment: 4, components: 3, rows: 1 },\n    uvec3: { type: \"u32\", alignment: 4, components: 3, rows: 1 },\n    vec3: { type: \"f32\", alignment: 4, components: 3, rows: 1 },\n\n    ivec4: { type: \"i32\", alignment: 4, components: 3, rows: 1 },\n    uvec4: { type: \"u32\", alignment: 4, components: 3, rows: 1 },\n    vec4: { type: \"f32\", alignment: 4, components: 4, rows: 1 },\n\n    mat3: { type: \"f32\", alignment: 4, components: 3, rows: 3 },\n    mat4: { type: \"f32\", alignment: 4, components: 4, rows: 4 },\n} as const;\n\nexport type UniformTypes = keyof typeof uniformTypes;\n", "import { glLimits } from \"./limits\";\n\nexport function glCreateVertexArray(gl: WebGL2RenderingContext, params: VertexArrayParams): WebGLVertexArrayObject {\n    const vao = gl.createVertexArray()!;\n    const { MAX_VERTEX_ATTRIBS } = glLimits(gl);\n    gl.bindVertexArray(vao);\n    const { attributes } = params;\n    for (let i = 0; i < MAX_VERTEX_ATTRIBS; i++) {\n        const attribParams = attributes[i];\n        if (attribParams) {\n            const { size, isInteger, defaultComponentType } = shaderTypeInfo[attribParams.kind];\n            const componentType = attribParams.componentType ?? defaultComponentType;\n            const divisor = attribParams.divisor ?? 0;\n            const byteStride = attribParams.byteStride ?? 0;\n            const byteOffset = attribParams.byteOffset ?? 0;\n            const componentCount = attribParams.componentCount ?? (isMatrix(size) ? size[0] : size);\n            const normalized = attribParams.normalized ?? false;\n            gl.bindBuffer(gl.ARRAY_BUFFER, attribParams.buffer);\n            gl.enableVertexAttribArray(i);\n            if (isInteger) {\n                gl.vertexAttribIPointer(i, componentCount, gl[componentType], byteStride, byteOffset);\n            } else {\n                gl.vertexAttribPointer(i, componentCount, gl[componentType], normalized, byteStride, byteOffset);\n            }\n            gl.vertexAttribDivisor(i, divisor);\n        } else {\n            gl.disableVertexAttribArray(i);\n        }\n    };\n    if (params.indices) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, params.indices);\n    }\n    gl.bindVertexArray(null);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    return vao;\n}\n\nexport interface VertexArrayParams {\n    readonly attributes: readonly (VertexAttribute | null)[];\n    readonly indices?: WebGLBuffer;\n}\n\nexport type VertexAttribute = VertexAttributeFloat | VertexAttributeFloatNormalized | VertexAttributeInt | VertexAttributeUint;\n\nexport type ComponentTypeFloat = \"HALF_FLOAT\" | \"FLOAT\";\nexport type ComponentTypeInt = \"BYTE\" | \"SHORT\" | \"INT\";\nexport type ComponentTypeUint = \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\nexport type ComponentType = ComponentTypeFloat | ComponentTypeInt | ComponentTypeUint;\nexport type ShaderTypeFloat = \"FLOAT\" | \"FLOAT_VEC2\" | \"FLOAT_VEC3\" | \"FLOAT_VEC4\" |\n    // we allow matrix types as a convenience because gl.getActiveAttrib() could return such a type from a shader program.\n    // each matrix row still has to be bound separately when defining attributes.\n    \"FLOAT_MAT2\" | \"FLOAT_MAT3\" | \"FLOAT_MAT4\" | \"FLOAT_MAT2x3\" | \"FLOAT_MAT2x4\" | \"FLOAT_MAT3x2\" | \"FLOAT_MAT3x4\" | \"FLOAT_MAT4x2\" | \"FLOAT_MAT4x3\";\nexport type ShaderTypeInt = \"INT\" | \"INT_VEC2\" | \"INT_VEC3\" | \"INT_VEC4\";\nexport type ShaderTypeUint = \"UNSIGNED_INT\" | \"UNSIGNED_INT_VEC2\" | \"UNSIGNED_INT_VEC3\" | \"UNSIGNED_INT_VEC4\";\nexport type ShaderAttributeType = ShaderTypeFloat | ShaderTypeInt | ShaderTypeUint;\n\ninterface VertexAttributeCommon {\n    readonly buffer: WebGLBuffer;\n    readonly componentCount?: 1 | 2 | 3 | 4; // default: same as shader type\n    readonly byteStride?: number; // default: 0\n    readonly byteOffset?: number; // default: 0\n    readonly divisor?: number; // default: 0\n}\n\nexport interface VertexAttributeFloat extends VertexAttributeCommon {\n    readonly kind: ShaderTypeFloat;\n    readonly componentType?: ComponentType; // default: FLOAT\n    readonly normalized?: false;\n}\n\nexport interface VertexAttributeFloatNormalized extends VertexAttributeCommon {\n    readonly kind: ShaderTypeFloat;\n    readonly componentType?: ComponentTypeInt | ComponentTypeUint; // default: FLOAT\n    readonly normalized: true;\n}\n\nexport interface VertexAttributeInt extends VertexAttributeCommon {\n    readonly kind: ShaderTypeInt;\n    readonly componentType?: ComponentTypeInt; // default: INT\n    readonly normalized?: undefined;\n}\n\n/** @internal */\nexport interface VertexAttributeUint extends VertexAttributeCommon {\n    readonly kind: ShaderTypeUint;\n    readonly componentType?: ComponentTypeUint; // default: UNSIGNED_INT\n    readonly normalized?: undefined;\n}\n\ntype MatrixDim = 2 | 3 | 4;\n\nfunction isMatrix(size: unknown): size is readonly [MatrixDim, MatrixDim] {\n    return Array.isArray(size);\n}\n\nconst shaderTypeInfo = {\n    \"INT\": { size: 1, isInteger: true, defaultComponentType: \"INT\" },\n    \"INT_VEC2\": { size: 2, isInteger: true, defaultComponentType: \"INT\" },\n    \"INT_VEC3\": { size: 3, isInteger: true, defaultComponentType: \"INT\" },\n    \"INT_VEC4\": { size: 4, isInteger: true, defaultComponentType: \"INT\" },\n    \"UNSIGNED_INT\": { size: 1, isInteger: true, defaultComponentType: \"UNSIGNED_INT\" },\n    \"UNSIGNED_INT_VEC2\": { size: 2, isInteger: true, defaultComponentType: \"UNSIGNED_INT\" },\n    \"UNSIGNED_INT_VEC3\": { size: 3, isInteger: true, defaultComponentType: \"UNSIGNED_INT\" },\n    \"UNSIGNED_INT_VEC4\": { size: 4, isInteger: true, defaultComponentType: \"UNSIGNED_INT\" },\n    \"FLOAT\": { size: 1, isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_VEC2\": { size: 2, isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_VEC3\": { size: 3, isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_VEC4\": { size: 4, isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT2\": { size: [2, 2], isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT3\": { size: [3, 3], isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT4\": { size: [4, 4], isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT2x3\": { size: [2, 3], isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT2x4\": { size: [2, 4], isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT3x2\": { size: [3, 2], isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT3x4\": { size: [3, 4], isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT4x2\": { size: [4, 2], isInteger: false, defaultComponentType: \"FLOAT\" },\n    \"FLOAT_MAT4x3\": { size: [4, 3], isInteger: false, defaultComponentType: \"FLOAT\" },\n} as const;\n", "import { type RenderState, TonemappingMode } from \".\";\n\nexport function defaultRenderState(): RenderState {\n    const state: RenderState = {\n        output: {\n            width: 512,\n            height: 256,\n            samplesMSAA: 1,\n        },\n        background: {\n        },\n        camera: {\n            kind: \"pinhole\",\n            position: [0, 0, 0],\n            rotation: [0, 0, 0, 1],\n            pivot: undefined,\n            fov: 45,\n            near: 0.1,\n            far: 10000,\n        },\n        quality: {\n            detail: 1,\n        },\n        debug: {\n            showNodeBounds: false,\n        },\n        grid: {\n            enabled: false,\n            color1: [2, 2, 2],\n            color2: [0, 0, 0],\n            origin: [0, 0, 0],\n            axisX: [1, 0, 0],\n            axisY: [0, 0, 1],\n            size1: 1,\n            size2: 10,\n            distance: 500,\n        },\n        cube: {\n            enabled: false,\n            position: [0, 0, 0],\n            scale: 1,\n        },\n        scene: undefined,\n        terrain: {\n            elevationGradient: {\n                knots: [\n                    { position: -10, color: [0, 0, 0.5] },\n                    { position: 0, color: [0.5, 0.5, 1] },\n                    { position: 0, color: [0, 0.5, 0] },\n                    { position: 10, color: [0.5, 1, 0.5] },\n                ],\n            },\n            asBackground: false,\n        },\n        dynamic: {\n            objects: [],\n        },\n        clipping: {\n            enabled: false,\n            draw: false,\n            mode: 0,\n            planes: [],\n        },\n        highlights: {\n            defaultAction: undefined,\n            groups: [],\n        },\n        outlines: {\n            enabled: false,\n            color: [10, 10, 10], // bright white (overexposed)\n            plane: [0, 0, 1, 0],\n        },\n        tonemapping: {\n            exposure: 0,\n            mode: TonemappingMode.color,\n        },\n        points: {\n            size: {\n                pixel: 1,\n                maxPixel: undefined,\n                metric: 0,\n                toleranceFactor: 0,\n            },\n            deviation: {\n                index: 0,\n                mixFactor: 0,\n                colorGradient: {\n                    knots: [\n                        { position: -1, color: [1, 0, 0, 1] },\n                        { position: -0.5, color: [1, 1, 0, 1] },\n                        { position: -0.25, color: [0, 1, 0, 1] },\n                        { position: 0.25, color: [0, 1, 0, 1] },\n                        { position: 0.5, color: [1, 1, 0, 1] },\n                        { position: 1, color: [0, 1, 0, 1] },\n                    ],\n                }\n            },\n            useProjectedPosition: false\n        },\n        toonOutline: {\n            enabled: false,\n            color: [0, 0, 0],\n            onlyOnIdleFrame: true,\n        },\n        pick: {\n            opacityThreshold: 1,\n        },\n    };\n    return state;\n}\n", "\nimport { mat3, quat, vec3, type ReadonlyQuat, type ReadonlyVec3, vec4, type ReadonlyVec4 } from \"gl-matrix\";\nimport type { RecursivePartial, RenderState, RenderStateCamera, RenderStateChanges, RenderStateClipping, RenderStateClippingPlane, RenderStateGrid, RenderStateOutput } from \".\";\nimport type { MutableCameraState } from \"web_app/controller/base\";\nimport type { RGBA } from \"webgl2\";\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\nexport type MutableGridState = Partial<Mutable<RenderStateGrid>>;\n\n// this function will create a copy where unchanged properties have same identity (=== operator yields true)\n// use this to quickly check for changes.\nexport function modifyRenderState(state: RenderState, changes: RenderStateChanges): RenderState {\n    const newState = mergeRecursive(state, changes) as RenderState;\n    if (changes.output) {\n        verifyOutputState(newState.output);\n    }\n    if (changes.clipping) {\n        verifyClippingState(newState.clipping);\n    }\n    return newState;\n}\n\nexport function mergeRecursive(original: any, changes: any) {\n    const clone = { ...original };\n    for (const key in changes) {\n        const originalValue = original ? original[key] : undefined;\n        const changedValue = changes[key];\n        if (changedValue != undefined && typeof changedValue == \"object\" && !Array.isArray(changedValue) && !ArrayBuffer.isView(changedValue) && !(changedValue instanceof Set)) {\n            clone[key] = mergeRecursive(originalValue, changedValue);\n        } else {\n            clone[key] = changedValue;\n        }\n    }\n    return clone;\n}\n\nfunction verifyOutputState(state: RenderStateOutput) {\n    const { width, height } = state;\n    if (!Number.isInteger(width) || !Number.isInteger(height))\n        throw new Error(`Output size dimentions (width:${width}, height:${height}) must be integers!`);\n}\n\nfunction verifyClippingState(state: RenderStateClipping) {\n    const { planes } = state;\n    if (planes.length > 6)\n        throw new Error(`A maximum of six clippings planes are allowed!`);\n}\n", "import type { ReadonlyQuat, ReadonlyVec3, ReadonlyVec4, ReadonlyMat4, ReadonlyMat3 } from \"gl-matrix\";\nimport type { RGB, RGBA, FixedSizeArray, RecursivePartial } from \"./types\";\nimport type { RenderStateScene } from \"./scene\";\nimport type { RenderStateDynamicObjects } from \"./dynamic\";\nexport * from \"./dynamic\";\nexport * from \"./types\";\nexport * from \"./scene\";\nexport * from \"./default\";\nexport * from \"./modify\";\n\nexport interface RenderState {\n    readonly output: RenderStateOutput;\n    readonly background: RenderStateBackground;\n    readonly camera: RenderStateCamera;\n    readonly quality: RenderStateQuality;\n    readonly grid: RenderStateGrid;\n    readonly debug: RenderStateDebug;\n    readonly cube: RenderStateCube;\n    readonly scene: RenderStateScene | undefined;\n    readonly terrain: RenderStateTerrain;\n    readonly dynamic: RenderStateDynamicObjects;\n    readonly clipping: RenderStateClipping;\n    readonly highlights: RenderStateHighlightGroups;\n    readonly outlines: RenderStateOutlines;\n    readonly tonemapping: RenderStateTonemapping;\n    readonly points: RenderStatePointCloud;\n    readonly toonOutline: RenderStateToonOutline;\n    readonly pick: RenderStatePick;\n}\n\nexport interface DerivedRenderState extends RenderState {\n    readonly localSpaceTranslation: ReadonlyVec3; // local space is a variant of world space that is much closer to camera to avoid excessively (for float32) large coordinates in shader\n    readonly matrices: Matrices;\n    readonly viewFrustum: ViewFrustum; // in world space\n    readonly effectiveSamplesMSAA: number; // from output.SamplesMSAA, but limited to device's MAX_SAMPLES\n}\n\nexport type RenderStateChanges = RecursivePartial<RenderState>;\n\nexport interface ViewFrustum {\n    readonly left: ReadonlyVec4;\n    readonly right: ReadonlyVec4;\n    readonly top: ReadonlyVec4;\n    readonly bottom: ReadonlyVec4;\n    readonly near: ReadonlyVec4;\n    readonly far: ReadonlyVec4;\n    readonly image: ReadonlyVec4; // a plane coincident with camera position and parallel to screen/image plane in world space\n    readonly planes: readonly [left: ReadonlyVec4, right: ReadonlyVec4, top: ReadonlyVec4, bottom: ReadonlyVec4, near: ReadonlyVec4, far: ReadonlyVec4];\n}\n\nexport enum CoordSpace {\n    World,\n    View,\n    Clip,\n};\n\nexport interface Matrices {\n    getMatrix(from: CoordSpace, to: CoordSpace): ReadonlyMat4;\n    getMatrixNormal(from: CoordSpace, to: CoordSpace): ReadonlyMat3;\n}\n\nexport interface RenderStateOutput {\n    readonly width: number;\n    readonly height: number;\n    readonly samplesMSAA: number;\n}\n\nexport interface RenderStateBackground {\n    readonly color?: RGBA;\n    readonly url?: string;\n    readonly blur?: number;\n}\n\nexport interface RenderStateCamera {\n    readonly kind: \"pinhole\" | \"orthographic\";\n    readonly position: ReadonlyVec3;\n    readonly rotation: ReadonlyQuat;\n    readonly pivot: ReadonlyVec3 | undefined;\n    readonly fov: number;\n    readonly near: number;\n    readonly far: number;\n}\n\nexport interface RenderStateQuality {\n    readonly detail: number;\n}\n\nexport interface RenderStateDebug {\n    readonly showNodeBounds: boolean;\n}\n\nexport interface RenderStateGrid {\n    readonly enabled: boolean;\n    readonly color1: RGB;\n    readonly color2: RGB;\n    readonly origin: ReadonlyVec3;\n    readonly axisX: ReadonlyVec3;\n    readonly axisY: ReadonlyVec3;\n    readonly size1: number; // minor grid cell size, default = 1\n    readonly size2: number; // major grid cell size, default = 10\n    readonly distance: number; // max distance to render grid\n}\n\nexport const CubeId = 0xfffffff8; // object_id for picking\n\nexport interface RenderStateCube {\n    readonly enabled: boolean; // default = false\n    readonly position: ReadonlyVec3; // default = (0,0,0)\n    readonly scale: number; // default = 1\n}\n\n/** Gradient curve knot node. */\nexport interface RenderStateColorGradientKnot<T extends RGB | RGBA> {\n    /** Knot position on the gradient ramp. */\n    readonly position: number;\n    /** Color to use at this gradient position. */\n    readonly color: T;\n}\n\n/** A color gradient curve.\n * @remarks\n * This curve is used to visualize some scalar value as a color gradient, e.g. terrain evelvation or point cloud devience.\n */\nexport interface RenderStateColorGradient<T extends RGB | RGBA> {\n    /**A set of knots defining a non-uniform linear spline curve.\n     * @remarks\n     * Nodes must be sorted in ascending order of elevation!\n     * At least two nodes are required for any sort of gradient.\n     * Nodes do not have to be uniformly distributed elevation-wise.\n     * To create a discontinuity in the gradient, two adjacent nodes with identical elevation, but different colors may be used.\n     * Any elevation outside the min/max range defined by this list will be clamped to the color of the nearest node (min or max), i.e., no extrapolation will occur.\n     */\n    readonly knots: readonly RenderStateColorGradientKnot<T>[];\n}\n\n/** Terrain render state. */\nexport interface RenderStateTerrain {\n    /** Elevation gradient color curve.\n     * @remarks\n     * Elevations are defined as in meters above/below sea level (using negative values for sub sea terrain).\n     */\n    readonly elevationGradient: RenderStateColorGradient<RGB>;\n    /** Flag for whether to draw terrain as background. */\n    readonly asBackground: boolean;\n};\n\n/** Point cloud settings.\n * @remarks\n * The sizes are cumulative and computed as follows:\n * ``effective_point_pixel_size = max(1, pixelSize + projectedSizeOf(metricSize + tolerance * toleranceFactor))``.\n * Metric size is projected as a 3D sphere at the point origo to deterine pixel size.\n * The term pixel refers to the size of a pixel in the target canvas element, which resolution may differ from that of the render buffer.\n */\nexport interface RenderStatePointCloud {\n    readonly size: {\n        /** Point size in pixels. */\n        pixel: number | undefined;\n        /** Max point size in pixels. */\n        maxPixel: number | undefined;\n        /** Point size in meters. */\n        metric: number | undefined;\n        /** The scaling factor for applying the tolerance of the current level of detail to point size.\n         * @remarks\n         * Different levels of detail (LOD) will have different point densities.\n         * Taking this difference into account may result in a more uniform point coverage and visually pleasing result.\n         * The tolerance of each LOD reflects the point merging distance threshold in meters used to reduce # points, or 0 for the original level of detail.\n         */\n        toleranceFactor: number;\n    };\n\n    readonly deviation: {\n        readonly index: number; // 0-3, which deviance vertex attribute to render\n        readonly mixFactor: number; // 0-1, where 0 is 100% original vertex color and 1 is 100% color gradient color\n        readonly colorGradient: RenderStateColorGradient<RGBA>;\n    };\n\n\n    /**Use pre calculated projected position instead of original */\n    readonly useProjectedPosition: boolean;\n}\n\nexport enum ClippingMode {\n    intersection,\n    union,\n}\n\nexport enum ClippingId { // object_id's for picking\n    plane0 = 0xfffffff0, plane1, plane2, plane3, plane4, plane5, plane6\n}\n\nexport interface RenderStateClippingPlane {\n    readonly normalOffset: ReadonlyVec4,\n    readonly color?: RGBA;\n}\n\nexport interface RenderStateClipping {\n    readonly enabled: boolean;\n    readonly draw: boolean;\n    readonly mode: ClippingMode;\n    readonly planes: readonly RenderStateClippingPlane[];\n}\n\n/** 5x4 row-major matrix for color/opacity transform.\n * @remarks\n * This matrix defines the linear transformation that is applied to the original RGBA color before rendering.\n * The fifth column is multiplied by a constant 1, making it useful for translation.\n * The resulting colors are computed thus:\n * ```\n * output_red = r*m[0] + g*m[1] + b*m[2] + a*m[3] + m[4]\n * output_green = r*m[5] + g*m[6] + b*m[7] + a*m[8] + m[9]\n * output_blue = r*m[10] + g*m[11] + b*m[12] + a*m[13] + m[14]\n * output_alpha = r*m[15] + g*m[16] + b*m[17] + a*m[18] + m[19]\n * ```\n * All input values are between 0 and 1 and output value will be clamped to this range.\n */\nexport type RGBATransform = FixedSizeArray<20, number>;\n\nexport type RenderStateGroupAction = RGBATransform | \"hide\" | \"filter\";\n\nexport interface RenderStateHighlightGroup {\n    readonly action: RenderStateGroupAction;\n    readonly objectIds: Iterable<number>; // must be sorted in ascending order!\n}\n\n\nexport interface RenderStateHighlightGroups {\n    readonly defaultAction: RenderStateGroupAction | undefined;\n    readonly groups: readonly RenderStateHighlightGroup[];\n}\n\nexport enum TonemappingMode {\n    color,\n    normal,\n    depth,\n    objectId,\n    deviation,\n    zbuffer,\n};\n\nexport interface RenderStateOutlinesNearClipping {\n}\n\nexport interface RenderStateOutlines {\n    readonly enabled: boolean;\n    readonly color: RGB;\n    readonly plane: ReadonlyVec4;\n}\n\nexport interface RenderStateTonemapping {\n    /** Camera light exposure as stops of power of 2.\n     * @remarks\n     * Negative values darkens the image, while positive ones brightens it.\n     * The default value is 0.0.\n     */\n    readonly exposure: number;\n\n    /** Debug display frame buffer */\n    readonly mode: TonemappingMode;\n}\n\nexport interface RenderStateToonOutline {\n    readonly enabled: boolean;\n    readonly color: RGB;\n    readonly onlyOnIdleFrame: boolean;\n}\n\nexport interface RenderStatePick {\n    /** The opacity/alpha minimum (inclusive) threshold at which to include a pixel in the pick output.\n     * @public\n     * @remarks\n     * A value between 0 and 1, where 0 includes all pixels no matter how transparent and 1 only includes 100% opaque pixels.\n     * The default value is 1.\n     */\n    readonly opacityThreshold: number;\n}", "import { mat3, mat4, type ReadonlyMat3, type ReadonlyMat4 } from \"gl-matrix\";\nimport { CoordSpace, type Matrices, type RenderStateCamera, type RenderStateOutput } from \"./state\";\n\nfunction index(from: CoordSpace, to: CoordSpace): number {\n    return from * 3 + to;\n}\n\nexport function matricesFromRenderState(state: { output: RenderStateOutput; camera: RenderStateCamera; }): Matrices {\n    const { camera, output } = state;\n    const { width, height } = output;\n    const aspectRatio = width / height;\n    const fovY = camera.fov * Math.PI / 180;\n    const viewWorld = mat4.fromRotationTranslation(mat4.create(), camera.rotation, camera.position);\n    const viewClip = mat4.create();\n    if (camera.kind == \"orthographic\") {\n        const aspect = output.width / output.height;\n        const halfHeight = camera.fov / 2;\n        const halfWidth = halfHeight * aspect;\n        mat4.ortho(viewClip, -halfWidth, halfWidth, -halfHeight, halfHeight, camera.near, camera.far);\n    }\n    else {\n        mat4.perspective(viewClip, fovY, aspectRatio, camera.near, camera.far);\n    }\n    return new MatricesImpl(viewWorld, viewClip);\n}\n\nclass MatricesImpl implements Matrices {\n    private _mtx4 = new Array<mat4 | undefined>(4 * 4);\n    private _mtx3 = new Array<mat3 | undefined>(4 * 4);\n\n    constructor(viewWorld: mat4, viewClip: mat4) {\n        this._mtx4[index(CoordSpace.View, CoordSpace.World)] = viewWorld;\n        this._mtx4[index(CoordSpace.View, CoordSpace.Clip)] = viewClip;\n        const worldView = this._mtx4[index(CoordSpace.World, CoordSpace.View)] = mat4.create();\n        const clipView = this._mtx4[index(CoordSpace.Clip, CoordSpace.View)] = mat4.create();\n        mat4.invert(worldView, viewWorld);\n        mat4.invert(clipView, viewClip);\n    }\n\n    getMatrix(from: CoordSpace, to: CoordSpace): ReadonlyMat4 {\n        console.assert(from != to);\n        const idx = index(from, to);\n        let m = this._mtx4[idx];\n        if (!m) {\n            this._mtx4[idx] = m = mat4.create();\n            // recursively combine from neighbor matrices\n            if (to > from) {\n                mat4.multiply(m, this.getMatrix(to - 1, to), this.getMatrix(from, to - 1));\n            } else {\n                mat4.multiply(m, this.getMatrix(from - 1, to), this.getMatrix(from, from - 1));\n            }\n        }\n        return m;\n    }\n\n    getMatrixNormal(from: CoordSpace, to: CoordSpace): ReadonlyMat3 {\n        console.assert(from != to);\n        const idx = index(from, to);\n        let m = this._mtx3[idx];\n        if (!m) {\n            this._mtx3[idx] = m = mat3.create();\n            mat3.normalFromMat4(m, this.getMatrix(from, to));\n        }\n        return m;\n    }\n}\n", "import { glMatrix, mat4, vec3, vec4 } from \"gl-matrix\";\nimport { type RenderState, CoordSpace, type Matrices, type ViewFrustum } from \"./state\";\n\nexport function createViewFrustum(state: RenderState, matrices: Matrices): ViewFrustum {\n    const { camera, output } = state;\n    const { width, height } = output;\n    const aspect = width / height;\n    const halfHeight = camera.fov / 2;\n    const halfWidth = halfHeight * aspect;\n\n    const left = vec4.create();\n    const right = vec4.create();\n    const top = vec4.create();\n    const bottom = vec4.create();\n    const near = vec4.create();\n    const far = vec4.create();\n    const image = vec4.create();\n\n    vec4.set(near, 0, 0, 1, -camera.near);\n    vec4.set(far, 0, 0, -1, camera.far);\n    vec4.set(image, 0, 0, -1, 0);\n\n    if (camera.kind == \"orthographic\") {\n        vec4.set(left, -1, 0, 0, halfWidth);\n        vec4.set(right, 1, 0, 0, halfWidth);\n        vec4.set(top, 0, 1, 0, halfHeight);\n        vec4.set(bottom, 0, -1, 0, halfHeight);\n    } else {\n        const halfAngleY = glMatrix.toRadian(camera.fov / 2);\n        const halfAngleX = Math.atan(Math.tan(halfAngleY) * aspect);\n        vec4.set(left, -Math.cos(halfAngleX), 0, Math.sin(halfAngleX), 0);\n        vec4.set(right, Math.cos(halfAngleX), 0, Math.sin(halfAngleX), 0);\n        vec4.set(top, 0, Math.cos(halfAngleY), Math.sin(halfAngleY), 0);\n        vec4.set(bottom, 0, -Math.cos(halfAngleY), Math.sin(halfAngleY), 0);\n    }\n\n    // transform into world space\n    const normal = vec3.create();\n    const position = vec3.create();\n    const matrix = matrices.getMatrix(CoordSpace.View, CoordSpace.World);\n    const matrixNormal = matrices.getMatrixNormal(CoordSpace.View, CoordSpace.World);\n    mat4.getTranslation(position, matrix);\n    const planes = [left, right, top, bottom, near, far, image];\n    for (const plane of planes) {\n        const [x, y, z, offset] = plane;\n        vec3.set(normal, x, y, z);\n        vec3.transformMat3(normal, normal, matrixNormal);\n        const distance = offset + vec3.dot(position, normal);\n        vec4.set(plane, normal[0], normal[1], normal[2], -distance);\n    }\n    return { left, right, top, bottom, near, far, image, planes: [left, right, top, bottom, near, far] };\n}", "import { glBlit, glInvalidateFrameBuffer, glReadPixels } from \"webgl2\";\nimport { ResourceBin } from \"./resource\";\n\nexport const enum BufferFlags {\n    color = 0x01,\n    pick = 0x02,\n    depth = 0x04,\n    all = color | pick | depth,\n};\n\n/*\npick buffer layout\n  object_id: u32\n  normal: 3 x f16\n  deviation: f16\n  linear_depth f32\n*/\n\nexport class RenderBuffers {\n    readBuffersNeedUpdate = true;\n    readonly textures;\n    readonly renderBuffers;\n    readonly frameBuffers;\n    readonly readBuffers;\n    private typedArrays;\n    private pickFence: {\n        readonly sync: WebGLSync,\n        readonly promises: { readonly resolve: () => void, readonly reject: (reason: string) => void }[],\n    } | undefined;\n\n    constructor(readonly gl: WebGL2RenderingContext, readonly width: number, readonly height: number, readonly samples: number, readonly resourceBin: ResourceBin) {\n        const textures = this.textures = {\n            // color: resourceBin.createTexture({ kind: \"TEXTURE_2D\", width, height, internalFormat: \"RGBA16F\", type: \"HALF_FLOAT\", image: null }),\n            color: resourceBin.createTexture({ kind: \"TEXTURE_2D\", width, height, internalFormat: \"R11F_G11F_B10F\", type: \"HALF_FLOAT\", image: null }),\n            pick: resourceBin.createTexture({ kind: \"TEXTURE_2D\", width, height, internalFormat: \"RGBA32UI\", type: \"UNSIGNED_INT\", image: null }), // TODO: Pack linearDepth into this buffer instead.\n            depth: resourceBin.createTexture({ kind: \"TEXTURE_2D\", width, height, internalFormat: \"DEPTH_COMPONENT32F\", type: \"FLOAT\", image: null }),\n        } as const;\n\n        const renderBuffers = this.renderBuffers = {\n            colorMSAA: samples > 1 ? resourceBin.createRenderBuffer({ internalFormat: \"R11F_G11F_B10F\", width, height, samples }) : null,\n            depthMSAA: samples > 1 ? resourceBin.createRenderBuffer({ internalFormat: \"DEPTH_COMPONENT32F\", width, height, samples }) : null,\n        } as const;\n\n        this.frameBuffers = {\n            color: resourceBin.createFrameBuffer({\n                color: [\n                    { kind: \"FRAMEBUFFER\", texture: textures.color },\n                ],\n                depth: { kind: \"DRAW_FRAMEBUFFER\", texture: textures.depth },\n            }),\n            colorMSAA: samples > 1 ? resourceBin.createFrameBuffer({\n                color: [\n                    { kind: \"DRAW_FRAMEBUFFER\", renderBuffer: renderBuffers.colorMSAA },\n                ],\n                depth: { kind: \"DRAW_FRAMEBUFFER\", renderBuffer: renderBuffers.depthMSAA },\n            }) : null,\n            pick: resourceBin.createFrameBuffer({\n                color: [\n                    null,\n                    { kind: \"DRAW_FRAMEBUFFER\", texture: textures.pick },\n                ],\n                depth: { kind: \"DRAW_FRAMEBUFFER\", texture: textures.depth },\n            }),\n        } as const;\n\n        this.readBuffers = {\n            pick: resourceBin.createBuffer({ kind: \"PIXEL_PACK_BUFFER\", byteSize: width * height * 16, usage: \"STREAM_READ\" }),\n        } as const;\n\n        this.typedArrays = {\n            pick: new Uint32Array(width * height * 4),\n        } as const;\n    }\n\n    resolveMSAA() {\n        const { gl, frameBuffers, width, height } = this;\n        const { colorMSAA, color } = frameBuffers;\n        if (colorMSAA) {\n            glBlit(gl, { source: colorMSAA, destination: color, color: true, srcX1: width, srcY1: height, dstX1: width, dstY1: height }); // TODO: check if we can/should use a frag shader to do tonemapping on MSAA instead.\n            glInvalidateFrameBuffer(gl, { kind: \"FRAMEBUFFER\", frameBuffer: colorMSAA, color: [true], depth: true });\n        }\n    }\n\n    invalidate(frameBuffer: keyof RenderBuffers[\"frameBuffers\"], buffers: BufferFlags) {\n        const { gl, frameBuffers } = this;\n        var color = (buffers & BufferFlags.color) != 0;\n        var pick = (buffers & BufferFlags.pick) != 0;\n        var depth = (buffers & BufferFlags.depth) != 0;\n        glInvalidateFrameBuffer(gl, { kind: \"DRAW_FRAMEBUFFER\", frameBuffer: frameBuffers[frameBuffer], color: [color, pick], depth });\n    }\n\n    // copy framebuffer into read buffers\n    private read() {\n        const { gl, width, height, frameBuffers, readBuffers } = this;\n        glReadPixels(gl, {\n            width, height, frameBuffer: frameBuffers.pick, buffers: [\n                { attachment: \"COLOR_ATTACHMENT1\", buffer: readBuffers.pick, format: \"RGBA_INTEGER\", type: \"UNSIGNED_INT\" },\n            ]\n        });\n    }\n\n    async pickBuffers() {\n        if (this.readBuffersNeedUpdate && !this.pickFence) {\n            const { gl } = this;\n            this.read();\n            this.readBuffersNeedUpdate = false;\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!;\n            this.pickFence = { sync, promises: [] };\n        }\n        if (this.pickFence) {\n            const { promises } = this.pickFence;\n            const promise = new Promise<void>((resolve, reject) => {\n                promises.push({ resolve, reject });\n            });\n            await promise;\n            return this.typedArrays;\n        } else {\n            return Promise.resolve(this.typedArrays);\n        }\n    }\n\n    dispose() {\n        this.deletePickFence();\n        this.resourceBin.dispose();\n    }\n\n    pollPickFence() {\n        const { gl, pickFence, readBuffers, typedArrays } = this;\n        if (pickFence) {\n            const { sync, promises } = pickFence;\n            const status = gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0);\n            if (status == gl.WAIT_FAILED) {\n                for (const promise of promises) {\n                    promise.reject(\"Pick failed!\");\n                }\n                this.deletePickFence();\n            } else if (status != gl.TIMEOUT_EXPIRED) {\n                // we must copy read buffers into typed arrays in one go, or get annoying gl pipeline stalled warning on chrome\n                // this means we allocate more memory, but this also makes subsequent picks faster.\n                gl.bindBuffer(gl.PIXEL_PACK_BUFFER, readBuffers.pick);\n                gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, typedArrays.pick);\n                gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n                // resolve promises\n                for (const promise of promises) {\n                    promise.resolve();\n                }\n                this.deletePickFence();\n            }\n        }\n    }\n\n    private deletePickFence() {\n        this.gl.deleteSync(this.pickFence?.sync ?? null);\n        this.pickFence = undefined;\n    }\n}\n", "import { glCreateBuffer, glCreateFrameBuffer, glCreateProgram, glCreateRenderbuffer, glCreateSampler, glCreateTexture, glCreateVertexArray, type WebGLResource, type BufferParams, type BufferTargetString, type FrameBufferParams, type ProgramParams, type RenderbufferParams, type SamplerParams, type TextureParams, type TextureTargetString, type VertexArrayParams, glCreateProgramAsync, type ProgramAsyncParams, glLimits } from \"webgl2\";\n\nexport class ResourceBin {\n    private readonly resourceMap = new Map<WebGLResource, ResourceInfo[]>();\n\n    private constructor(readonly gl: WebGL2RenderingContext, readonly name: string, private readonly collection: Set<ResourceBin>) {\n        this.collection.add(this);\n    }\n\n    protected static create(gl: WebGL2RenderingContext, name: string, collection: Set<ResourceBin>) {\n        return new ResourceBin(gl, name, collection);\n    }\n\n    get resourceInfo(): IterableIterator<ResourceInfo> {\n        const { resourceMap } = this;\n        function* iterate() {\n            for (const infos of resourceMap.values()) {\n                for (const info of infos) {\n                    yield { ...info } as const satisfies ResourceInfo;\n                }\n            }\n        }\n        return iterate();\n    }\n\n    get size() {\n        return this.resourceMap.size;\n    }\n\n    createBuffer(params: BufferParams) {\n        return this.add(glCreateBuffer(this.gl, params), { kind: \"Buffer\", target: params.kind, byteSize: bufferBytes(params) });\n    }\n\n    createFrameBuffer(params: FrameBufferParams) {\n        return this.add(glCreateFrameBuffer(this.gl, params), { kind: \"Framebuffer\" });\n    }\n\n    createProgram(params: ProgramParams) {\n        return this.add(glCreateProgram(this.gl, params), { kind: \"Program\" });\n    }\n\n    createProgramAsync(params: ProgramAsyncParams) {\n        const ret = glCreateProgramAsync(this.gl, params);\n        this.add(ret.program, { kind: \"Program\" });\n        return ret;\n    }\n\n    createRenderBuffer(params: RenderbufferParams) {\n        return this.add(glCreateRenderbuffer(this.gl, params), { kind: \"Renderbuffer\", byteSize: renderBufferBytes(this.gl, params) });\n    }\n\n    createSampler(params: SamplerParams) {\n        return this.add(glCreateSampler(this.gl, params), { kind: \"Sampler\" });\n    }\n\n    createTexture(params: TextureParams) {\n        return this.add(glCreateTexture(this.gl, params), { kind: \"Texture\", target: params.kind, byteSize: textureBytes(params) });\n    }\n\n    createTransformFeedback() {\n        return this.add(this.gl.createTransformFeedback()!, { kind: \"TransformFeedback\" });\n    }\n\n    createVertexArray(params: VertexArrayParams): WebGLVertexArrayObject {\n        return this.add(glCreateVertexArray(this.gl, params), { kind: \"VertexArray\" });\n    }\n\n    private add<T extends WebGLResource>(resource: T, info: ResourceInfo): T {\n        console.assert(resource.constructor.name.startsWith(\"WebGL\"));\n        if (!this.resourceMap.has(resource)) {\n            this.resourceMap.set(resource, [info]);\n        } else {\n            throw new Error(\"Resource added more than once!\");\n        }\n        return resource;\n    }\n\n    // delete resources that are already kept alive/referenced by other resources,\n    // e.g. a buffer referenced by a vertex array object or a texture referenced by a framebuffer.\n    // this will remove them from the list of attached resources but retain info for resource tracking purposes\n    subordinate(owner: WebGLVertexArrayObject | WebGLFramebuffer, ...resources: readonly (WebGLResource | null)[]) {\n        const deletedInfos: ResourceInfo[] = [];\n        console.assert(resources.length > 0);\n        this.del(resources, deletedInfos);\n        const ownerInfos = this.resourceMap.get(owner);\n        if (ownerInfos) {\n            ownerInfos.push(...deletedInfos);\n        }\n    }\n\n    delete(...resources: readonly (WebGLResource | null)[]) {\n        this.del(resources);\n    }\n\n    private del(resources: readonly (WebGLResource | null)[], deleteInfos?: ResourceInfo[]) {\n        const { gl, resourceMap } = this;\n        for (const resource of resources) {\n            if (!resource)\n                continue;\n            const infos = this.resourceMap.get(resource);\n            if (infos && infos.length > 0) {\n                for (const info of infos) {\n                    deleteInfos?.push(info);\n                }\n                const [primary] = infos;\n                gl[`delete${primary.kind}`](resource);\n                resourceMap.delete(resource);\n            } else {\n                throw new Error(\"Resource could not be found!\"); // removed twice or never added in the first place?\n            }\n        }\n    }\n\n    deleteAll() {\n        this.delete(...this.resourceMap.keys());\n        this.resourceMap.clear(); // remove any detached entries\n    }\n\n    dispose() {\n        if (this.gl) {\n            this.deleteAll();\n            this.collection.delete(this);\n        }\n    }\n}\n\nfunction bufferBytes(params: BufferParams) {\n    return \"byteSize\" in params ? params.byteSize : params.srcData.byteLength;\n}\n\nfunction renderBufferBytes(gl: WebGL2RenderingContext, params: RenderbufferParams) {\n    const { width, height, internalFormat } = params;\n    const samples = params.samples == \"max\" ? glLimits(gl).MAX_SAMPLES : params.samples ?? 1;\n    const bytesPerPixel = Math.ceil(internalFormatTexelBytes[internalFormat]); // this is an approximation as drivers may choose a different, albeit compatible format, e.g. RGBA8 instead of RGB8.\n    return width * height * bytesPerPixel * samples;\n}\n\nfunction textureBytes(params: TextureParams) {\n    const width = params.width ?? params.image.width;\n    const height = params.height ?? params.image.height;\n    const depth = \"depth\" in params ? params.depth : 1;\n    const faces = params.kind == \"TEXTURE_CUBE_MAP\" ? 6 : 1;\n    const topLeveltexels = width * height * depth * faces;\n    let totalTexels = 0;\n    let levels = 1;\n    if (\"mipMaps\" in params) {\n        const { mipMaps } = params;\n        const isNumber = typeof mipMaps == \"number\";\n        levels = isNumber ? mipMaps : mipMaps.length;\n    }\n    if (\"generateMipMaps\" in params && params.generateMipMaps && isPowerOf2(width) && isPowerOf2(height)) {\n        levels = Math.min(Math.log2(width), Math.log2(height));\n    }\n    for (let level = 0; level < levels; level++) {\n        totalTexels += topLeveltexels >> level;\n    }\n    const bytesPerTexel = Math.ceil(internalFormatTexelBytes[params.internalFormat]);\n    return Math.ceil(totalTexels * bytesPerTexel);\n}\n\n// only makes sense if entire buffers are use exclusively for this vao.\nfunction vaoReferencedByteSize(gl: WebGL2RenderingContext, params: VertexArrayParams) {\n    const buffers = new Set<WebGLBuffer>();\n    for (const attrib of params.attributes) {\n        const buffer = attrib?.buffer;\n        if (buffer) {\n            buffers.add(buffer);\n        }\n    }\n    let byteSize = 0;\n    for (const buffer of buffers) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        byteSize += gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);\n    };\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    if (params.indices) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, params.indices);\n        byteSize += gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_SIZE);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    }\n    return byteSize;\n}\n\nfunction isPowerOf2(value: number) {\n    return (value & (value - 1)) == 0;\n}\n\nconst resourceKinds = [\n    \"Buffer\",\n    \"Framebuffer\",\n    \"Program\",\n    \"Query\",\n    \"Renderbuffer\",\n    \"Sampler\",\n    \"Shader\",\n    \"Sync\",\n    \"TransformFeedback\",\n    \"Texture\",\n    \"VertexArray\",\n] as const;\n\nconst internalFormatTexelBytes = {\n    \"RGB\": 3,\n    \"RGBA\": 4,\n    \"LUMINANCE_ALPHA\": 2,\n    \"LUMINANCE\": 1,\n    \"ALPHA\": 1,\n    \"STENCIL_INDEX8\": 1,\n    \"R8\": 1,\n    \"R8_SNORM\": 1,\n    \"RG8\": 2,\n    \"RG8_SNORM\": 2,\n    \"RGB8\": 3,\n    \"RGB8_SNORM\": 3,\n    \"RGB565\": 2,\n    \"RGBA4\": 2,\n    \"RGB5_A1\": 2,\n    \"RGBA8\": 4,\n    \"RGBA8_SNORM\": 4,\n    \"RGB10_A2\": 4,\n    \"RGB10_A2UI\": 4,\n    \"SRGB8\": 3,\n    \"SRGB8_ALPHA8\": 4,\n    \"R16F\": 2,\n    \"RG16F\": 4,\n    \"RGB16F\": 6,\n    \"RGBA16F\": 8,\n    \"R32F\": 4,\n    \"RG32F\": 8,\n    \"RGB32F\": 16,\n    \"RGBA32F\": 32,\n    \"R11F_G11F_B10F\": 4,\n    \"RGB9_E5\": 4,\n    \"R8I\": 1,\n    \"R8UI\": 1,\n    \"R16I\": 2,\n    \"R16UI\": 2,\n    \"R32I\": 4,\n    \"R32UI\": 4,\n    \"RG8I\": 2,\n    \"RG8UI\": 2,\n    \"RG16I\": 4,\n    \"RG16UI\": 4,\n    \"RG32I\": 8,\n    \"RG32UI\": 8,\n    \"RGB8I\": 3,\n    \"RGB8UI\": 4,\n    \"RGB16I\": 6,\n    \"RGB16UI\": 6,\n    \"RGB32I\": 12,\n    \"RGB32UI\": 12,\n    \"RGBA8I\": 4,\n    \"RGBA8UI\": 4,\n    \"RGBA16I\": 8,\n    \"RGBA16UI\": 8,\n    \"RGBA32I\": 16,\n    \"RGBA32UI\": 16,\n    \"DEPTH_COMPONENT16\": 2,\n    \"DEPTH_COMPONENT24\": 3,\n    \"DEPTH_COMPONENT32F\": 4,\n    \"DEPTH24_STENCIL8\": 4,\n    \"DEPTH32F_STENCIL8\": 5,\n    // WEBGL_compressed_texture_s3tc\n    \"COMPRESSED_RGB_S3TC_DXT1_EXT\": .5,\n    \"COMPRESSED_RGBA_S3TC_DXT1_EXT\": .5,\n    \"COMPRESSED_RGBA_S3TC_DXT3_EXT\": 1,\n    \"COMPRESSED_RGBA_S3TC_DXT5_EXT\": 1,\n    // WEBGL_compressed_texture_s3tc_srgb\n    \"COMPRESSED_SRGB_S3TC_DXT1_EXT\": .5,\n    \"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\": .5,\n    \"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\": 1,\n    \"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\": 1,\n    // WEBGL_compressed_texture_etc\n    \"COMPRESSED_R11_EAC\": .5,\n    \"COMPRESSED_SIGNED_R11_EAC\": .5,\n    \"COMPRESSED_RG11_EAC\": 1,\n    \"COMPRESSED_SIGNED_RG11_EAC\": 1,\n    \"COMPRESSED_RGB8_ETC2\": .5,\n    \"COMPRESSED_RGBA8_ETC2_EAC\": 1,\n    \"COMPRESSED_SRGB8_ETC2\": .5,\n    \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\": 1,\n    \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\": .5,\n    \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\": .5,\n    // WEBGL_compressed_texture_pvrtc\n    \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\": .5,\n    \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\": .5,\n    \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\": .25,\n    \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\": .25,\n    // WEBGL_compressed_texture_etc1    \n    \"COMPRESSED_RGB_ETC1_WEBGL\": .5,\n    // WEBGL_compressed_texture_astc    \n    \"COMPRESSED_RGBA_ASTC_4x4_KHR\": 16 / (4 * 4),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR\": 16 / (4 * 4),\n    \"COMPRESSED_RGBA_ASTC_5x4_KHR\": 16 / (5 * 4),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR\": 16 / (5 * 4),\n    \"COMPRESSED_RGBA_ASTC_5x5_KHR\": 16 / (5 * 5),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR\": 16 / (5 * 5),\n    \"COMPRESSED_RGBA_ASTC_6x5_KHR\": 16 / (6 * 5),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR\": 16 / (6 * 5),\n    \"COMPRESSED_RGBA_ASTC_6x6_KHR\": 16 / (6 * 6),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR\": 16 / (6 * 6),\n    \"COMPRESSED_RGBA_ASTC_8x5_KHR\": 16 / (8 * 5),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR\": 16 / (8 * 5),\n    \"COMPRESSED_RGBA_ASTC_8x6_KHR\": 16 / (8 * 6),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR\": 16 / (8 * 6),\n    \"COMPRESSED_RGBA_ASTC_8x8_KHR\": 16 / (8 * 8),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR\": 16 / (8 * 8),\n    \"COMPRESSED_RGBA_ASTC_10x5_KHR\": 16 / (10 * 5),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR\": 16 / (10 * 5),\n    \"COMPRESSED_RGBA_ASTC_10x6_KHR\": 16 / (10 * 6),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR\": 16 / (10 * 6),\n    \"COMPRESSED_RGBA_ASTC_10x10_KHR\": 16 / (10 * 10),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR\": 16 / (10 * 10),\n    \"COMPRESSED_RGBA_ASTC_12x10_KHR\": 16 / (12 * 10),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR\": 16 / (12 * 10),\n    \"COMPRESSED_RGBA_ASTC_12x12_KHR\": 16 / (12 * 12),\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR\": 16 / (12 * 12),\n    // EXT_texture_compression_bptc    \n    \"COMPRESSED_RGBA_BPTC_UNORM_EXT\": 1,\n    \"COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT\": 1,\n    \"COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT\": 1,\n    \"COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT\": 1,\n    // EXT_texture_compression_rgtc    \n    \"COMPRESSED_RED_RGTC1_EXT\": .5,\n    \"COMPRESSED_SIGNED_RED_RGTC1_EXT\": .5,\n    \"COMPRESSED_RED_GREEN_RGTC2_EXT\": 1,\n    \"COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT\": 1,\n} as const;\n\nexport type ResourceKind = typeof resourceKinds[number];\nexport type ResourceTarget = BufferTargetString | TextureTargetString | \"FRAMEBUFFER\";\n\nexport interface ResourceInfo {\n    readonly kind: ResourceKind;\n    readonly target?: ResourceTarget;\n    readonly byteSize?: number;\n    readonly tag?: string;\n}", "import { mat4, vec3, type ReadonlyMat4, type ReadonlyVec4 } from \"gl-matrix\";\n\nexport function decodeBase64(base64: string, type?: Uint8ArrayConstructor): Uint8Array;\nexport function decodeBase64(base64: string, type: Uint8ClampedArrayConstructor): Uint8ClampedArray;\nexport function decodeBase64(base64: string | undefined, type?: Uint8ArrayConstructor): Uint8Array | undefined;\nexport function decodeBase64(base64: string | undefined, type: Uint8ClampedArrayConstructor): Uint8ClampedArray | undefined;\nexport function decodeBase64(base64: string | undefined, type: Uint8ArrayConstructor | Uint8ClampedArrayConstructor = Uint8Array) {\n    if (base64) {\n        var binaryString = atob(base64);\n        var len = binaryString.length;\n        const bytes = new type(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n        }\n        return bytes;\n    }\n}\n\nexport function othoNormalBasisMatrixFromPlane(plane: ReadonlyVec4): ReadonlyMat4 {\n    const [nx, ny, nz, offs] = plane;\n    const axisZ = vec3.fromValues(nx, ny, nz);\n    const minI = nx < ny && nx < nz ? 0 : ny < nz ? 1 : 2;\n    const axisY = vec3.fromValues(0, 0, 0);\n    axisY[minI] = 1;\n    const axisX = vec3.cross(vec3.create(), axisY, axisZ);\n    vec3.cross(axisX, axisY, axisZ);\n    vec3.normalize(axisX, axisX);\n    vec3.cross(axisY, axisZ, axisX);\n    vec3.normalize(axisY, axisY);\n    const [bx, by, bz] = axisX;\n    const [tx, ty, tz] = axisY;\n    return mat4.fromValues(\n        bx, by, bz, 0,\n        tx, ty, tz, 0,\n        nx, ny, nz, 0,\n        nx * -offs, ny * -offs, nz * -offs, 1\n    );\n}", "import { CoordSpace, TonemappingMode, createDefaultModules } from \"./\";\nimport type { RenderModuleContext, RenderModule, DerivedRenderState, RenderState } from \"./\";\nimport { glCreateBuffer, glExtensions, glState, glUpdateBuffer, glUBOProxy, glCheckProgram, glCreateTimer, glClear, type StateParams, glLimits, } from \"webgl2\";\nimport type { UniformsProxy, TextureParamsCubeUncompressedMipMapped, TextureParamsCubeUncompressed, ColorAttachment, ShaderHeaderParams, Timer, DrawStatistics, TextureImageSource } from \"webgl2\";\nimport { matricesFromRenderState } from \"./matrices\";\nimport { createViewFrustum } from \"./viewFrustum\";\nimport { BufferFlags, RenderBuffers } from \"./buffers\";\nimport type { WasmInstance } from \"./wasm\";\nimport type { ReadonlyVec3 } from \"gl-matrix\";\nimport { mat3, mat4, vec3, vec4 } from \"gl-matrix\";\nimport commonShaderCore from \"./common.glsl\";\nimport { ResourceBin } from \"./resource\";\nimport type { DeviceProfile } from \"./device\";\nimport { othoNormalBasisMatrixFromPlane } from \"./util\";\n\n// the context is re-created from scratch if the underlying webgl2 context is lost\nexport class RenderContext {\n    private static defaultModules: readonly RenderModule[] | undefined;\n    private modules: readonly RenderModuleContext[] | undefined;\n    private cameraUniformsData;\n    private clippingUniformsData;\n    private outlinesUniformsData;\n    protected localSpaceTranslation = vec3.create() as ReadonlyVec3;\n    private readonly asyncPrograms: AsyncProgramInfo[] = [];\n    readonly gl: WebGL2RenderingContext;\n    readonly commonChunk: string;\n    readonly defaultIBLTextureParams: TextureParamsCubeUncompressed;\n    private readonly resourceBins = new Set<ResourceBin>();\n    private readonly defaultResourceBin;\n    private readonly iblResourceBin;\n    private pickBuffersValid = false;\n    private currentPick: Uint32Array | undefined;\n    private activeTimers = new Set<Timer>();\n    private currentFrameTime = 0;\n    private statistics = {\n        points: 0,\n        lines: 0,\n        triangles: 0,\n        drawCalls: 0,\n    };\n    private prevFrame: {\n        readonly time: number;\n        readonly resolve: (interval: number) => void;\n    } | undefined;\n\n    // use a pre-pass to fill in z-buffer for improved fill rate at the expense of triangle rate (useful when doing heavy shading, but unclear how efficient this is on tiled GPUs.)\n    //* @internal */\n    readonly usePrepass = false;\n\n    // copy from last rendered state\n    private isOrtho = false;\n    private viewClipMatrix = mat4.create();\n    private viewWorldMatrix = mat4.create();\n    private viewWorldMatrixNormal = mat3.create();\n\n    // constant gl resources\n    readonly cameraUniforms: WebGLBuffer;\n    readonly clippingUniforms: WebGLBuffer;\n    readonly outlineUniforms: WebGLBuffer;\n    readonly lut_ggx: WebGLTexture;\n    readonly samplerMip: WebGLSampler; // use to read diffuse texture\n    readonly samplerSingle: WebGLSampler; // use to read the other textures\n\n    // shared mutable state\n    prevState: DerivedRenderState | undefined;\n    changed = true; // flag to force a re-render when internal render module state has changed, e.g. on download complete.\n    pause = false; // true to freeze all module updates, e.g. downloading of new geometry etc.\n    buffers: RenderBuffers = undefined!; // output render buffers. will be set on first render as part of resize.\n    iblTextures: { // these are changed by the background module, once download is complete\n        readonly diffuse: WebGLTexture; // irradiance cubemap\n        readonly specular: WebGLTexture; // radiance cubemap\n        readonly numMipMaps: number; // # of radiance/specular mip map levels.\n        readonly default: boolean;\n    };\n    isIdleFrame = false;\n\n    constructor(readonly deviceProfile: DeviceProfile, readonly canvas: HTMLCanvasElement, readonly wasm: WasmInstance, lut_ggx: TextureImageSource, options?: WebGLContextAttributes) {\n        // init gl context\n        const gl = canvas.getContext(\"webgl2\", options);\n        if (!gl)\n            throw new Error(\"Unable to create WebGL 2 context!\");\n        this.gl = gl;\n        const extensions = glExtensions(gl, true);\n        const defaultBin = this.defaultResourceBin = this.resourceBin(\"context\");\n        const iblBin = this.iblResourceBin = this.resourceBin(\"ibl\");\n        console.assert(extensions.loseContext != null, extensions.multiDraw != null, extensions.colorBufferFloat != null);\n        const { provokingVertex } = extensions;\n        if (provokingVertex) {\n            provokingVertex.provokingVertexWEBGL(provokingVertex.FIRST_VERTEX_CONVENTION_WEBGL);\n        }\n        this.commonChunk = commonShaderCore;\n\n        // ggx lookup texture and ibl samplers\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n        const lutParams = { kind: \"TEXTURE_2D\", internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: lut_ggx } as const;\n        this.lut_ggx = defaultBin.createTexture(lutParams);\n        this.samplerSingle = defaultBin.createSampler({ minificationFilter: \"LINEAR\", magnificationFilter: \"LINEAR\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\n        this.samplerMip = defaultBin.createSampler({ minificationFilter: \"LINEAR_MIPMAP_LINEAR\", magnificationFilter: \"LINEAR\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\n\n        // create default ibl textures\n        const top = new Uint8Array([192, 192, 192, 255]);\n        const side = new Uint8Array([128, 128, 128, 255]);\n        const bottom = new Uint8Array([64, 64, 64, 255]);\n        const image = [side, side, top, bottom, side, side] as const;\n        const textureParams = this.defaultIBLTextureParams = { kind: \"TEXTURE_CUBE_MAP\", width: 1, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: image } as const;\n        this.iblTextures = {\n            diffuse: iblBin.createTexture(textureParams),\n            specular: iblBin.createTexture(textureParams),\n            numMipMaps: 1,\n            default: true,\n        };\n\n        // camera uniforms\n        this.cameraUniformsData = glUBOProxy({\n            clipViewMatrix: \"mat4\",\n            viewClipMatrix: \"mat4\",\n            localViewMatrix: \"mat4\",\n            viewLocalMatrix: \"mat4\",\n            localViewMatrixNormal: \"mat3\",\n            viewLocalMatrixNormal: \"mat3\",\n            windowSize: \"vec2\",\n            near: \"float\",\n        });\n        this.cameraUniforms = glCreateBuffer(gl, { kind: \"UNIFORM_BUFFER\", byteSize: this.cameraUniformsData.buffer.byteLength });\n\n        // clipping uniforms\n        this.clippingUniformsData = glUBOProxy({\n            \"planes.0\": \"vec4\",\n            \"planes.1\": \"vec4\",\n            \"planes.2\": \"vec4\",\n            \"planes.3\": \"vec4\",\n            \"planes.4\": \"vec4\",\n            \"planes.5\": \"vec4\",\n            numPlanes: \"uint\",\n            mode: \"uint\",\n        });\n        this.clippingUniforms = glCreateBuffer(gl, { kind: \"UNIFORM_BUFFER\", byteSize: this.clippingUniformsData.buffer.byteLength });\n\n        // outlines uniforms\n        this.outlinesUniformsData = glUBOProxy({\n            localPlaneMatrix: \"mat4\",\n            planeLocalMatrix: \"mat4\",\n            color: \"vec3\",\n        });\n        this.outlineUniforms = glCreateBuffer(gl, { kind: \"UNIFORM_BUFFER\", byteSize: this.outlinesUniformsData.buffer.byteLength });\n    }\n\n    async init(modules?: readonly RenderModule[]) {\n        // initialize modules\n        if (!modules) {\n            RenderContext.defaultModules ??= createDefaultModules();\n            modules = RenderContext.defaultModules;\n        }\n        const modulePromises = modules.map((m, i) => {\n            const ret = m.withContext(this);\n            return isPromise(ret) ? ret : Promise.resolve(ret);\n        });\n        this.linkAsyncPrograms();\n        this.modules = await Promise.all(modulePromises);\n    }\n\n    private linkAsyncPrograms() {\n        // link all programs here (this is supposedly faster than interleaving compiles and links)\n        const { gl, asyncPrograms } = this;\n        for (const { program } of this.asyncPrograms) {\n            gl.linkProgram(program);\n        }\n        gl.useProgram(null);\n\n        // wait for completion\n        const ext = glExtensions(gl).parallelShaderCompile;\n        function pollAsyncPrograms() {\n            for (let i = 0; i < asyncPrograms.length; i++) {\n                const { program, resolve, reject } = asyncPrograms[i];\n                if (ext) {\n                    if (!gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR))\n                        continue;\n                }\n                const [info] = asyncPrograms.splice(i--, 1);\n                const error = glCheckProgram(gl, info);\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve();\n                }\n            }\n            if (asyncPrograms.length > 0) {\n                setTimeout(pollAsyncPrograms);\n            }\n        }\n        pollAsyncPrograms();\n    }\n\n    dispose() {\n        const { buffers, modules, activeTimers, defaultResourceBin, iblResourceBin } = this;\n        this.poll(); // finish async stuff\n        for (const timer of activeTimers) {\n            timer.dispose();\n        }\n        activeTimers.clear();\n        if (modules) {\n            for (const module of modules) {\n                module?.dispose();\n            }\n            this.modules = undefined;\n        }\n        buffers?.dispose();\n        iblResourceBin.dispose();\n        defaultResourceBin.dispose();\n        console.assert(this.resourceBins.size == 0);\n    }\n\n    get width() {\n        return this.gl.drawingBufferWidth;\n    }\n\n    get height() {\n        return this.gl.drawingBufferHeight;\n    }\n\n    isPickBuffersValid() {\n        return this.pickBuffersValid;\n    }\n\n    isRendering() {\n        return this.prevState != undefined;\n    }\n\n    isContextLost() {\n        return this.gl.isContextLost();\n    }\n\n    getViewMatrices() {\n        return { viewClipMatrix: this.viewClipMatrix, viewWorldMatrix: this.viewWorldMatrix, viewWorldMatrixNormal: this.viewWorldMatrixNormal };\n    }\n\n    //* @internal */\n    drawBuffers(buffers: BufferFlags = (BufferFlags.all)): readonly (ColorAttachment | \"NONE\")[] {\n        const activeBuffers = buffers; // & this.drawBuffersMask;\n        return [\n            activeBuffers & BufferFlags.color ? \"COLOR_ATTACHMENT0\" : \"NONE\",\n            activeBuffers & BufferFlags.pick ? \"COLOR_ATTACHMENT1\" : \"NONE\",\n        ] as const;\n    }\n\n    //* @internal */\n    updateUniformBuffer(uniformBuffer: WebGLBuffer, proxy: UniformsProxy) {\n        if (!proxy.dirtyRange.isEmpty) {\n            const { begin, end } = proxy.dirtyRange;\n            glUpdateBuffer(this.gl, { kind: \"UNIFORM_BUFFER\", srcData: proxy.buffer, targetBuffer: uniformBuffer, srcElementOffset: begin, dstByteOffset: begin, byteSize: end - begin });\n            proxy.dirtyRange.clear();\n        }\n    }\n\n    //* @internal */\n    updateIBLTextures(params: { readonly diffuse: TextureParamsCubeUncompressed, readonly specular: TextureParamsCubeUncompressedMipMapped } | null) {\n        const { iblResourceBin } = this;\n        iblResourceBin.deleteAll();\n        if (params) {\n            const { diffuse, specular } = params;\n            this.iblTextures = {\n                diffuse: iblResourceBin.createTexture(diffuse),\n                specular: iblResourceBin.createTexture(specular),\n                numMipMaps: typeof specular.mipMaps == \"number\" ? specular.mipMaps : specular.mipMaps.length,\n                default: false,\n            };\n        } else {\n            this.iblTextures = {\n                diffuse: iblResourceBin.createTexture(this.defaultIBLTextureParams),\n                specular: iblResourceBin.createTexture(this.defaultIBLTextureParams),\n                numMipMaps: 1,\n                default: true,\n            };\n        }\n    }\n\n    //* @internal */\n    hasStateChanged(state: Partial<DerivedRenderState>) {\n        const { prevState } = this;\n        let changed = false;\n        // do a shallow reference comparison of root properties\n        for (const prop in state) {\n            const p = prop as keyof RenderState;\n            if (!prevState || prevState[p] !== state[p]) {\n                changed = true;\n                break;\n            }\n        }\n        return changed;\n    }\n\n    //* @internal */\n    resourceBin(name: string) {\n        return ResourceBin[\"create\"](this.gl, name, this.resourceBins);\n    }\n\n    //* @internal */\n    makeProgramAsync(resourceBin: ResourceBin, params: AsyncProgramParams) {\n        const { gl, commonChunk } = this;\n        const { vertexShader, fragmentShader } = params;\n        const header = { commonChunk, ...params.header } as const; // inject common shader code here, if not defined in params.\n        const programAsync = resourceBin.createProgramAsync({ header, vertexShader, fragmentShader });\n        const { program } = programAsync;\n\n        // do pre-link bindings here\n        const { attributes, transformFeedback, uniformBufferBlocks, textureUniforms } = params;\n        if (attributes) {\n            let i = 0;\n            for (const name of attributes) {\n                gl.bindAttribLocation(program, i++, name);\n            }\n        }\n        if (transformFeedback) {\n            const { varyings, bufferMode } = transformFeedback;\n            gl.transformFeedbackVaryings(program, varyings, gl[bufferMode]);\n        }\n\n        return new Promise<WebGLProgram>((resolve, reject) => {\n            // do post-link bindings here\n            function postLink() {\n                gl.useProgram(program);\n\n                if (uniformBufferBlocks) {\n                    let idx = 0;\n                    for (const name of uniformBufferBlocks) {\n                        if (name) {\n                            const blockIndex = gl.getUniformBlockIndex(program, name);\n                            if (blockIndex != gl.INVALID_INDEX) {\n                                gl.uniformBlockBinding(program, blockIndex, idx);\n                            } else {\n                                console.warn(`Shader has no uniform block named: ${name}!`);\n                            }\n                        }\n                        idx++;\n                    }\n                }\n\n                if (textureUniforms) {\n                    let i = 0;\n                    for (const name of textureUniforms) {\n                        const location = gl.getUniformLocation(program, name);\n                        gl.uniform1i(location, i++);\n                    }\n                }\n\n                gl.useProgram(null);\n                resolve(program);\n            }\n            this.asyncPrograms.push({ ...programAsync, resolve: postLink, reject });\n        });\n    }\n\n    private resetRenderStatistics() {\n        const { statistics } = this;\n        statistics.points = 0;\n        statistics.lines = 0;\n        statistics.triangles = 0;\n        statistics.drawCalls = 0;\n    }\n\n    //* @internal */\n    protected addRenderStatistics(stats: DrawStatistics, drawCalls = 1) {\n        const { statistics } = this;\n        statistics.points += stats.points;\n        statistics.lines += stats.lines;\n        statistics.triangles += stats.triangles;\n        statistics.drawCalls += drawCalls;\n    }\n\n    //* @internal */\n    protected contextLost() {\n        const { modules } = this;\n        if (modules) {\n            for (const module of modules) {\n                module?.contextLost();\n            }\n        }\n    }\n\n    //* @internal */\n    emulateLostContext(value: \"lose\" | \"restore\") {\n        const ext = glExtensions(this.gl).loseContext;\n        if (ext) {\n            if (value == \"lose\") {\n                ext.loseContext();\n            } else {\n                ext.restoreContext();\n            }\n        }\n    }\n\n    public poll() {\n        this.buffers?.pollPickFence();\n        this.pollTimers();\n    }\n\n    private beginTimer(): Timer {\n        const timer = glCreateTimer(this.gl, false);\n        this.activeTimers.add(timer);\n        timer.begin();\n        return timer;\n    }\n\n    private pollTimers() {\n        const { activeTimers } = this;\n        for (const timer of [...activeTimers]) {\n            if (timer.poll()) {\n                activeTimers.delete(timer);\n                timer.dispose();\n            }\n        }\n    }\n\n    public static nextFrame(context: RenderContext | undefined): Promise<number> {\n        return new Promise<number>((resolve) => {\n            requestAnimationFrame((time) => {\n                if (context) {\n                    const { prevFrame } = context;\n                    if (prevFrame) {\n                        prevFrame.resolve(time - prevFrame.time);\n                        context.prevFrame = undefined;\n                    }\n                    context.currentFrameTime = time;\n                }\n                resolve(time);\n            });\n        });\n    }\n\n    public async render(state: RenderState) {\n        if (!this.modules) {\n            throw new Error(\"Context has not been initialized!\");\n        }\n        const beginTime = performance.now();\n        const { gl, canvas, prevState } = this;\n        this.changed = false;\n        this.pickBuffersValid = false;\n\n        this.resetRenderStatistics();\n\n        const drawTimer = this.beginTimer();\n\n        const { MAX_SAMPLES } = glLimits(gl);\n        const effectiveSamplesMSAA = Math.max(1, Math.min(MAX_SAMPLES, Math.min(this.deviceProfile.limits.maxSamples, state.output.samplesMSAA)));\n\n        // handle resizes\n        let resized = false;\n        const { output } = state;\n        if (this.hasStateChanged({ output })) {\n            const { width, height } = output;\n            console.assert(Number.isInteger(width) && Number.isInteger(height));\n            canvas.width = width;\n            canvas.height = height;\n            resized = true;\n            this.changed = true;\n            this.buffers?.dispose();\n            this.buffers = new RenderBuffers(gl, width, height, effectiveSamplesMSAA, this.resourceBin(\"FrameBuffers\"));\n        }\n\n        type Mutable<T> = { -readonly [P in keyof T]: T[P] };\n        const derivedState = state as Mutable<DerivedRenderState>;\n        derivedState.effectiveSamplesMSAA = effectiveSamplesMSAA;\n        if (resized || state.camera !== prevState?.camera) {\n            const snapDist = 1024; // make local space roughly within 1KM of camera\n            const dist = Math.max(...vec3.sub(vec3.create(), state.camera.position, this.localSpaceTranslation).map(c => Math.abs(c)));\n            // don't change localspace unless camera is far enough away. we want to avoid flipping back and forth across snap boundaries.\n            if (dist >= snapDist) {\n                function snap(v: number) {\n                    return Math.round(v / snapDist) * snapDist;\n                }\n                this.localSpaceTranslation = vec3.fromValues(...(state.camera.position.map(v => snap(v)) as [number, number, number]))\n            }\n\n            derivedState.localSpaceTranslation = this.localSpaceTranslation; // update the object reference to indicate that values have changed\n            derivedState.matrices = matricesFromRenderState(state);\n            derivedState.viewFrustum = createViewFrustum(state, derivedState.matrices);\n        }\n        this.updateCameraUniforms(derivedState);\n        this.updateClippingUniforms(derivedState);\n        this.updateOutlinesUniforms(derivedState);\n\n        // update internal state\n        this.isOrtho = derivedState.camera.kind == \"orthographic\";\n        mat4.copy(this.viewClipMatrix, derivedState.matrices.getMatrix(CoordSpace.View, CoordSpace.Clip));\n        mat4.copy(this.viewWorldMatrix, derivedState.matrices.getMatrix(CoordSpace.View, CoordSpace.World));\n        mat3.copy(this.viewWorldMatrixNormal, derivedState.matrices.getMatrixNormal(CoordSpace.View, CoordSpace.World));\n\n        // update modules from state\n        if (!this.pause) {\n            for (const module of this.modules) {\n                module?.update(derivedState);\n            }\n        }\n\n        // link any updates programs asynchronously here\n        this.linkAsyncPrograms();\n\n        // pick frame buffer and clear z-buffer\n        const { width, height } = canvas;\n        const { buffers } = this;\n        buffers.readBuffersNeedUpdate = true;\n        const frameBufferName = effectiveSamplesMSAA > 1 ? \"colorMSAA\" : \"color\";\n        const frameBuffer = buffers.frameBuffers[frameBufferName];\n        buffers.invalidate(frameBufferName, BufferFlags.all);\n        glState(gl, { viewport: { width, height }, frameBuffer });\n        glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 });\n\n        // apply module render z-buffer pre-pass\n        if (this.usePrepass) {\n            for (const module of this.modules) {\n                if (module && module.prepass) {\n                    glState(gl, {\n                        viewport: { width, height },\n                        frameBuffer,\n                        drawBuffers: [],\n                        // colorMask: [false, false, false, false],\n                    });\n                    module.prepass(derivedState);\n                    // reset gl state\n                    glState(gl, null);\n                }\n            }\n        }\n\n        // render modules\n        for (const module of this.modules) {\n            if (module) {\n                glState(gl, {\n                    viewport: { width, height },\n                    frameBuffer,\n                    drawBuffers: this.drawBuffers(BufferFlags.color),\n                    sample: { alphaToCoverage: effectiveSamplesMSAA > 1 },\n                });\n                module.render(derivedState);\n                // reset gl state\n                glState(gl, null);\n            }\n        }\n\n        drawTimer.end();\n\n        // invalidate color and depth buffers only (we may need pick buffers for picking)\n        this.buffers.invalidate(\"colorMSAA\", BufferFlags.color | BufferFlags.depth);\n        this.buffers.invalidate(\"color\", BufferFlags.color | BufferFlags.depth);\n        this.prevState = derivedState;\n        const endTime = performance.now();\n\n        const intervalPromise = new Promise<number>((resolve) => {\n            this.prevFrame = { time: this.currentFrameTime, resolve };\n        });\n\n        const stats = { ...this.statistics, bufferBytes: 0, textureBytes: 0 };\n        for (const bin of this.resourceBins) {\n            for (const { kind, byteSize } of bin.resourceInfo) {\n                if (kind == \"Buffer\" || kind == \"Renderbuffer\") {\n                    stats.bufferBytes += byteSize!;\n                }\n                if (kind == \"Texture\") {\n                    stats.textureBytes += byteSize!;\n                }\n            }\n        }\n\n        const [gpuDrawTime, frameInterval] = await Promise.all([drawTimer.promise, intervalPromise]);\n\n        return {\n            cpuTime: {\n                draw: endTime - beginTime,\n            },\n            gpuTime: {\n                draw: gpuDrawTime,\n            },\n            frameInterval,\n            ...stats\n        } as const;\n    }\n\n    //* @internal */\n    renderPickBuffers() {\n        if (!this.pickBuffersValid) {\n            if (!this.modules) {\n                throw new Error(\"Context has not been initialized!\");\n            }\n            const { gl, width, height, buffers, prevState } = this;\n            if (!prevState) {\n                throw new Error(\"render() was not called!\"); // we assume render() has been called first\n            }\n\n            const stateParams: StateParams = {\n                viewport: { width, height },\n                frameBuffer: buffers.frameBuffers.pick,\n                drawBuffers: this.drawBuffers(BufferFlags.pick),\n                depth: { test: true, writeMask: true },\n            };\n            glState(gl, stateParams);\n            glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 }); // we need to clear (again) since depth might be different for pick and color renders and we're also not using MSAA depth buffer.\n            // glClear(gl, { kind: \"COLOR\", drawBuffer: 1, type: \"Float\", color: [Number.POSITIVE_INFINITY, 0, 0, 0] });\n            glClear(gl, { kind: \"COLOR\", drawBuffer: 1, type: \"Uint\", color: [0xffffffff, 0x0000_0000, 0x0000_0000, 0x7f80_0000] }); // 0xffff is bit-encoding for Float16.nan. (https://en.wikipedia.org/wiki/Half-precision_floating-point_format), 0x7f80_0000 is Float32.+inf\n\n            for (const module of this.modules) {\n                if (module) {\n                    glState(gl, stateParams);\n                    module.pick?.(prevState);\n                    // reset gl state\n                    glState(gl, null);\n                }\n            }\n\n            if (prevState.tonemapping.mode != TonemappingMode.color) {\n                // update debug display\n                const tonemapModule = this.modules?.find(m => m.module.kind == \"tonemap\");\n                glState(gl, { viewport: { width, height } });\n                tonemapModule?.render(prevState);\n                // reset gl state\n                glState(gl, null);\n            }\n            this.pickBuffersValid = true;\n        }\n    }\n\n    //* @internal */\n    *getLinearDepths(pick: Uint32Array): IterableIterator<number> {\n        const floats = new Float32Array(pick.buffer);\n        for (let i = 3; i < pick.length; i += 4) {\n            yield floats[i];\n        }\n    }\n\n    private updateCameraUniforms(state: DerivedRenderState) {\n        const { cameraUniformsData, localSpaceTranslation } = this;\n        const { output, camera, matrices } = state;\n        const { values } = cameraUniformsData;\n        const worldViewMatrix = matrices.getMatrix(CoordSpace.World, CoordSpace.View);\n        const viewWorldMatrix = matrices.getMatrix(CoordSpace.View, CoordSpace.World);\n        const worldLocalMatrix = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), localSpaceTranslation));\n        const localWorldMatrix = mat4.fromTranslation(mat4.create(), localSpaceTranslation);\n        values.clipViewMatrix = matrices.getMatrix(CoordSpace.Clip, CoordSpace.View);\n        values.viewClipMatrix = matrices.getMatrix(CoordSpace.View, CoordSpace.Clip);\n        values.viewClipMatrix = matrices.getMatrix(CoordSpace.View, CoordSpace.Clip);\n        values.localViewMatrix = mat4.multiply(mat4.create(), worldViewMatrix, localWorldMatrix);\n        values.viewLocalMatrix = mat4.multiply(mat4.create(), worldLocalMatrix, viewWorldMatrix,);\n        values.localViewMatrixNormal = matrices.getMatrixNormal(CoordSpace.World, CoordSpace.View);\n        values.viewLocalMatrixNormal = matrices.getMatrixNormal(CoordSpace.View, CoordSpace.World);\n        values.windowSize = [output.width, output.height];\n        values.near = camera.near;\n        this.updateUniformBuffer(this.cameraUniforms, this.cameraUniformsData);\n    }\n\n    private updateClippingUniforms(state: DerivedRenderState) {\n        const { clipping, matrices } = state;\n        if (this.hasStateChanged({ clipping, matrices })) {\n            const { clippingUniforms, clippingUniformsData } = this;\n            const { values } = clippingUniformsData;\n            const { enabled, mode, planes } = clipping;\n            // transform clipping planes into view space\n            const normal = vec3.create();\n            const position = vec3.create();\n            const matrix = matrices.getMatrix(CoordSpace.World, CoordSpace.View);\n            const matrixNormal = matrices.getMatrixNormal(CoordSpace.World, CoordSpace.View);\n            mat4.getTranslation(position, matrix);\n            for (let i = 0; i < planes.length; i++) {\n                const { normalOffset } = planes[i];\n                const [x, y, z, offset] = normalOffset;\n                vec3.set(normal, x, y, z);\n                vec3.transformMat3(normal, normal, matrixNormal);\n                const distance = offset + vec3.dot(position, normal);\n                const plane = vec4.fromValues(normal[0], normal[1], normal[2], -distance);\n                const idx = i as 0 | 1 | 2 | 3 | 4 | 5;\n                values[`planes.${idx}` as const] = plane;\n            }\n            values[\"numPlanes\"] = enabled ? planes.length : 0;\n            values[\"mode\"] = mode;\n            this.updateUniformBuffer(clippingUniforms, clippingUniformsData);\n        }\n    }\n\n    private updateOutlinesUniforms(state: DerivedRenderState) {\n        const { outlines, matrices } = state;\n        if (this.hasStateChanged({ outlines, matrices })) {\n            const { outlineUniforms, outlinesUniformsData } = this;\n            const { color, plane } = outlines;\n            // transform outline plane into local space\n            const [x, y, z, offset] = plane;\n            const normal = vec3.fromValues(x, y, z);\n            const distance = offset - vec3.dot(this.localSpaceTranslation, normal);\n            // const margin = 0.001; // add a tiny margin so that these lines aren't clipped by the clipping plane itself\n            const planeLS = vec4.fromValues(normal[0], normal[1], normal[2], -distance);\n            // compute plane projection matrices\n            // const localPlaneMatrix = othoNormalBasisMatrixFromPlane(planeLS);\n            // const planeLocalMatrix = mat4.invert(mat4.create(), localPlaneMatrix);\n            const planeLocalMatrix = othoNormalBasisMatrixFromPlane(planeLS);\n            const localPlaneMatrix = mat4.invert(mat4.create(), planeLocalMatrix);\n            // set uniform values\n            const { values } = outlinesUniformsData;\n            values.planeLocalMatrix = planeLocalMatrix;\n            values.localPlaneMatrix = localPlaneMatrix;\n            values.color = color;\n            this.updateUniformBuffer(outlineUniforms, outlinesUniformsData);\n        }\n    }\n\n    private extractPick(pickBuffer: Uint32Array, x: number, y: number, sampleDiscRadius: number, pickCameraPlane: boolean) {\n        const { canvas, wasm, width, height } = this;\n        const rect = canvas.getBoundingClientRect(); // dim in css pixels\n        const cssWidth = rect.width;\n        const cssHeight = rect.height;\n        // convert to pixel coords\n        const px = Math.min(Math.max(0, Math.round(x / cssWidth * width)), width);\n        const py = Math.min(Math.max(0, Math.round((1 - (y + 0.5) / cssHeight) * height)), height);\n\n        const floats = new Float32Array(pickBuffer.buffer);\n\n        // fetch sample rectangle from read buffers\n        const r = Math.ceil(sampleDiscRadius);\n        const r2 = sampleDiscRadius * sampleDiscRadius;\n        let x0 = px - r;\n        let x1 = px + r + 1;\n        let y0 = py - r;\n        let y1 = py + r + 1;\n        if (x0 < 0) x0 = 0;\n        if (x1 > width) x1 = width;\n        if (y0 < 0) y0 = 0;\n        if (y1 > height) y1 = height;\n        const samples: PickSample[] = [];\n        const { isOrtho, viewClipMatrix, viewWorldMatrix, viewWorldMatrixNormal } = this;\n        const f16Max = 65504;\n\n        for (let iy = y0; iy < y1; iy++) {\n            const dy = iy - py;\n            for (let ix = x0; ix < x1; ix++) {\n                const dx = ix - px;\n                if (dx * dx + dy * dy > r2)\n                    continue; // filter out samples that lie outside sample disc radius\n                const buffOffs = ix + iy * width;\n                const objectId = pickBuffer[buffOffs * 4];\n                if (objectId != 0xffffffff) {\n                    const depth = pickCameraPlane ? 0 : floats[buffOffs * 4 + 3];\n                    const [nx16, ny16, nz16, deviation16] = new Uint16Array(pickBuffer.buffer, buffOffs * 16 + 4, 4);\n                    const nx = wasm.float32(nx16);\n                    const ny = wasm.float32(ny16);\n                    const nz = wasm.float32(nz16);\n                    const dev32 = wasm.float32(deviation16);\n                    const deviation = Math.abs(dev32) < f16Max ? dev32 : undefined;\n\n                    // compute normal\n                    // compute clip space x,y coords\n                    const xCS = ((ix + 0.5) / width) * 2 - 1;\n                    const yCS = ((iy + 0.5) / height) * 2 - 1;\n\n                    // compute view space position and normal\n                    const scale = isOrtho ? 1 : depth;\n                    const posVS = vec3.fromValues((xCS / viewClipMatrix[0]) * scale, (yCS / viewClipMatrix[5]) * scale, -depth);\n\n                    // convert into world space.\n                    const position = vec3.transformMat4(vec3.create(), posVS, viewWorldMatrix);\n                    const normal = vec3.fromValues(nx, ny, nz);\n                    vec3.normalize(normal, normal);\n\n                    const sample = { x: ix - px, y: iy - py, position, normal, objectId, deviation, depth } as const;\n                    samples.push(sample);\n                }\n            }\n        }\n        return samples;\n    }\n\n    async pick(x: number, y: number, options?: PickOptions): Promise<PickSample[]> {\n        const sampleDiscRadius = options?.sampleDiscRadius ?? 0;\n        const callAsync = options?.async ?? true;\n        const pickCameraPlane = options?.pickCameraPlane ?? false;\n        if (sampleDiscRadius < 0)\n            return [];\n        this.renderPickBuffers();\n        const pickBufferPromise = this.buffers.pickBuffers();\n        if (callAsync) {\n            this.currentPick = (await pickBufferPromise).pick;\n        } else {\n            pickBufferPromise.then(({ pick }) => { this.currentPick = pick });\n        }\n        const { currentPick, width, height } = this;\n        if (currentPick === undefined || width * height * 4 != currentPick.length) {\n            return [];\n        }\n        return this.extractPick(currentPick, x, y, sampleDiscRadius, pickCameraPlane);\n    }\n}\n\nfunction isPromise<T>(promise: T | Promise<T>): promise is Promise<T> {\n    return !!promise && typeof Reflect.get(promise, \"then\") === \"function\";\n}\n\nexport interface PickSample {\n    // relative x/y pixel (not css pixel) coordinate from pick center.\n    readonly x: number;\n    readonly y: number;\n    // position and normals are in world space.\n    readonly position: ReadonlyVec3;\n    readonly normal: ReadonlyVec3;\n    readonly normalVS?: ReadonlyVec3;\n    readonly objectId: number;\n    readonly deviation?: number;\n    readonly depth: number;\n    readonly isEdge?: boolean;\n};\n\nexport interface PickOptions {\n    readonly sampleDiscRadius?: number,\n    readonly async?: boolean;\n    readonly pickCameraPlane?: boolean;\n}\n\nexport interface AsyncProgramParams {\n    readonly header?: Partial<ShaderHeaderParams>;\n    readonly vertexShader: string;\n    readonly fragmentShader?: string;\n    // pre-link bindings\n    readonly attributes?: readonly string[]; // The names of the vertex attributes to be bound using gl.bindAttribLocation().\n    readonly uniformBufferBlocks?: readonly string[]; // The names of the shader uniform blocks, which will be bound to the index in which the name appears in this array using gl.uniformBlockBinding().\n    // post-link bindings\n    readonly textureUniforms?: readonly string[]; // Texture uniforms will be bound to the index in which they appear in the name array.\n    readonly transformFeedback?: {\n        readonly bufferMode: \"INTERLEAVED_ATTRIBS\" | \"SEPARATE_ATTRIBS\";\n        readonly varyings: readonly string[];\n    };\n}\n\ninterface AsyncProgramInfo {\n    readonly program: WebGLProgram;\n    readonly vertex: WebGLShader;\n    readonly fragment: WebGLShader;\n    readonly resolve: () => void;\n    readonly reject: (reason: any) => void;\n}\n\nexport type RenderStatistics = Awaited<ReturnType<RenderContext[\"render\"]>>;", "import wasmCode from \"./float16.wasm\";\n\nexport interface Instance {\n    float32(f16: number): number;\n    float16(f32: number): number;\n}\n\n// from https://gist.github.com/zhuker/b4bd1fb306c7b04975b712c37c4c4075\nexport async function float16Instance() {\n    const { instance } = await WebAssembly.instantiate(wasmCode);\n    return instance.exports as unknown as Instance;\n}\n\n", "import { float16Instance } from \"./float16\";\n\nexport async function wasmInstance() {\n    const float16 = await float16Instance();\n    // other modules here...\n    const instance = { ...float16 };\n    return instance;\n}\n\nexport type WasmInstance = Awaited<ReturnType<typeof wasmInstance>>;", "import type { CubeImages, TextureParams } from \"webgl2\";\nimport { GL } from \"webgl2/constants\";\n\nconst identifier = new Uint8Array([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A]);\nconst HEADER_LEN = 12 + (13 * 4); // identifier + header elements (not including key value meta-data pairs)\n\nconst textureDataType = {\n    [GL.UNSIGNED_BYTE]: \"UNSIGNED_BYTE\",\n    [GL.UNSIGNED_SHORT_5_6_5]: \"UNSIGNED_SHORT_5_6_5\",\n    [GL.UNSIGNED_SHORT_4_4_4_4]: \"UNSIGNED_SHORT_4_4_4_4\",\n    [GL.UNSIGNED_SHORT_5_5_5_1]: \"UNSIGNED_SHORT_5_5_5_1\",\n    [GL.HALF_FLOAT]: \"HALF_FLOAT\",\n    // [GL.HALF_FLOAT_OES]: \"HALF_FLOAT_OES\",\n    [GL.FLOAT]: \"FLOAT\",\n    [GL.UNSIGNED_SHORT]: \"UNSIGNED_SHORT\",\n    [GL.UNSIGNED_INT]: \"UNSIGNED_INT\",\n    [GL.UNSIGNED_INT_24_8]: \"UNSIGNED_INT_24_8\",\n    [GL.BYTE]: \"BYTE\",\n    [GL.SHORT]: \"SHORT\",\n    [GL.INT]: \"INT\",\n    // [GL.FLOAT_32_UNSIGNED_INT_24_8_REV]: \"FLOAT_32_UNSIGNED_INT_24_8_REV\",\n    [GL.UNSIGNED_INT_5_9_9_9_REV]: \"UNSIGNED_INT_5_9_9_9_REV\",\n    [GL.UNSIGNED_INT_2_10_10_10_REV]: \"UNSIGNED_INT_2_10_10_10_REV\",\n    [GL.UNSIGNED_INT_10F_11F_11F_REV]: \"UNSIGNED_INT_10F_11F_11F_REV\",\n} as const;\ntype TextureDataType = keyof typeof textureDataType;\n\nconst textureFormatBase = {\n    [GL.RGB]: \"RGB\",\n    [GL.RGBA]: \"RGBA\",\n    [GL.ALPHA]: \"ALPHA\",\n    [GL.LUMINANCE]: \"LUMINANCE\",\n    [GL.LUMINANCE_ALPHA]: \"LUMINANCE_ALPHA\",\n    [GL.DEPTH_COMPONENT]: \"DEPTH_COMPONENT\",\n    [GL.DEPTH_STENCIL]: \"DEPTH_STENCIL\",\n    [GL.SRGB_EXT]: \"SRGB_EXT\",\n    [GL.SRGB_ALPHA_EXT]: \"SRGB_ALPHA_EXT\",\n    [GL.RED]: \"RED\",\n    [GL.RG]: \"RG\",\n    [GL.RED_INTEGER]: \"RED_INTEGER\",\n    [GL.RG_INTEGER]: \"RG_INTEGER\",\n    [GL.RGB_INTEGER]: \"RGB_INTEGER\",\n    [GL.RGBA_INTEGER]: \"RGBA_INTEGER\",\n} as const;\ntype TextureFormatBase = keyof typeof textureFormatBase;\n\nconst textureFormatUncompressed = {\n    [GL.R8]: \"R8\",\n    [GL.R8_SNORM]: \"R8_SNORM\",\n    [GL.RG8]: \"RG8\",\n    [GL.RG8_SNORM]: \"RG8_SNORM\",\n    [GL.RGB8]: \"RGB8\",\n    [GL.RGB8_SNORM]: \"RGB8_SNORM\",\n    [GL.RGB565]: \"RGB565\",\n    [GL.RGBA4]: \"RGBA4\",\n    [GL.RGB5_A1]: \"RGB5_A1\",\n    [GL.RGBA8]: \"RGBA8\",\n    [GL.RGBA8_SNORM]: \"RGBA8_SNORM\",\n    [GL.RGB10_A2]: \"RGB10_A2\",\n    [GL.RGB10_A2UI]: \"RGB10_A2UI\",\n    [GL.SRGB8]: \"SRGB8\",\n    [GL.SRGB8_ALPHA8]: \"SRGB8_ALPHA8\",\n    [GL.R16F]: \"R16F\",\n    [GL.RG16F]: \"RG16F\",\n    [GL.RGB16F]: \"RGB16F\",\n    [GL.RGBA16F]: \"RGBA16F\",\n    [GL.R32F]: \"R32F\",\n    [GL.RG32F]: \"RG32F\",\n    [GL.RGB32F]: \"RGB32F\",\n    [GL.RGBA32F]: \"RGBA32F\",\n    [GL.R11F_G11F_B10F]: \"R11F_G11F_B10F\",\n    [GL.RGB9_E5]: \"RGB9_E5\",\n    [GL.R8I]: \"R8I\",\n    [GL.R8UI]: \"R8UI\",\n    [GL.R16I]: \"R16I\",\n    [GL.R16UI]: \"R16UI\",\n    [GL.R32I]: \"R32I\",\n    [GL.R32UI]: \"R32UI\",\n    [GL.RG8I]: \"RG8I\",\n    [GL.RG8UI]: \"RG8UI\",\n    [GL.RG16I]: \"RG16I\",\n    [GL.RG16UI]: \"RG16UI\",\n    [GL.RG32I]: \"RG32I\",\n    [GL.RG32UI]: \"RG32UI\",\n    [GL.RGB8I]: \"RGB8I\",\n    [GL.RGB8UI]: \"RGB8UI\",\n    [GL.RGB16I]: \"RGB16I\",\n    [GL.RGB16UI]: \"RGB16UI\",\n    [GL.RGB32I]: \"RGB32I\",\n    [GL.RGB32UI]: \"RGB32UI\",\n    [GL.RGBA8I]: \"RGBA8I\",\n    [GL.RGBA8UI]: \"RGBA8UI\",\n    [GL.RGBA16I]: \"RGBA16I\",\n    [GL.RGBA16UI]: \"RGBA16UI\",\n    [GL.RGBA32I]: \"RGBA32I\",\n    [GL.RGBA32UI]: \"RGBA32UI\",\n    // [GL.SRGB8_ALPHA8_EXT]: \"SRGB8_ALPHA8_EXT\",\n} as const\ntype TextureFormatUncompressed = keyof typeof textureFormatUncompressed;\ntype TextureFormatUncompressedString = (typeof textureFormatUncompressed)[TextureFormatUncompressed]\n\nconst textureFormatCompressed = {\n    [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: \"COMPRESSED_RGB_S3TC_DXT1_EXT\",\n    [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: \"COMPRESSED_RGBA_S3TC_DXT1_EXT\",\n    [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: \"COMPRESSED_RGBA_S3TC_DXT3_EXT\",\n    [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: \"COMPRESSED_RGBA_S3TC_DXT5_EXT\",\n    [GL.COMPRESSED_R11_EAC]: \"COMPRESSED_R11_EAC\",\n    [GL.COMPRESSED_SIGNED_R11_EAC]: \"COMPRESSED_SIGNED_R11_EAC\",\n    [GL.COMPRESSED_RG11_EAC]: \"COMPRESSED_RG11_EAC\",\n    [GL.COMPRESSED_SIGNED_RG11_EAC]: \"COMPRESSED_SIGNED_RG11_EAC\",\n    [GL.COMPRESSED_RGB8_ETC2]: \"COMPRESSED_RGB8_ETC2\",\n    [GL.COMPRESSED_RGBA8_ETC2_EAC]: \"COMPRESSED_RGBA8_ETC2_EAC\",\n    [GL.COMPRESSED_SRGB8_ETC2]: \"COMPRESSED_SRGB8_ETC2\",\n    [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\",\n    [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\",\n    [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\",\n    [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\",\n    [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\",\n    [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\",\n    [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\",\n    [GL.COMPRESSED_RGB_ETC1_WEBGL]: \"COMPRESSED_RGB_ETC1_WEBGL\",\n    // [GL.COMPRESSED_RGB_ATC_WEBGL]: \"COMPRESSED_RGB_ATC_WEBGL\",\n    // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: \"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\",\n    // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: \"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\",\n} as const;\ntype TextureFormatCompressed = keyof typeof textureFormatCompressed;\n\nconst textureFormatInternal = {\n    ...textureFormatUncompressed,\n    ...textureFormatCompressed,\n    // [GL.DEPTH_COMPONENT16]: \"DEPTH_COMPONENT16\",\n    // [GL.DEPTH_COMPONENT24]: \"DEPTH_COMPONENT24\",\n    // [GL.DEPTH_COMPONENT32F]: \"DEPTH_COMPONENT32F\",\n    // [GL.DEPTH32F_STENCIL8]: \"DEPTH32F_STENCIL8\",\n} as const;\ntype TextureFormatInternal = keyof typeof textureFormatInternal;\n\nfunction parseHeader(ktx: Uint8Array) {\n    const idDataView = new DataView(ktx.buffer, ktx.byteOffset, 12);\n    for (let i = 0; i < identifier.length; i++) {\n        if (idDataView.getUint8(i) != identifier[i]) {\n            throw new Error(\"texture missing KTX identifier\");\n        }\n    }\n\n    // load the rest of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(ktx.buffer, 12 + ktx.byteOffset, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n\n    return {\n        glType: headerDataView.getUint32(1 * dataSize, littleEndian) as 0 | TextureDataType,// must be 0 for compressed textures\n        glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian), // must be 1 for compressed textures\n        glFormat: headerDataView.getUint32(3 * dataSize, littleEndian) as 0 | TextureFormatBase, // must be 0 for compressed textures\n        glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian) as TextureFormatInternal, // the value of arg passed to gl.texImage2D() or gl.compressedTexImage2D(,,x,,,,)\n        glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian) as TextureFormatBase, // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n        pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n        pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n        pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n        numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian), // used for texture arrays\n        numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian), // used for cubemap textures, should either be 1 or 6\n        numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian), // number of levels; disregard possibility of 0 for compressed textures\n        bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian), // the amount of space after the header for meta-data\n        littleEndian,\n    };\n}\n\ntype Header = ReturnType<typeof parseHeader>;\n\nfunction* getImages(header: Header, ktx: Uint8Array, littleEndian: boolean) {\n    const mips = Math.max(1, header.numberOfMipmapLevels);\n    const elements = Math.max(1, header.numberOfArrayElements);\n    const faces = header.numberOfFaces;\n    const depth = Math.max(1, header.pixelDepth);\n    let dataOffset = HEADER_LEN + header.bytesOfKeyValueData;\n    const imageSizeDenom = (faces == 6 && header.numberOfArrayElements == 0) ? 1 : elements * faces * depth;\n    const dataView = new DataView(ktx.buffer, ktx.byteOffset);\n\n    for (let mip = 0; mip < mips; mip++) {\n        const width = header.pixelWidth >> mip;\n        const height = header.pixelHeight >> mip;\n        const imageSize = dataView.getInt32(dataOffset, littleEndian);\n        dataOffset += 4;\n        const imageStride = imageSize / imageSizeDenom;\n        console.assert(imageStride % 4 == 0);\n        for (let element = 0; element < elements; element++) {\n            for (let face = 0; face < faces; face++) {\n                for (let z_slice = 0; z_slice < depth; z_slice++) {\n                    // const target = faces == 6 ? GL.TEXTURE_CUBE_MAP_POSITIVE_X + face : GL.TEXTURE_2D;\n                    const begin = dataOffset;\n                    dataOffset += imageStride;\n                    const end = dataOffset;\n                    const image = { mip, element, face, width, height, blobRange: [begin, end], buffer: ktx.subarray(begin, end) } as const;\n                    yield image;\n                }\n            }\n        }\n    }\n    console.assert(dataOffset == ktx.byteLength);\n}\n\nexport function parseKTX(ktx: Uint8Array): TextureParams {\n    const header = parseHeader(ktx);\n    const { littleEndian } = header;\n    const baseFormat = textureFormatBase[header.glBaseInternalFormat]; // we don't really need this here (but may be useful for debugging).\n    const isArray = header.numberOfArrayElements > 0;\n    const isCube = header.numberOfFaces == 6;\n    const is3D = header.pixelDepth > 0;\n    const hasMips = header.numberOfMipmapLevels > 1;\n    const numMips = Math.max(1, header.numberOfMipmapLevels);\n    const internalFormat = textureFormatInternal[header.glInternalFormat];\n    const kind = isArray ? \"TEXTURE_ARRAY\" : isCube ? \"TEXTURE_CUBE_MAP\" : is3D ? \"TEXTURE_3D\" : \"TEXTURE_2D\";\n    const type = header.glType ? textureDataType[header.glType] : undefined;\n    const dim = { width: header.pixelWidth, height: header.pixelHeight, ...(is3D ? { depth: header.pixelDepth } : undefined) };\n    let mips: CubeImages[] | BufferSource[] = undefined!;\n    if (isCube) {\n        const images = new Array(numMips).fill(null).map(_ => ([] as any[]));\n        for (const image of getImages(header, ktx, littleEndian)) {\n            images[image.mip][image.face] = image.buffer;\n        }\n        mips = images as unknown as CubeImages[];\n    } else {\n        mips = new Array<BufferSource>(numMips);\n        for (const image of getImages(header, ktx, littleEndian)) {\n            mips[image.mip] = image.buffer;\n        }\n    }\n    const imageData = hasMips ? { mipMaps: mips } as const : { image: mips[0] } as const;\n    return {\n        kind,\n        internalFormat,\n        type: type,\n        ...dim,\n        ...imageData,\n    } as TextureParams;\n    // throw new Error(\"UnsupportedKTX format!\");\n}\n", "import type { DerivedRenderState, RenderContext } from \"core3d\";\nimport { parseKTX } from \"core3d/ktx\";\nimport type { RenderModuleContext, RenderModule } from \"..\";\nimport { glUBOProxy, glClear, glDraw, glState } from \"webgl2\";\nimport { type TextureParams, type UniformTypes, type TextureParamsCubeUncompressed, type TextureParamsCubeUncompressedMipMapped } from \"webgl2\";\nimport vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\n\nexport class BackgroundModule implements RenderModule {\n    readonly kind = \"background\";\n    private abortController: AbortController | undefined;\n    url: string | undefined;\n    textureParams: {\n        readonly diffuse: TextureParamsCubeUncompressed;\n        readonly specular: TextureParamsCubeUncompressedMipMapped;\n        readonly skybox: TextureParamsCubeUncompressed;\n    } | undefined; // undefined means no change in textures\n\n    readonly uniforms = {\n        envBlurNormalized: \"float\",\n        mipCount: \"int\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    async withContext(context: RenderContext) {\n        const uniforms = this.createUniforms();\n        const resources = await this.createResources(context, uniforms);\n        return new BackgroundModuleContext(context, this, uniforms, resources);\n    }\n\n    createUniforms() {\n        return glUBOProxy(this.uniforms);\n    }\n\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\n        const bin = context.resourceBin(\"Background\");\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: uniformsProxy.buffer.byteLength });\n        const uniformBufferBlocks = [\"Camera\", \"Background\"];\n        const textureUniforms = [\"textures.skybox\", \"textures.ibl.specular\"];\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks, textureUniforms });\n        return { bin, uniforms, program } as const;\n    }\n\n    async downloadTextures(urlDir: string) {\n        if (this.abortController) {\n            this.abortController.abort();\n        }\n        const abortController = this.abortController = new AbortController();\n        const { signal } = abortController;\n        try {\n            const scriptUrl = (document.currentScript as HTMLScriptElement | null)?.src ?? import.meta.url;\n            const baseUrl = new URL(urlDir, scriptUrl);\n            const promises = [\n                download<TextureParamsCubeUncompressedMipMapped>(new URL(\"radiance.ktx\", baseUrl)),\n                download<TextureParamsCubeUncompressed>(new URL(\"irradiance.ktx\", baseUrl)),\n                download<TextureParamsCubeUncompressed>(new URL(\"background.ktx\", baseUrl)),\n            ] as const;\n            const [specular, diffuse, skybox] = await Promise.all(promises);\n            this.textureParams = { diffuse, specular, skybox } as const;\n        } finally {\n            this.abortController = undefined;\n        }\n\n        async function download<T extends TextureParams>(url: URL) {\n            const response = await fetch(url, { mode: \"cors\", signal });\n            if (response.ok) {\n                var ktxData = await response.arrayBuffer();\n                var params = parseKTX(new Uint8Array(ktxData));\n                return params as T;\n            } else {\n                throw new Error(`HTTP Error:${response.status} ${response.status}`);\n            }\n        }\n    }\n}\n\ntype Uniforms = ReturnType<BackgroundModule[\"createUniforms\"]>;\ntype Resources = Awaited<ReturnType<BackgroundModule[\"createResources\"]>>;\n\nclass BackgroundModuleContext implements RenderModuleContext {\n    skybox: WebGLTexture;\n\n    constructor(readonly context: RenderContext, readonly module: BackgroundModule, readonly uniforms: Uniforms, readonly resources: Resources) {\n        this.skybox = resources.bin.createTexture(context.defaultIBLTextureParams);\n    }\n\n    update(state: DerivedRenderState) {\n        const { context, resources, module, uniforms, skybox } = this;\n        const { bin } = resources;\n        const { background } = state;\n\n        if (context.hasStateChanged({ background })) {\n            uniforms.values.envBlurNormalized = background.blur ?? 0;\n            context.updateUniformBuffer(resources.uniforms, this.uniforms);\n            const { url } = state.background;\n            if (url) {\n                if (url != module.url) {\n                    module.downloadTextures(url).then(() => { context.changed = true; });\n                }\n            } else {\n                context.updateIBLTextures(null);\n                bin.delete(skybox);\n                this.skybox = bin.createTexture(context.defaultIBLTextureParams);\n            }\n            module.url = url;\n        }\n\n        if (module.textureParams) {\n            context.updateIBLTextures(module.textureParams);\n            bin.delete(skybox);\n            this.skybox = bin.createTexture(module.textureParams.skybox);\n            uniforms.values.mipCount = context.iblTextures.numMipMaps;\n            context.updateUniformBuffer(resources.uniforms, this.uniforms);\n            module.textureParams = undefined; // we already copied the pixels into texture, so we no longer need the original.\n        }\n    }\n\n    render(state: DerivedRenderState) {\n        const { context, resources, skybox } = this;\n        const { program, uniforms } = resources;\n        const { gl, cameraUniforms, samplerSingle, samplerMip } = context;\n\n        const clearColor = state.background.color ?? [0.33, 0.33, 0.33, 1];\n        if ((!state.background.color || state.background.url) && state.camera.kind != \"orthographic\") {\n            const { specular } = context.iblTextures;\n            glState(gl, {\n                program,\n                uniformBuffers: [cameraUniforms, uniforms],\n                textures: [\n                    { kind: \"TEXTURE_CUBE_MAP\", texture: skybox, sampler: samplerSingle },\n                    { kind: \"TEXTURE_CUBE_MAP\", texture: specular, sampler: samplerMip },\n                ],\n                depth: {\n                    test: false,\n                    writeMask: false,\n                },\n            });\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\n            context[\"addRenderStatistics\"](stats);\n        } else {\n            glClear(gl, { kind: \"COLOR\", drawBuffer: 0, color: clearColor });\n        }\n    }\n\n    contextLost() {\n        const { module } = this;\n        module.url = undefined; // force an envmap texture reload\n    }\n\n    dispose() {\n        this.contextLost();\n        this.resources.bin.dispose();\n    }\n}\n", "import type { DerivedRenderState, RenderContext } from \"core3d\";\nimport type { RenderModuleContext, RenderModule } from \"..\";\nimport { glUBOProxy, glDraw, glState, type UniformTypes } from \"webgl2\";\nimport vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\nimport { mat4, vec3 } from \"gl-matrix\";\n\nexport class GridModule implements RenderModule {\n    readonly kind = \"grid\";\n    readonly uniforms = {\n        origin: \"vec3\",\n        axisX: \"vec3\",\n        axisY: \"vec3\",\n        size1: \"float\",\n        size2: \"float\",\n        color1: \"vec3\",\n        color2: \"vec3\",\n        distance: \"float\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    async withContext(context: RenderContext) {\n        const uniforms = this.createUniforms();\n        const resources = await this.createResources(context, uniforms);\n        return new GridModuleContext(context, this, uniforms, resources);\n    }\n\n    createUniforms() {\n        return glUBOProxy(this.uniforms);\n    }\n\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\n        const bin = context.resourceBin(\"Grid\");\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniformsProxy.buffer });\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks: [\"Camera\", \"Grid\"] })\n        return { bin, uniforms, program } as const;\n    }\n}\n\ntype Uniforms = ReturnType<GridModule[\"createUniforms\"]>;\ntype Resources = Awaited<ReturnType<GridModule[\"createResources\"]>>;\n\nclass GridModuleContext implements RenderModuleContext {\n    constructor(readonly context: RenderContext, readonly module: GridModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\n\n    update(state: DerivedRenderState) {\n        const { context, resources } = this;\n        const { uniforms } = resources;\n        const { grid, localSpaceTranslation } = state;\n        if (context.hasStateChanged({ grid, localSpaceTranslation })) {\n            const { values } = this.uniforms;\n            const { axisX, axisY, origin } = grid;\n            const worldLocalMatrix = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), localSpaceTranslation));\n            values.origin = vec3.transformMat4(vec3.create(), origin, worldLocalMatrix);\n            values.axisX = axisX;\n            values.axisY = axisY;\n            values.color1 = grid.color1;\n            values.color2 = grid.color2;\n            values.size1 = grid.size1;\n            values.size2 = grid.size2;\n            values.distance = grid.distance;\n            context.updateUniformBuffer(uniforms, this.uniforms);\n        }\n    }\n\n    render(state: DerivedRenderState) {\n        const { context, resources } = this;\n        const { program, uniforms } = resources;\n        const { gl, cameraUniforms } = context;\n\n        if (state.grid.enabled) {\n            glState(gl, {\n                program,\n                uniformBuffers: [cameraUniforms, uniforms],\n                depth: {\n                    test: true,\n                    writeMask: false,\n                },\n                sample: {\n                    alphaToCoverage: false\n                },\n                blend: {\n                    enable: true,\n                    srcRGB: \"SRC_ALPHA\",\n                    dstRGB: \"ONE_MINUS_SRC_ALPHA\",\n                    srcAlpha: \"ZERO\",\n                    dstAlpha: \"ONE\",\n                },\n            });\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\n            context[\"addRenderStatistics\"](stats);\n        }\n    }\n\n    contextLost(): void {\n    }\n\n    dispose() {\n        this.contextLost();\n        this.resources.bin.dispose();\n    }\n}", "import render_vert from \"./render.vert\";\nimport render_frag from \"./render.frag\";\nimport line_vert from \"./line.vert\";\nimport line_frag from \"./line.frag\";\nimport intersect_vert from \"./intersect.vert\";\nimport debug_vert from \"./debug.vert\";\nimport debug_frag from \"./debug.frag\";\n\ntype Shaders = { readonly [P in string]: { readonly vertexShader: string; readonly fragmentShader?: string; } };\n\nexport const shaders = {\n    render: {\n        vertexShader: render_vert,\n        fragmentShader: render_frag,\n    },\n    line: {\n        vertexShader: line_vert,\n        fragmentShader: line_frag,\n    },\n    intersect: {\n        vertexShader: intersect_vert,\n    },\n    debug: {\n        vertexShader: debug_vert,\n        fragmentShader: debug_frag,\n    },\n} as const satisfies Shaders;\n", "import { glUpdateBuffer, type DrawParams, type VertexAttribute, type DrawParamsArraysMultiDraw, type DrawParamsElementsMultiDraw } from \"webgl2\";\nimport type { MaterialType, MeshDrawRange, MeshObjectRange, NodeGeometry, VertexAttributeData } from \"./worker\";\nimport { ResourceBin } from \"core3d/resource\";\n\nexport interface Mesh {\n    readonly materialType: MaterialType;\n    readonly vao: WebGLVertexArrayObject;\n    readonly vaoPosOnly: WebGLVertexArrayObject | null;\n    readonly vaoTriangles: WebGLVertexArrayObject | null;\n    readonly highlightVB: WebGLBuffer | null;\n    readonly numVertices: number;\n    readonly numTriangles: number;\n    readonly drawParams: DrawParams;\n    readonly drawRanges: readonly MeshDrawRange[];\n    readonly objectRanges: readonly MeshObjectRange[];\n    readonly baseColorTexture: WebGLTexture | null;\n}\n\nexport function* createMeshes(resourceBin: ResourceBin, geometry: NodeGeometry) {\n    const textures = geometry.textures.map(ti => {\n        if (ti) {\n            return resourceBin.createTexture(ti.params);\n        }\n    });\n\n    for (const subMesh of geometry.subMeshes) {\n        // if (subMesh.materialType == MaterialType.transparent)\n        //     continue;\n        const { vertexAttributes, vertexBuffers, indices, numVertices, numTriangles, drawRanges, objectRanges, materialType } = subMesh;\n        const buffers = vertexBuffers.map(vb => {\n            return resourceBin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData: vb });\n        })\n        const ib = typeof indices != \"number\" ? resourceBin.createBuffer({ kind: \"ELEMENT_ARRAY_BUFFER\", srcData: indices }) : undefined;\n        const count = typeof indices == \"number\" ? indices : indices.length;\n        const indexType = indices instanceof Uint16Array ? \"UNSIGNED_SHORT\" : \"UNSIGNED_INT\";\n        const { triangles, position, normal, material, objectId, texCoord, color, projectedPos, deviations, highlight } = vertexAttributes;\n        function convertAttrib(a: VertexAttributeData | null) {\n            return a ? { ...a, buffer: buffers[a.buffer] } as VertexAttribute : null;\n        }\n        const attributes = [position, normal, material, objectId, texCoord, color, projectedPos, deviations, highlight].map(convertAttrib);\n        const triangleAttributes = triangles ? triangles.map(convertAttrib) : null;\n\n        // // add extra highlight vertex buffer and attribute\n        // const highlightVB = resourceBin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: subMesh.numVertices });\n        // attributes.push({ kind: \"UNSIGNED_INT\", buffer: highlightVB, componentType: \"UNSIGNED_BYTE\" });\n        const highlightVB = buffers[highlight!.buffer];\n\n        const vao = resourceBin.createVertexArray({ attributes, indices: ib });\n        const vaoPosOnly = position.buffer != 0 ? resourceBin.createVertexArray({ attributes: [attributes[0]], indices: ib }) : null;\n        const vaoTriangles = triangleAttributes ? resourceBin.createVertexArray({ attributes: triangleAttributes }) : null;\n        resourceBin.subordinate(vao, ...buffers.filter(buf => buf != highlightVB));\n        if (ib) {\n            resourceBin.subordinate(vao, ib);\n        }\n\n        const drawParams: DrawParams = ib ?\n            { kind: \"elements\", mode: subMesh.primitiveType, indexType, count } :\n            { kind: \"arrays\", mode: subMesh.primitiveType, count };\n        const baseColorTextureIndex = subMesh.baseColorTexture as number;\n        const baseColorTexture = textures[baseColorTextureIndex] ?? null;\n        yield { vao, vaoPosOnly, vaoTriangles, highlightVB, drawParams, drawRanges, numVertices, numTriangles, objectRanges, materialType, baseColorTexture } as const satisfies Mesh;\n    }\n}\n\nexport function updateMeshHighlights(gl: WebGL2RenderingContext, mesh: Mesh, highlights: Uint8Array | undefined) {\n    const { highlightVB } = mesh;\n    if (highlightVB) {\n        const highlightBuffer = new Uint8Array(mesh.numVertices);\n        if (highlights) {\n            for (const { objectId, beginVertex, endVertex } of mesh.objectRanges) {\n                const highlight = highlights[objectId];\n                if (highlight) {\n                    highlightBuffer.fill(highlight, beginVertex, endVertex);\n                }\n            }\n        }\n        glUpdateBuffer(gl, { kind: \"ARRAY_BUFFER\", srcData: highlightBuffer, targetBuffer: highlightVB });\n    }\n}\n\nexport function deleteMesh(resourceBin: ResourceBin, mesh: Mesh) {\n    const { vao, vaoPosOnly, vaoTriangles, highlightVB, baseColorTexture } = mesh;\n    resourceBin.delete(vao, vaoPosOnly, vaoTriangles, highlightVB, baseColorTexture);\n}\n\nexport function getMultiDrawParams(mesh: Mesh, childMask: number): DrawParamsArraysMultiDraw | DrawParamsElementsMultiDraw | undefined {\n    // determine which draw ranges this parent node must render based on what children will render their own mesh\n    const drawRanges = mesh.drawRanges.filter(r => ((1 << r.childIndex) & childMask) != 0);\n    if (drawRanges.length == 0) {\n        return;\n    }\n    const offsetsList = new Int32Array(drawRanges.map(r => r.byteOffset));\n    const countsList = new Int32Array(drawRanges.map(r => r.count));\n    const drawCount = offsetsList.length;\n    const { drawParams } = mesh;\n    const { mode } = drawParams;\n    function isElements(params: DrawParams): params is DrawParamsElementsMultiDraw {\n        return \"indexType\" in params;\n    }\n    if (isElements(drawParams)) {\n        const { indexType } = drawParams;\n        return {\n            kind: \"elements_multidraw\",\n            mode,\n            drawCount,\n            indexType,\n            byteOffsets: offsetsList,\n            counts: countsList\n        };\n    } else {\n        return {\n            kind: \"arrays_multidraw\",\n            mode,\n            drawCount,\n            firstsList: offsetsList,\n            counts: countsList\n        };\n    }\n}\n\nexport function meshPrimitiveCount(mesh: Mesh, renderedChildMask: number) {\n    let numPrimitives = 0;\n    const primitiveType = mesh.drawParams.mode ?? \"TRIANGLES\";\n    for (const drawRange of mesh.drawRanges) {\n        const childMask = 1 << drawRange.childIndex;\n        if ((renderedChildMask & childMask) != 0) {\n            numPrimitives += calcNumPrimitives(drawRange.count, primitiveType);\n        }\n    }\n    return numPrimitives;\n}\n\nfunction calcNumPrimitives(vertexCount: number, primitiveType: string) {\n    let primitiveCount = 0;\n    switch (primitiveType) {\n        case \"TRIANGLES\":\n            primitiveCount = vertexCount / 3;\n            break;\n        case \"TRIANGLE_STRIP\":\n        case \"TRIANGLE_FAN\":\n            primitiveCount = vertexCount - 2; break;\n        case \"LINES\":\n            primitiveCount = vertexCount / 2; break;\n        case \"LINE_STRIP\":\n            primitiveCount = vertexCount - 1; break;\n        default:\n            primitiveCount = vertexCount;\n    }\n    return primitiveCount;\n}\n", "import { mat4, type ReadonlyVec3, type ReadonlyVec4, vec3, vec4 } from \"gl-matrix\";\nimport { glUBOProxy, glUpdateBuffer } from \"webgl2\";\nimport { CoordSpace, type DerivedRenderState, RenderContext, type RenderStateHighlightGroup } from \"core3d\";\nimport { createMeshes, deleteMesh, type Mesh, meshPrimitiveCount, updateMeshHighlights } from \"./mesh\";\nimport type { NodeData } from \"./worker\";\nimport { NodeLoader } from \"./loader\";\nimport { ResourceBin } from \"core3d/resource\";\n\nexport const enum Visibility {\n    undefined,\n    none,\n    partial,\n    full,\n};\n\nexport const enum NodeState {\n    collapsed,\n    requestDownload,\n    downloading,\n    ready,\n}\n\nexport const enum NodeGeometryKind {\n    terrain,\n    triangles,\n    lines,\n    points,\n    documents,\n};\n\nexport const enum NodeGeometryKindMask {\n    none = 0,\n    terrain = 1 << NodeGeometryKind.terrain,\n    triangles = 1 << NodeGeometryKind.triangles,\n    lines = 1 << NodeGeometryKind.lines,\n    points = 1 << NodeGeometryKind.points,\n    documents = 1 << NodeGeometryKind.documents,\n    all = terrain | triangles | lines | points | documents,\n};\n\nexport interface OctreeContext {\n    readonly renderContext: RenderContext;\n    readonly loader: NodeLoader;\n    readonly url: string | undefined;\n    readonly version: string;\n    readonly debug: boolean;\n    readonly localSpaceChanged: boolean;\n    readonly hidden: readonly boolean[]; // corresponds to NodeGeometryKind\n    readonly highlights: Uint8Array;\n}\n\nexport class OctreeNode {\n    readonly id: string;\n    readonly parent: OctreeNode | undefined;\n    readonly resourceBin: ResourceBin\n    readonly center: ReadonlyVec3;\n    readonly radius: number;\n    readonly size: number;\n    readonly children: OctreeNode[] = [];\n    readonly meshes: Mesh[] = [];\n    readonly uniformsData;\n    readonly geometryKind: NodeGeometryKind;\n    uniforms: WebGLBuffer | undefined;\n    private readonly center4: ReadonlyVec4;\n    private readonly corners: ReadonlyVec4[];\n    private hasValidModelLocalMatrix = false;\n    state = NodeState.collapsed;\n    download: { abort(): void } | undefined;\n    visibility = Visibility.undefined;\n    viewDistance = 0;\n    projectedSize = 0;\n    static readonly errorModifiers = {\n        [NodeGeometryKind.terrain]: .08,\n        [NodeGeometryKind.triangles]: 1,\n        [NodeGeometryKind.lines]: .5,\n        [NodeGeometryKind.points]: .15,\n        [NodeGeometryKind.documents]: .08,\n    };\n\n    constructor(readonly context: OctreeContext, readonly data: NodeData, parent: OctreeNode | NodeGeometryKind) {\n        const geometryKind = this.geometryKind = typeof parent == \"object\" ? parent.geometryKind : parent;\n        this.parent = typeof parent == \"object\" ? parent : undefined;\n        // create uniform buffer\n        const { sphere, box } = data.bounds;\n        const { center, radius } = sphere;\n        this.id = data.id;\n        this.resourceBin = context.renderContext.resourceBin(\"Node\");\n        this.center = center;\n        this.radius = radius;\n        this.center4 = vec4.fromValues(center[0], center[1], center[2], 1);\n        const [x0, y0, z0] = box.min;\n        const [x1, y1, z1] = box.max;\n        this.corners = [\n            vec4.fromValues(x0, y0, z0, 1),\n            vec4.fromValues(x1, y0, z0, 1),\n            vec4.fromValues(x0, y1, z0, 1),\n            vec4.fromValues(x1, y1, z0, 1),\n            vec4.fromValues(x0, y0, z1, 1),\n            vec4.fromValues(x1, y0, z1, 1),\n            vec4.fromValues(x0, y1, z1, 1),\n            vec4.fromValues(x1, y1, z1, 1),\n        ];\n\n\n        const errorModifier = OctreeNode.errorModifiers[geometryKind];\n\n        // const toleranceScale = 128; // an approximate scale for tolerance to projected pixels\n        // this.size = Math.pow(2, data.tolerance) * toleranceScale;\n        this.size = Math.max(box.max[0] - box.min[0], Math.max(box.max[1] - box.min[1], box.max[2] - box.min[2])) * 4 * errorModifier;\n        // this.size = data.nodeSize * errorModifier;\n        this.uniformsData = glUBOProxy({\n            modelLocalMatrix: \"mat4\",\n            tolerance: \"float\",\n            debugColor: \"vec4\",\n            min: \"vec3\",\n            max: \"vec3\",\n        });\n        this.uniformsData.values.tolerance = Math.pow(2, data.tolerance);\n\n    }\n\n    dispose() {\n        const { meshes, uniforms, children, resourceBin } = this;\n        for (const mesh of meshes) {\n            deleteMesh(resourceBin, mesh);\n        }\n        if (uniforms) {\n            resourceBin.delete(uniforms);\n            this.uniforms = undefined;\n        }\n        console.assert(resourceBin.size == 0);\n        resourceBin.dispose();\n        for (const child of children) {\n            child.dispose();\n        }\n        meshes.length = 0;\n        children.length = 0;\n        this.download?.abort();\n        this.download = undefined;\n        this.state = NodeState.collapsed;\n    }\n\n    get isRoot() {\n        return !this.parent;\n    }\n\n    get path() {\n        return this.id;\n    }\n\n    get isSplit() {\n        return this.state != NodeState.collapsed;\n    }\n\n    get hasGeometry() {\n        return this.meshes.length > 0 || this.uniforms != undefined;\n    }\n\n    get renderedChildMask() {\n        let { childMask } = this.data;\n        for (const child of this.children) {\n            if (child.hasGeometry) {\n                childMask &= ~(1 << child.data.childIndex);\n            }\n        }\n        return childMask;\n    }\n\n    shouldSplit(projectedSizeSplitThreshold: number): boolean {\n        const { visibility, projectedSize, context, geometryKind } = this;\n        const hidden = context.hidden[geometryKind ?? -1] ?? false;\n        return !hidden && (this.isRoot || (visibility != Visibility.none && projectedSize > projectedSizeSplitThreshold));\n    }\n\n    intersectsPlane(plane: ReadonlyVec4) {\n        const { center4, radius, corners } = this;\n        const distance = vec4.dot(plane, center4);\n        if (Math.abs(distance) > radius) {\n            return false;\n        }\n        let side = 0;\n        for (const corner of corners) {\n            const distance = vec4.dot(plane, corner);\n            const distSgn = Math.sign(distance);\n            if (side && distSgn != side) {\n                return true;\n            }\n            if (distSgn) {\n                side = distSgn;\n            }\n        }\n        return false;\n    }\n\n    private computeVisibility(state: DerivedRenderState): Visibility {\n        const { center4, radius, corners } = this;\n        let fullyInside = true;\n        let fullyOutside = false;\n        const { planes } = state.viewFrustum;\n        for (const plane of planes) {\n            const distance = vec4.dot(plane, center4);\n            if (distance > radius) {\n                fullyOutside = true;\n                fullyInside = false;\n                break;\n            } else if (distance > -radius)\n                fullyInside = false;\n        }\n        if (fullyInside === fullyOutside) {\n            // check against corders of bounding box\n            fullyOutside = true;\n            fullyInside = true;\n            for (const corner of corners) {\n                for (const plane of planes) {\n                    const distance = vec4.dot(plane, corner);\n                    if (distance > 0) {\n                        fullyInside = false;\n                    } else {\n                        fullyOutside = false;\n                    }\n                }\n            }\n        }\n        let visibility = Visibility.undefined;\n        if (fullyOutside) {\n            visibility = Visibility.none;\n        } else if (!fullyInside) {\n            visibility = Visibility.partial;\n        } else {\n            visibility = Visibility.full;\n        }\n        return visibility;\n    }\n\n    get renderedPrimitives() {\n        let numPrimitives = 0;\n        if (this.visibility != Visibility.none) {\n            const { renderedChildMask } = this;\n            if (renderedChildMask) {\n                for (const mesh of this.meshes) {\n                    numPrimitives += meshPrimitiveCount(mesh, renderedChildMask);\n                }\n            }\n        }\n        return numPrimitives;\n    }\n\n    update(state: DerivedRenderState, parentVisibility: Visibility = Visibility.partial) {\n        // update visibility\n        this.visibility = (parentVisibility == Visibility.partial) ? this.computeVisibility(state) : parentVisibility;\n\n        // update projected size\n        const { context, center4, visibility, radius, uniforms, data, uniformsData, children } = this;\n        const { camera, matrices, viewFrustum } = state;\n        const imagePlane = viewFrustum.image;\n        const projection = matrices.getMatrix(CoordSpace.View, CoordSpace.Clip);\n        const viewDistance = this.viewDistance = vec4.dot(imagePlane, center4);\n        if (visibility <= Visibility.none) {\n            this.projectedSize = 0;\n        } else if (camera.kind == \"pinhole\") {\n            const distance = Math.max(0.001, viewDistance - radius); // we subtract radius to get the projection size at the extremity nearest the camera\n            this.projectedSize = (this.size * projection[5]) / (-distance * projection[11]);\n            // const exp = 2; //Scale the prioritization of nodes that is closer to the camera.\n            // this.projectedSize = (this.size * projection[5]) / (-distance * Math.pow(-distance, exp) / Math.pow(10, exp) * projection[11]);\n        } else {\n            this.projectedSize = this.size * projection[5];\n        }\n\n        if (context.localSpaceChanged || !this.hasValidModelLocalMatrix) {\n            let { offset, scale } = data;\n            const [ox, oy, oz] = offset;\n            const [tx, ty, tz] = state.localSpaceTranslation;\n            const modelLocalMatrix = mat4.fromValues(\n                scale, 0, 0, 0,\n                0, scale, 0, 0,\n                0, 0, scale, 0,\n                ox - tx, oy - ty, oz - tz, 1\n            );\n            const { values } = this.uniformsData;\n            values.modelLocalMatrix = modelLocalMatrix;\n            if (uniforms) {\n                glUpdateBuffer(context.renderContext.gl, { kind: \"UNIFORM_BUFFER\", srcData: uniformsData.buffer, targetBuffer: uniforms });\n            }\n            this.hasValidModelLocalMatrix = true;\n        }\n\n        if (context.debug) {\n            let r = 0, g = 0, b = 0;\n            switch (visibility) {\n                case Visibility.partial: g = 0.25; break;\n                case Visibility.full: g = 1; break;\n            }\n            switch (this.state) {\n                case NodeState.downloading: r = 1; break;\n                case NodeState.ready: b = 1; break;\n            }\n            const worldLocalMatrix = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), state.localSpaceTranslation));\n            const { min, max } = data.bounds.box;\n            const { values } = uniformsData;\n            values.debugColor = vec4.fromValues(r, g, b, 1);\n            values.min = vec3.transformMat4(vec3.create(), min, worldLocalMatrix);\n            values.max = vec3.transformMat4(vec3.create(), max, worldLocalMatrix);\n            if (uniforms) {\n                glUpdateBuffer(context.renderContext.gl, { kind: \"UNIFORM_BUFFER\", srcData: uniformsData.buffer, targetBuffer: uniforms });\n            }\n        }\n\n        // recurse down the tree\n        for (const child of children) {\n            child.update(state, this.visibility);\n        }\n    }\n\n    async downloadNode() {\n        const { context, children, meshes, resourceBin } = this;\n        const { renderContext, loader, version } = context;\n        this.state = NodeState.downloading;\n        const payload = await loader.loadNode(this, version); // do actual downloading and parsing in worker\n        if (payload) {\n            const { childInfos, geometry } = payload;\n            for (const data of childInfos) {\n                const child = new OctreeNode(context, data, this);\n                children.push(child);\n            }\n            meshes.push(...createMeshes(resourceBin, geometry));\n            this.uniforms = resourceBin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: this.uniformsData.buffer.byteLength });\n            glUpdateBuffer(this.context.renderContext.gl, { kind: \"UNIFORM_BUFFER\", srcData: this.uniformsData.buffer, targetBuffer: this.uniforms });\n            renderContext.changed = true;\n            this.state = NodeState.ready;\n        } else {\n            this.state = NodeState.collapsed;\n        }\n    }\n\n    applyHighlights(highlights: Uint8Array | undefined) {\n        const { context, meshes } = this;\n        const { gl } = context.renderContext;\n        for (const mesh of meshes) {\n            updateMeshHighlights(gl, mesh, highlights);\n        }\n    }\n}\n", "import type { SceneConfig, RenderStateScene, DeviceProfile } from \".\";\nimport { OctreeNode, type OctreeContext, NodeState, NodeGeometryKind } from \"./modules/octree/node\";\nimport type { RootNodes } from \"./modules/octree\";\nimport { decodeBase64 } from \"./util\";\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\n\nexport async function downloadScene(url: string, abortController?: AbortController): Promise<RenderStateScene> {\n    if (!abortController)\n        abortController = new AbortController();\n    const { signal } = abortController;\n    const fullUrl = new URL(url);\n    fullUrl.pathname += \"scene.json\";\n    const config = (await download(fullUrl, \"json\", signal)) as SceneConfig;\n    console.assert(config.version == \"2.0\");\n    return { url: url.toString(), config } as const;\n}\n\nexport async function createSceneRootNodes(context: OctreeContext, config: SceneConfig, deviceProfile: DeviceProfile): Promise<RootNodes | undefined> {\n    const { buffer } = decodeBase64(config.root);\n    const { loader } = context;\n    const result = await loader.parseNode(buffer, \"\", deviceProfile, config.version);\n    if (!result)\n        return;\n    const { childInfos } = result;\n    const rootNodes: Mutable<RootNodes> = {};\n    let hasNodes = false;\n    for (const childInfo of childInfos) {\n        const geometryKind = childInfo.childIndex as NodeGeometryKind;\n        const child = new OctreeNode(context, childInfo, geometryKind);\n        rootNodes[childInfo.childIndex as keyof RootNodes] = child;\n        hasNodes = true;\n    }\n    return hasNodes ? rootNodes : undefined;\n}\n\nasync function download<T extends \"arrayBuffer\" | \"json\">(url: URL, kind: T, signal: AbortSignal) {\n    const response = await fetch(url, { mode: \"cors\", signal });\n    if (response.ok) {\n        return (await response[kind]()) as T extends \"arrayBuffer\" ? ArrayBuffer : SceneConfig;\n    } else {\n        throw new Error(`HTTP Error:${response.status} ${response.status}`);\n    }\n}\n", "import { BufferReader } from \"./util\";\nimport type { EnumArray, U8, U16, U32, I8, I16, I32, F16, F32, F64 } from \"./util\";\n\n// Type of GL render primitive.\nexport const enum PrimitiveType {\n    points = 0,\n    lines = 1,\n    line_loops = 2,\n    line_strip = 3,\n    triangles = 4,\n    triangle_strip = 5,\n    triangle_fan = 6,\n};\n\n// Bitwise flags for which vertex attributes will be used in geometry.\nexport const enum OptionalVertexAttribute {\n    normal = 1,\n    color = 2,\n    texCoord = 4,\n    projectedPos = 8,\n};\n\n// Type of material.\nexport const enum MaterialType {\n    opaque = 0,\n    opaqueDoubleSided = 1,\n    transparent = 2,\n    elevation = 3,\n};\n\n// Texture semantic/purpose.\nexport const enum TextureSemantic {\n    baseColor = 0,\n};\n\n// Hash bytes\nexport interface HashRange { readonly start: U32; readonly count: U32; };\n\n// Range into submesh projection.\nexport interface SubMeshProjectionRange { readonly start: U32; readonly count: U32; };\n\n// Mesh vertices\nexport interface VertexRange { readonly start: U32; readonly count: U32; };\n\n// Mesh vertex indices\nexport interface VertexIndexRange { readonly start: U32; readonly count: U32; };\n\n// Mesh Textures\nexport interface TextureInfoRange { readonly start: U8; readonly count: U8; };\n\n// Range into texture pixel blob.\nexport interface PixelRange { readonly start: U32; readonly count: U32; };\n\n// Information about child nodes.\nexport interface ChildInfo {\n    readonly length: number;\n    readonly hash: HashRange; // Byte range into Hash bytes array. The hash, formatted as hex, is used for the filename of the child node.\n    readonly childIndex: U8;\n    readonly childMask: U32; // Set of bits (max 32) for which child indices are referenced by geometry.\n    readonly tolerance: I8; // A power of two exponent describing the error tolerance of this node, which is used to determine LOD.\n    readonly totalByteSize: U32; // # uncompressed bytes total for child binary file.\n    readonly offset: Double3; // Model -> world space translation vector.\n    readonly scale: F32; // Model -> world space uniform scale factor (from unit [-1,1] vectors).\n    readonly bounds: Bounds; // Bounding volume (in model space).\n    readonly subMeshes: SubMeshProjectionRange;\n};\n\nexport interface Double3 {\n    readonly length: number;\n    readonly x: F64;\n    readonly y: F64;\n    readonly z: F64;\n};\n\n// Node bounding volume.\nexport interface Bounds {\n    readonly length: number;\n    readonly box: AABB;\n    readonly sphere: BoundingSphere;\n};\n\n// Axis aligned bounding box.\nexport interface AABB {\n    readonly length: number;\n    readonly min: Float3;\n    readonly max: Float3;\n};\n\nexport interface Float3 {\n    readonly length: number;\n    readonly x: F32;\n    readonly y: F32;\n    readonly z: F32;\n};\n\n// Bounding sphere.\nexport interface BoundingSphere {\n    readonly length: number;\n    readonly origo: Float3;\n    readonly radius: F32;\n};\n\n// Information about child sub meshes used to predict cost before loading.\nexport interface SubMeshProjection {\n    readonly length: number;\n    readonly objectId: U32;\n    readonly primitiveType: EnumArray<PrimitiveType>;\n    readonly attributes: EnumArray<OptionalVertexAttribute>;\n    readonly numDeviations: U8; // # of deviation vertex attributes (0-3)\n    readonly numIndices: U32; // zero if no index buffer\n    readonly numVertices: U32;\n    readonly numTextureBytes: U32;\n};\n\n// Groups of 3D primitives with common attributes. These can further be split up to form e.g. 64K chunks for 16 bit indexing, i.e. there can be many submeshes with the same attributes. Groups are ordered by child, object and material indices.\nexport interface SubMesh {\n    readonly length: number;\n    readonly childIndex: U8;\n    readonly objectId: U32;\n    readonly materialIndex: U8;\n    readonly primitiveType: EnumArray<PrimitiveType>;\n    readonly materialType: EnumArray<MaterialType>;\n    readonly attributes: EnumArray<OptionalVertexAttribute>;\n    readonly numDeviations: U8; // # of deviation vertex attributes (0-4)\n    readonly vertices: VertexRange; // Vertices are local to each sub-mesh.\n    readonly primitiveVertexIndices: VertexIndexRange; // Triangle vertex index triplets, or line index pairs, if any, are 16-bit and relative to the local vertex range.\n    readonly edgeVertexIndices: VertexIndexRange; // \"Hard\" edge vertex index pairs, if any, are 16-bit and relative to the local vertex range.\n    readonly cornerVertexIndices: VertexIndexRange; // \"Hard\" corner vertex indices, if any, are 16-bit and relative to the local vertex range.\n    readonly textures: TextureInfoRange;\n};\n\nexport interface TextureInfo {\n    readonly length: number;\n    readonly semantic: EnumArray<TextureSemantic>;\n    readonly transform: Float3x3;\n    readonly pixelRange: PixelRange;\n};\n\n// 3x3 row major matrix\nexport interface Float3x3 {\n    readonly length: number;\n    readonly e00: F32;\n    readonly e01: F32;\n    readonly e02: F32;\n    readonly e10: F32;\n    readonly e11: F32;\n    readonly e12: F32;\n    readonly e20: F32;\n    readonly e21: F32;\n    readonly e22: F32;\n};\n\n// Mesh vertices\nexport interface Vertex {\n    readonly length: number;\n    readonly position: Int16_3;\n    readonly normal?: Int8_3;\n    readonly color?: RGBA_U8;\n    readonly texCoord?: Half2;\n    readonly projectedPos?: Int16_3;\n    readonly deviations: Deviations;\n};\n\nexport interface Int16_3 {\n    readonly length: number;\n    readonly x: I16;\n    readonly y: I16;\n    readonly z: I16;\n};\n\nexport interface Int8_3 {\n    readonly length: number;\n    readonly x: I8;\n    readonly y: I8;\n    readonly z: I8;\n};\n\nexport interface RGBA_U8 {\n    readonly length: number;\n    readonly red: U8;\n    readonly green: U8;\n    readonly blue: U8;\n    readonly alpha: U8;\n};\n\nexport interface Half2 {\n    readonly length: number;\n    readonly x: F16;\n    readonly y: F16;\n};\n\n// Mesh deviations vertex attributes\nexport interface Deviations {\n    readonly length: number;\n    readonly a?: F16;\n    readonly b?: F16;\n    readonly c?: F16;\n    readonly d?: F16;\n};\n\n// Mesh triangles\nexport interface Triangle {\n    readonly length: number;\n    readonly topologyFlags?: U8; // Bits [0-2] are edge flags (vertex pairs ab, bc, ca), and [3-5] are corner flags. True = edge/corner is a \"hard\", or true topological feature and should be rendered and/or snapped to.\n};\n\nexport function readSchema(r: BufferReader) {\n    const sizes = r.u32(9);\n    const flags = r.u8(10);\n    const schema = {\n        childInfo: {\n            length: sizes[0],\n            hash: { start: r.u32(sizes[0]), count: r.u32(sizes[0]) } as HashRange,\n            childIndex: r.u8(sizes[0]),\n            childMask: r.u32(sizes[0]),\n            tolerance: r.i8(sizes[0]),\n            totalByteSize: r.u32(sizes[0]),\n            offset: {\n                length: sizes[0],\n                x: r.f64(sizes[0]),\n                y: r.f64(sizes[0]),\n                z: r.f64(sizes[0]),\n            } as Double3,\n            scale: r.f32(sizes[0]),\n            bounds: {\n                length: sizes[0],\n                box: {\n                    length: sizes[0],\n                    min: {\n                        length: sizes[0],\n                        x: r.f32(sizes[0]),\n                        y: r.f32(sizes[0]),\n                        z: r.f32(sizes[0]),\n                    } as Float3,\n                    max: {\n                        length: sizes[0],\n                        x: r.f32(sizes[0]),\n                        y: r.f32(sizes[0]),\n                        z: r.f32(sizes[0]),\n                    } as Float3,\n                } as AABB,\n                sphere: {\n                    length: sizes[0],\n                    origo: {\n                        length: sizes[0],\n                        x: r.f32(sizes[0]),\n                        y: r.f32(sizes[0]),\n                        z: r.f32(sizes[0]),\n                    } as Float3,\n                    radius: r.f32(sizes[0]),\n                } as BoundingSphere,\n            } as Bounds,\n            subMeshes: { start: r.u32(sizes[0]), count: r.u32(sizes[0]) } as SubMeshProjectionRange,\n        } as ChildInfo,\n        hashBytes: r.u8(sizes[1]),\n        subMeshProjection: {\n            length: sizes[2],\n            objectId: r.u32(sizes[2]),\n            primitiveType: r.u8(sizes[2]) as EnumArray<PrimitiveType>,\n            attributes: r.u8(sizes[2]) as EnumArray<OptionalVertexAttribute>,\n            numDeviations: r.u8(sizes[2]),\n            numIndices: r.u32(sizes[2]),\n            numVertices: r.u32(sizes[2]),\n            numTextureBytes: r.u32(sizes[2]),\n        } as SubMeshProjection,\n        subMesh: {\n            length: sizes[3],\n            childIndex: r.u8(sizes[3]),\n            objectId: r.u32(sizes[3]),\n            materialIndex: r.u8(sizes[3]),\n            primitiveType: r.u8(sizes[3]) as EnumArray<PrimitiveType>,\n            materialType: r.u8(sizes[3]) as EnumArray<MaterialType>,\n            attributes: r.u8(sizes[3]) as EnumArray<OptionalVertexAttribute>,\n            numDeviations: r.u8(sizes[3]),\n            vertices: { start: r.u32(sizes[3]), count: r.u32(sizes[3]) } as VertexRange,\n            primitiveVertexIndices: { start: r.u32(sizes[3]), count: r.u32(sizes[3]) } as VertexIndexRange,\n            edgeVertexIndices: { start: r.u32(sizes[3]), count: r.u32(sizes[3]) } as VertexIndexRange,\n            cornerVertexIndices: { start: r.u32(sizes[3]), count: r.u32(sizes[3]) } as VertexIndexRange,\n            textures: { start: r.u8(sizes[3]), count: r.u8(sizes[3]) } as TextureInfoRange,\n        } as SubMesh,\n        textureInfo: {\n            length: sizes[4],\n            semantic: r.u8(sizes[4]) as EnumArray<TextureSemantic>,\n            transform: {\n                length: sizes[4],\n                e00: r.f32(sizes[4]),\n                e01: r.f32(sizes[4]),\n                e02: r.f32(sizes[4]),\n                e10: r.f32(sizes[4]),\n                e11: r.f32(sizes[4]),\n                e12: r.f32(sizes[4]),\n                e20: r.f32(sizes[4]),\n                e21: r.f32(sizes[4]),\n                e22: r.f32(sizes[4]),\n            } as Float3x3,\n            pixelRange: { start: r.u32(sizes[4]), count: r.u32(sizes[4]) } as PixelRange,\n        } as TextureInfo,\n        vertex: {\n            length: sizes[5],\n            position: {\n                length: sizes[5],\n                x: r.i16(sizes[5]),\n                y: r.i16(sizes[5]),\n                z: r.i16(sizes[5]),\n            } as Int16_3,\n            normal: !flags[0] ? undefined : {\n                length: sizes[5],\n                x: r.i8(sizes[5]),\n                y: r.i8(sizes[5]),\n                z: r.i8(sizes[5]),\n            } as Int8_3,\n            color: !flags[1] ? undefined : {\n                length: sizes[5],\n                red: r.u8(sizes[5]),\n                green: r.u8(sizes[5]),\n                blue: r.u8(sizes[5]),\n                alpha: r.u8(sizes[5]),\n            } as RGBA_U8,\n            texCoord: !flags[2] ? undefined : {\n                length: sizes[5],\n                x: r.f16(sizes[5]),\n                y: r.f16(sizes[5]),\n            } as Half2,\n            projectedPos: !flags[3] ? undefined : {\n                length: sizes[5],\n                x: r.i16(sizes[5]),\n                y: r.i16(sizes[5]),\n                z: r.i16(sizes[5]),\n            } as Int16_3,\n            deviations: {\n                length: sizes[5],\n                a: !flags[4] ? undefined : r.f16(sizes[5]),\n                b: !flags[5] ? undefined : r.f16(sizes[5]),\n                c: !flags[6] ? undefined : r.f16(sizes[5]),\n                d: !flags[7] ? undefined : r.f16(sizes[5]),\n            } as Deviations,\n        } as Vertex,\n        triangle: {\n            length: sizes[6],\n            topologyFlags: !flags[8] ? undefined : r.u8(sizes[6]),\n        } as Triangle,\n        vertexIndex: !flags[9] ? undefined : r.u16(sizes[7]),\n        texturePixels: r.u8(sizes[8]),\n    } as const;\n    console.assert(r.eof);\n    return schema;\n}\n\nexport type Schema = ReturnType<typeof readSchema>;\n", "export type U8 = Uint8Array;\nexport type U16 = Uint16Array;\nexport type U32 = Uint32Array;\nexport type I8 = Int8Array;\nexport type I16 = Int16Array;\nexport type I32 = Int32Array;\nexport type F16 = Uint16Array;\nexport type F32 = Float32Array;\nexport type F64 = Float64Array;\n\nexport type EnumArray<T> = { readonly [index: number]: T; };\n\ntype TypedArray = Uint8Array | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\nexport type Float16Array = Uint16Array;\nexport const Float16Array = Uint16Array;\n\nexport class BufferReader {\n    pos = 0;\n    private readonly _u8;\n    private readonly _u16;\n    private readonly _u32;\n    private readonly _i8;\n    private readonly _i16;\n    private readonly _i32;\n    private readonly _f16;\n    private readonly _f32;\n    private readonly _f64;\n\n    constructor(readonly buffer: ArrayBuffer) {\n        this._u8 = new Uint8Array(buffer, 0, Math.floor(buffer.byteLength / Uint8Array.BYTES_PER_ELEMENT));\n        this._u16 = new Uint16Array(buffer, 0, Math.floor(buffer.byteLength / Uint16Array.BYTES_PER_ELEMENT));\n        this._u32 = new Uint32Array(buffer, 0, Math.floor(buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT));\n        this._i8 = new Int8Array(buffer, 0, Math.floor(buffer.byteLength / Int8Array.BYTES_PER_ELEMENT));\n        this._i16 = new Int16Array(buffer, 0, Math.floor(buffer.byteLength / Int16Array.BYTES_PER_ELEMENT));\n        this._i32 = new Int32Array(buffer, 0, Math.floor(buffer.byteLength / Int32Array.BYTES_PER_ELEMENT));\n        this._f16 = new Uint16Array(buffer, 0, Math.floor(buffer.byteLength / Uint16Array.BYTES_PER_ELEMENT));\n        this._f32 = new Float32Array(buffer, 0, Math.floor(buffer.byteLength / Float32Array.BYTES_PER_ELEMENT));\n        this._f64 = new Float64Array(buffer, 0, Math.floor(buffer.byteLength / Float64Array.BYTES_PER_ELEMENT));\n    }\n\n    private read<T extends TypedArray>(ar: T, size: number): T {\n        if (size == 0)\n            return ar.subarray(0, 0) as T;\n        const align = ar.BYTES_PER_ELEMENT;\n        var padding = (align - 1) - ((this.pos + align - 1) % align);\n        console.assert(padding >= 0 && padding < align);\n        const begin = (this.pos + padding) / align;\n        const end = begin + size;\n        this.pos = end * ar.BYTES_PER_ELEMENT;\n        return ar.subarray(begin, end) as T;\n    }\n\n    get eof() {\n        return this.pos == this.buffer.byteLength;\n    }\n\n    u8(size: number) {\n        return this.read(this._u8, size);\n    }\n\n    u16(size: number) {\n        return this.read(this._u16, size);\n    }\n\n    u32(size: number) {\n        return this.read(this._u32, size);\n    }\n\n    i8(size: number) {\n        return this.read(this._i8, size);\n    }\n\n    i16(size: number) {\n        return this.read(this._i16, size);\n    }\n\n    i32(size: number) {\n        return this.read(this._i32, size);\n    }\n\n    f16(size: number) {\n        return this.read(this._f16, size);\n    }\n\n    f32(size: number) {\n        return this.read(this._f32, size);\n    }\n\n    f64(size: number) {\n        return this.read(this._f64, size);\n    }\n}\n", "import { type ReadonlyVec3, vec3 } from \"gl-matrix\";\nimport type { AABB, BoundingSphere } from \"core3d/state\";\nimport { type Double3, type Float3, MaterialType, OptionalVertexAttribute, PrimitiveType, readSchema, type Schema, type SubMeshProjection, TextureSemantic } from \"./schema_2_0\";\nimport { BufferReader, Float16Array } from \"./util\";\nimport type { ComponentType, ShaderAttributeType, TextureParams } from \"webgl2\";\nimport { parseKTX } from \"core3d/ktx\";\nimport type { Mutex } from \"../mutex\";\n\nexport interface MeshDrawRange {\n    readonly childIndex: number;\n    readonly byteOffset: number; // in bytes\n    readonly first: number; // # indices\n    readonly count: number; // # indices\n}\n\nexport interface MeshObjectRange {\n    readonly objectId: number;\n    readonly beginVertex: number;\n    readonly endVertex: number;\n}\n\nexport interface Highlights {\n    readonly indices: Uint8Array;\n    readonly mutex: Mutex;\n}\n\nconst primitiveTypeStrings = [\"POINTS\", \"LINES\", \"LINE_LOOP\", \"LINE_STRIP\", \"TRIANGLES\", \"TRIANGLE_STRIP\", \"TRIANGLE_FAN\"] as const;\nexport type PrimitiveTypeString = typeof primitiveTypeStrings[number];\n\nexport interface NodeBounds {\n    readonly box: AABB;\n    readonly sphere: BoundingSphere;\n};\n\n// node data contains everything needed to create a new node, except its geometry and textures\n// this data comes from the parent node and is used to determine visibility and whether to load node geometry or not\nexport interface NodeData {\n    readonly id: string;\n    readonly childIndex: number; // octant # (not mask, but index)\n    readonly childMask: number; // 32-bit mask for what child indices (octants) have geometry\n    readonly tolerance: number;\n    readonly byteSize: number; // uncompressed byte size of node file\n    readonly offset: ReadonlyVec3;\n    readonly scale: number;\n    readonly bounds: NodeBounds;\n    // readonly primitiveType: PrimitiveTypeString;\n    // Used to predict the cost of creating geometry, potentially with filtering. Note that this does not consider the cost of loading, which ideally is a streaming process with low memory footprint\n    readonly primitives: number;\n    readonly primitivesDelta: number; // # new primitives introduced compared to parent\n    readonly gpuBytes: number;\n}\n\nexport interface VertexAttributeData {\n    readonly kind: ShaderAttributeType;\n    readonly componentType: ComponentType;\n    readonly buffer: number; // index into buffer array\n    readonly componentCount: 1 | 2 | 3 | 4;\n    readonly normalized: boolean;\n    readonly byteStride: number;\n    readonly byteOffset?: number;\n};\n\nexport interface VertexAttributes {\n    readonly position: VertexAttributeData;\n    readonly normal: VertexAttributeData | null;\n    readonly material: VertexAttributeData | null;\n    readonly objectId: VertexAttributeData | null;\n    readonly texCoord: VertexAttributeData | null;\n    readonly color: VertexAttributeData | null;\n    readonly projectedPos: VertexAttributeData | null;\n    readonly deviations: VertexAttributeData | null;\n    readonly triangles: readonly [VertexAttributeData, VertexAttributeData, VertexAttributeData, VertexAttributeData] | null;\n    readonly highlight: VertexAttributeData | null;\n}\n\nexport interface NodeSubMesh {\n    readonly materialType: MaterialType;\n    readonly primitiveType: PrimitiveTypeString;\n    readonly vertexAttributes: VertexAttributes;\n    readonly numVertices: number;\n    readonly numTriangles: number;\n    readonly objectRanges: readonly MeshObjectRange[];\n    // either index range (if index buffer is defined) for use with drawElements(), or vertex range for use with drawArray()\n    readonly drawRanges: readonly MeshDrawRange[];\n    readonly vertexBuffers: readonly ArrayBuffer[];\n    readonly indices: Uint16Array | Uint32Array | number; // Index buffer, or # vertices of none\n    readonly baseColorTexture: number | undefined; // texture index\n}\n\nexport interface NodeTexture {\n    readonly semantic: TextureSemantic;\n    readonly transform: readonly number[]; // 3x3 matrix\n    readonly params: TextureParams;\n}\n\n// node geometry and textures\nexport interface NodeGeometry {\n    readonly subMeshes: readonly NodeSubMesh[];\n    readonly textures: readonly (NodeTexture | undefined)[];\n}\n\nfunction getVec3(v: Float3 | Double3, i: number) {\n    return vec3.fromValues(v.x[i], v.y[i], v.z[i]);\n}\n\ntype Range = readonly [begin: number, end: number];\ntype DeviationsCount = 0 | 1 | 2 | 3 | 4;\n\nfunction getRange(v: { readonly start: ArrayLike<number>, count: ArrayLike<number>; }, i: number): Range {\n    const begin = v.start[i];\n    const end = begin + v.count[i];\n    return [begin, end] as const;\n}\n\nfunction computePrimitiveCount(primitiveType: PrimitiveType, numIndices: number) {\n    switch (primitiveType) {\n        case PrimitiveType.points:\n            return numIndices;\n        case PrimitiveType.lines:\n            return numIndices / 2;\n        case PrimitiveType.line_loops:\n            return numIndices;\n        case PrimitiveType.line_strip:\n            return numIndices - 1;\n        case PrimitiveType.triangles:\n            return numIndices / 3;\n        case PrimitiveType.triangle_strip:\n            return numIndices - 2;\n        case PrimitiveType.triangle_fan:\n            return numIndices - 2;\n        default:\n            console.warn(`Unknown primitive type: ${primitiveType}!`);\n    }\n}\n\nfunction getVertexAttribs(deviations: number) {\n    return {\n        position: { type: Uint16Array, components: [\"x\", \"y\", \"z\"] },\n        normal: { type: Int8Array, components: [\"x\", \"y\", \"z\"] },\n        texCoord: { type: Float16Array, components: [\"x\", \"y\"] },\n        color: { type: Uint8Array, components: [\"red\", \"green\", \"blue\", \"alpha\"] },\n        projectedPos: { type: Uint16Array, components: [\"x\", \"y\", \"z\"] },\n        deviations: { type: Float16Array, components: [\"a\", \"b\", \"c\", \"d\"].slice(0, deviations) },\n        materialIndex: { type: Uint8Array },\n        objectId: { type: Uint32Array },\n    } as const;\n}\ntype VertexAttribs = ReturnType<typeof getVertexAttribs>;\ntype VertexAttribNames = keyof VertexAttribs;\ntype VertexAttrib = { readonly type: VertexAttribs[VertexAttribNames][\"type\"], readonly components?: readonly string[]; };\n\nfunction computeVertexOffsets(attribs: readonly VertexAttribNames[], deviations = 0) {\n    let offset = 0;\n    let offsets: any = {};\n    function alignOffset(alignment: number) {\n        const padding = alignment - 1 - (offset + alignment - 1) % alignment;\n        offset += padding; // pad offset to be memory aligned.\n    }\n    let maxAlign = 1;\n    const vertexAttribs = getVertexAttribs(deviations);\n    for (const attrib of attribs) {\n        const { type, components } = vertexAttribs[attrib] as VertexAttrib;\n        const count = components?.length ?? 1;\n        maxAlign = Math.max(maxAlign, type.BYTES_PER_ELEMENT);\n        alignOffset(type.BYTES_PER_ELEMENT);\n        offsets[attrib] = offset;\n        offset += type.BYTES_PER_ELEMENT * count;\n    }\n    alignOffset(maxAlign); // align stride to largest typed array\n    offsets.stride = offset;\n    return offsets as { readonly [P in VertexAttribNames]?: number; } & { readonly stride: number; };\n}\n\nfunction getVertexAttribNames(optionalAttributes: OptionalVertexAttribute, deviations: DeviationsCount, hasMaterials: boolean, hasObjectIds: boolean) {\n    const attribNames: VertexAttribNames[] = [\"position\"];\n    if (optionalAttributes & OptionalVertexAttribute.normal) attribNames.push(\"normal\");\n    if (optionalAttributes & OptionalVertexAttribute.texCoord) attribNames.push(\"texCoord\");\n    if (optionalAttributes & OptionalVertexAttribute.color) attribNames.push(\"color\");\n    if (optionalAttributes & OptionalVertexAttribute.projectedPos) attribNames.push(\"projectedPos\");\n    if (deviations > 0) attribNames.push(\"deviations\");\n    if (hasMaterials) {\n        attribNames.push(\"materialIndex\");\n    }\n    if (hasObjectIds) {\n        attribNames.push(\"objectId\");\n    }\n    return attribNames;\n}\n\nexport function aggregateSubMeshProjections(subMeshProjection: SubMeshProjection, range: Range, separatePositionBuffer: boolean, predicate?: (objectId: number) => boolean) {\n    let primitives = 0;\n    let totalTextureBytes = 0;\n    let totalNumIndices = 0;\n    let totalNumVertices = 0;\n    let totalNumVertexBytes = 0;\n\n    const [begin, end] = range;\n    for (let i = begin; i < end; i++) {\n        const objectId = subMeshProjection.objectId[i];\n        if (predicate?.(objectId) ?? true) {\n            const indices = subMeshProjection.numIndices[i];\n            const vertices = subMeshProjection.numVertices[i];\n            const textureBytes = subMeshProjection.numTextureBytes[i]; // TODO: adjust by device profile/resolution\n            const attributes = subMeshProjection.attributes[i];\n            const deviations = subMeshProjection.numDeviations[i] as DeviationsCount;\n            const primitiveType = subMeshProjection.primitiveType[i];\n            // we assume that textured nodes are terrain with no material index (but object_id?).\n            // TODO: state these values explicitly in binary format instead\n            const hasMaterials = textureBytes == 0;\n            const hasObjectIds = true;\n            const [pos, ...rest] = getVertexAttribNames(attributes, deviations, hasMaterials, hasObjectIds);\n            const numBytesPerVertex = separatePositionBuffer ?\n                computeVertexOffsets([pos]).stride + computeVertexOffsets(rest, deviations).stride :\n                computeVertexOffsets([pos, ...rest], deviations).stride;\n            primitives += computePrimitiveCount(primitiveType, indices ? indices : vertices) ?? 0;\n            totalNumIndices += indices;\n            totalNumVertices += vertices;\n            totalNumVertexBytes += vertices * numBytesPerVertex;\n            totalTextureBytes += textureBytes;\n        } else {\n            // debugger;\n        }\n    }\n    const idxStride = totalNumVertices < 0xffff ? 2 : 4;\n    const gpuBytes = totalTextureBytes + totalNumVertexBytes + totalNumIndices * idxStride;\n    return { primitives, gpuBytes } as const;\n}\n\nfunction toHex(bytes: Uint8Array) {\n    return Array.prototype.map.call(bytes, x => ('00' + x.toString(16).toUpperCase()).slice(-2)).join('');\n}\n\nexport function getChildren(parentId: string, schema: Schema, separatePositionBuffer: boolean, predicate?: (objectId: number) => boolean): NodeData[] {\n    const { childInfo, hashBytes } = schema;\n    const children: NodeData[] = [];\n\n\n    // compute parent/current mesh primitive counts per child partition\n    const parentPrimitiveCounts: number[] = [];\n\n    for (let i = 0; i < childInfo.length; i++) {\n        const childIndex = childInfo.childIndex[i];\n        const childMask = childInfo.childMask[i];\n        const [hashBegin, hashEnd] = getRange(childInfo.hash, i);\n        const hash = hashBytes.slice(hashBegin, hashEnd);\n        const id = toHex(hash); // parentId + childIndex.toString(32); // use radix 32 (0-9, a-v) encoding, which allows for max 32 children per node\n        const tolerance = childInfo.tolerance[i];\n        const byteSize = childInfo.totalByteSize[i];\n        const offset = getVec3(childInfo.offset, i);\n        const scale = childInfo.scale[i];\n        const bounds: NodeBounds = {\n            box: {\n                min: getVec3(childInfo.bounds.box.min, i),\n                max: getVec3(childInfo.bounds.box.max, i),\n            },\n            sphere: {\n                center: getVec3(childInfo.bounds.sphere.origo, i),\n                radius: childInfo.bounds.sphere.radius[i],\n            }\n        };\n        // offset bounds\n        const { sphere, box } = bounds;\n        vec3.add(sphere.center as vec3, sphere.center, offset);\n        vec3.add(box.min as vec3, box.min, offset);\n        vec3.add(box.max as vec3, box.max, offset);\n\n        const subMeshProjectionRange = getRange(childInfo.subMeshes, i);\n        const parentPrimitives = parentPrimitiveCounts[childIndex];\n        const { primitives, gpuBytes } = aggregateSubMeshProjections(schema.subMeshProjection, subMeshProjectionRange, separatePositionBuffer, predicate);\n        const primitivesDelta = primitives - (parentPrimitives ?? 0);\n        // console.assert(parentId == \"0\" || primitivesDelta >= 0, \"negative primitive delta\");\n        children.push({ id, childIndex, childMask, tolerance, byteSize, offset, scale, bounds, primitives, primitivesDelta, gpuBytes });\n    }\n    return children;\n}\n\nexport function* getSubMeshes(schema: Schema, predicate?: (objectId: number) => boolean) {\n    const { subMesh } = schema;\n    for (let i = 0; i < subMesh.length; i++) {\n        const objectId = subMesh.objectId[i];\n        if (predicate?.(objectId) ?? true) {\n            const childIndex = subMesh.childIndex[i];\n            const objectId = subMesh.objectId[i];\n            const materialIndex = subMesh.materialIndex[i];\n            const materialType = subMesh.materialType[i];\n            const primitiveType = subMesh.primitiveType[i];\n            const attributes = subMesh.attributes[i];\n            const deviations = subMesh.numDeviations[i] as DeviationsCount;\n            const vertexRange = getRange(subMesh.vertices, i);\n            const indexRange = getRange(subMesh.primitiveVertexIndices, i);\n            const textureRange = getRange(subMesh.textures, i);\n            yield { childIndex, objectId, materialIndex, materialType, primitiveType, attributes, deviations, vertexRange, indexRange, textureRange };\n        }\n    }\n}\ntype TypedArray = Uint8Array | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n// Candidates for wasm implementation?\nfunction copyToInterleavedArray<T extends TypedArray>(dst: T, src: T, byteOffset: number, byteStride: number, begin: number, end: number) {\n    const offset = byteOffset / dst.BYTES_PER_ELEMENT;\n    const stride = byteStride / dst.BYTES_PER_ELEMENT;\n    console.assert(Math.round(offset) == offset);\n    console.assert(Math.round(stride) == stride);\n    let j = offset;\n    for (let i = begin; i < end; i++) {\n        dst[j] = src[i];\n        j += stride;\n    }\n}\n\nfunction fillToInterleavedArray<T extends TypedArray>(dst: T, src: number, byteOffset: number, byteStride: number, begin: number, end: number) {\n    const offset = byteOffset / dst.BYTES_PER_ELEMENT;\n    const stride = byteStride / dst.BYTES_PER_ELEMENT;\n    console.assert(Math.round(offset) == offset);\n    console.assert(Math.round(stride) == stride);\n    let j = offset;\n    for (let i = begin; i < end; i++) {\n        dst[j] = src;\n        j += stride;\n    }\n}\n\nfunction getGeometry(schema: Schema, separatePositionBuffer: boolean, enableOutlines: boolean, highlights: Highlights, predicate?: (objectId: number) => boolean): NodeGeometry {\n    const { vertex, vertexIndex } = schema;\n\n    const filteredSubMeshes = [...getSubMeshes(schema, predicate)];\n\n    let subMeshes: NodeSubMesh[] = [];\n    const referencedTextures = new Set<number>();\n\n    // group submeshes into drawable meshes (with common attributes)\n    type Group = {\n        readonly materialType: number;\n        readonly primitiveType: number;\n        readonly attributes: number;\n        readonly deviations: DeviationsCount;\n        readonly subMeshIndices: number[];\n    };\n    const groups = new Map<string, Group>();\n    for (let i = 0; i < filteredSubMeshes.length; i++) {\n        const { materialType, primitiveType, attributes, deviations, childIndex } = filteredSubMeshes[i];\n        const key = `${materialType}_${primitiveType}_${attributes}_${deviations}_${childIndex}`;\n        let group = groups.get(key);\n        if (!group) {\n            group = { materialType, primitiveType, attributes, deviations, subMeshIndices: [] };\n            groups.set(key, group);\n        }\n        group.subMeshIndices.push(i);\n    }\n\n    // we don't want highlights to change during parsing, so we hold the lock for the entire file\n    highlights.mutex.lockSync();\n\n    // create drawable meshes\n    for (const { materialType, primitiveType, attributes, deviations, subMeshIndices } of groups.values()) {\n        if (subMeshIndices.length == 0)\n            continue;\n        const groupMeshes = subMeshIndices.map(i => filteredSubMeshes[i]);\n        const hasMaterials = groupMeshes.some(m => m.materialIndex != 0xff);\n        const hasObjectIds = groupMeshes.some(m => m.objectId != 0xffffffff);\n\n        const allAttribNames = getVertexAttribNames(attributes, deviations, hasMaterials, hasObjectIds);\n        const [posName, ...extraAttribNames] = allAttribNames; // pop off positions since we're potentially putting them in a separate buffer\n        const attribNames = separatePositionBuffer ? extraAttribNames : allAttribNames;\n        const positionStride = computeVertexOffsets([posName], deviations).stride;\n        const trianglePosStride = positionStride * 3;\n        const attribOffsets = computeVertexOffsets(attribNames, deviations);\n        const vertexStride = attribOffsets.stride;\n\n        const childIndices = [...new Set<number>(groupMeshes.map(sm => sm.childIndex))].sort();\n        let numVertices = 0;\n        let numIndices = 0;\n        let numTriangles = 0;\n        for (let i = 0; i < groupMeshes.length; i++) {\n            const sm = groupMeshes[i];\n            const vtxCnt = sm.vertexRange[1] - sm.vertexRange[0];\n            const idxCnt = sm.indexRange[1] - sm.indexRange[0];\n            numVertices += vtxCnt;\n            numIndices += idxCnt;\n            if (primitiveType == PrimitiveType.triangles) {\n                numTriangles += Math.round((idxCnt > 0 ? idxCnt : vtxCnt) / 3);\n            }\n        }\n        const vertexBuffer = new ArrayBuffer(numVertices * vertexStride);\n        let trianglePosBuffer: Int16Array | undefined;\n        let triangleObjectIdBuffer: Uint32Array | undefined;\n        if (enableOutlines && primitiveType == PrimitiveType.triangles) { // TODO: support triangle strips and fans too\n            trianglePosBuffer = new Int16Array(new ArrayBuffer(numTriangles * trianglePosStride));\n            triangleObjectIdBuffer = new Uint32Array(numTriangles);\n        }\n        const positionBuffer = separatePositionBuffer ? new ArrayBuffer(numVertices * positionStride) : undefined;\n        let indexBuffer: Uint32Array | Uint16Array | undefined;\n        if (vertexIndex) {\n            indexBuffer = new (numVertices < 0xffff ? Uint16Array : Uint32Array)(numIndices);\n        }\n        const highlightBuffer = new Uint8Array(numVertices);\n        let indexOffset = 0;\n        let vertexOffset = 0;\n        let trianglePosOffset = 0;\n        let triangleObjectIdOffset = 0;\n        let drawRanges: MeshDrawRange[] = [];\n        type Mutable<T> = { -readonly [P in keyof T]: T[P] };\n        const objectRanges: Mutable<MeshObjectRange>[] = [];\n\n        function enumerateBuffers<K extends string>(possibleBuffers: { readonly [P in K]: ArrayBuffer | undefined }) {\n            const buffers: ArrayBuffer[] = [];\n            const indices = {} as { readonly [P in K]: number };\n            for (const [key, value] of Object.entries(possibleBuffers)) {\n                const buffer = value as ArrayBuffer | undefined;\n                let index = -1;\n                if (buffer) {\n                    index = buffers.indexOf(buffer);\n                    if (index < 0) {\n                        index = buffers.length;\n                        buffers.push(buffer);\n                    }\n                }\n                Reflect.set(indices, key, index);\n            }\n            return [buffers, indices] as const;\n        }\n\n        const [vertexBuffers, bufIdx] = enumerateBuffers({\n            primary: vertexBuffer,\n            highlight: highlightBuffer?.buffer,\n            pos: positionBuffer,\n            triPos: trianglePosBuffer?.buffer,\n            triId: trianglePosBuffer?.buffer,\n        });\n\n        for (const childIndex of childIndices) {\n            const meshes = groupMeshes.filter(sm => sm.childIndex == childIndex);\n            if (meshes.length == 0)\n                continue;\n\n            const drawRangeBegin = indexBuffer ? indexOffset : vertexOffset;\n\n            for (const subMesh of meshes) {\n                const { vertexRange, indexRange, materialIndex, deviations, objectId } = subMesh;\n                const context = { materialIndex, objectId };\n                const [beginVtx, endVtx] = vertexRange;\n                const [beginIdx, endIdx] = indexRange;\n\n                // initialize vertex buffer\n                const vertexAttribs = getVertexAttribs(deviations);\n                for (const attribName of attribNames) {\n                    const { type, components } = vertexAttribs[attribName] as VertexAttrib;\n                    const dst = new type(vertexBuffer, vertexOffset * vertexStride);\n                    const count = components?.length ?? 1;\n                    for (var c = 0; c < count; c++) {\n                        const offs = attribOffsets[attribName]! + c * type.BYTES_PER_ELEMENT;\n                        if (attribName in vertex) {\n                            let src = Reflect.get(vertex, attribName) as typeof dst;\n                            if (components) {\n                                src = Reflect.get(src, components[c]);\n                            }\n                            copyToInterleavedArray(dst, src, offs, vertexStride, beginVtx, endVtx);\n                        } else {\n                            const src = Reflect.get(context, attribName) as number;\n                            fillToInterleavedArray(dst, src, offs, vertexStride, beginVtx, endVtx);\n                        }\n                    }\n                }\n\n                // initialize triangle vertex buffer for clipping intersection\n                if (trianglePosBuffer && triangleObjectIdBuffer) {\n                    const { x, y, z } = vertex.position;\n                    let numTriangles = 0;\n                    if (vertexIndex && indexBuffer) {\n                        numTriangles = (endIdx - beginIdx) / 3;\n                        for (let i = beginIdx; i < endIdx; i++) {\n                            // TODO: Add support for triangle strips and fans as well...\n                            const idx = vertexIndex[i] + beginVtx;\n                            trianglePosBuffer[trianglePosOffset++] = x[idx];\n                            trianglePosBuffer[trianglePosOffset++] = y[idx];\n                            trianglePosBuffer[trianglePosOffset++] = z[idx];\n                        }\n                    } else {\n                        numTriangles = (endVtx - beginVtx) / 3;\n                        for (let i = beginVtx; i < endVtx; i++) {\n                            const idx = i;\n                            trianglePosBuffer[trianglePosOffset++] = x[idx];\n                            trianglePosBuffer[trianglePosOffset++] = y[idx];\n                            trianglePosBuffer[trianglePosOffset++] = z[idx];\n                        }\n                    }\n                    triangleObjectIdBuffer.fill(objectId, triangleObjectIdOffset, triangleObjectIdOffset + numTriangles);\n                    triangleObjectIdOffset += numTriangles;\n                }\n\n                if (positionBuffer) {\n                    // initialize separate positions buffer\n                    const i16 = new Int16Array(positionBuffer, vertexOffset * positionStride);\n                    copyToInterleavedArray(i16, vertex.position.x, 0, positionStride, beginVtx, endVtx);\n                    copyToInterleavedArray(i16, vertex.position.y, 2, positionStride, beginVtx, endVtx);\n                    copyToInterleavedArray(i16, vertex.position.z, 4, positionStride, beginVtx, endVtx);\n                }\n\n                // initialize index buffer (if any)\n                if (vertexIndex && indexBuffer) {\n                    for (let i = beginIdx; i < endIdx; i++) {\n                        indexBuffer[indexOffset++] = vertexIndex[i] + vertexOffset;\n                    }\n                }\n\n                // initialize highlight buffer\n                const highlightIndex = highlights.indices[objectId] ?? 0;\n                if (highlightIndex) {\n                    highlightBuffer.fill(highlightIndex, vertexOffset, vertexOffset + (endVtx - beginVtx));\n                }\n\n                // update object ranges\n                const prev = objectRanges.length - 1;\n                const endVertex = vertexOffset + endVtx - beginVtx;\n                if (prev >= 0 && objectRanges[prev].objectId == objectId) {\n                    objectRanges[prev].endVertex = endVertex; // merge with previous entry\n                } else {\n                    objectRanges.push({ objectId, beginVertex: vertexOffset, endVertex });\n                }\n\n                vertexOffset += endVtx - beginVtx;\n            }\n\n            const drawRangeEnd = indexBuffer ? indexOffset : vertexOffset;\n            const byteOffset = drawRangeBegin * (indexBuffer ? indexBuffer.BYTES_PER_ELEMENT : vertexStride);\n            const count = drawRangeEnd - drawRangeBegin;\n            drawRanges.push({ childIndex, byteOffset, first: drawRangeBegin, count });\n        }\n\n        console.assert(vertexOffset == numVertices);\n        console.assert(indexOffset == numIndices);\n        console.assert(trianglePosOffset == (trianglePosBuffer?.length ?? 0));\n        console.assert(triangleObjectIdOffset == (triangleObjectIdBuffer?.length ?? 0));\n        const indices = indexBuffer ?? numVertices;\n\n        const [beginTexture, endTexture] = groupMeshes[0].textureRange;\n        let baseColorTexture: number | undefined;\n        if (endTexture > beginTexture) {\n            baseColorTexture = beginTexture;\n        }\n\n        if (baseColorTexture != undefined) {\n            referencedTextures.add(baseColorTexture);\n        }\n\n        const stride = vertexStride;\n        const deviationsKind = deviations == 0 || deviations == 1 ? \"FLOAT\" as const : `FLOAT_VEC${deviations}` as const;\n        const vertexAttributes = {\n            position: { kind: \"FLOAT_VEC4\", buffer: bufIdx.pos, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: attribOffsets[\"position\"], byteStride: separatePositionBuffer ? 0 : stride },\n            normal: (attributes & OptionalVertexAttribute.normal) != 0 ? { kind: \"FLOAT_VEC3\", buffer: bufIdx.primary, componentCount: 3, componentType: \"BYTE\", normalized: true, byteOffset: attribOffsets[\"normal\"], byteStride: stride } : null,\n            material: hasMaterials ? { kind: \"UNSIGNED_INT\", buffer: bufIdx.primary, componentCount: 1, componentType: \"UNSIGNED_BYTE\", normalized: false, byteOffset: attribOffsets[\"materialIndex\"], byteStride: stride } : null,\n            objectId: hasObjectIds ? { kind: \"UNSIGNED_INT\", buffer: bufIdx.primary, componentCount: 1, componentType: \"UNSIGNED_INT\", normalized: false, byteOffset: attribOffsets[\"objectId\"], byteStride: stride } : null,\n            texCoord: (attributes & OptionalVertexAttribute.texCoord) != 0 ? { kind: \"FLOAT_VEC2\", buffer: bufIdx.primary, componentCount: 2, componentType: \"HALF_FLOAT\", normalized: false, byteOffset: attribOffsets[\"texCoord\"], byteStride: stride } : null,\n            color: (attributes & OptionalVertexAttribute.color) != 0 ? { kind: \"FLOAT_VEC4\", buffer: bufIdx.primary, componentCount: 4, componentType: \"UNSIGNED_BYTE\", normalized: true, byteOffset: attribOffsets[\"color\"], byteStride: stride } : null,\n            projectedPos: (attributes & OptionalVertexAttribute.projectedPos) != 0 ? { kind: \"FLOAT_VEC4\", buffer: bufIdx.primary, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: attribOffsets[\"projectedPos\"], byteStride: stride } : null,\n            deviations: deviations != 0 ? { kind: deviationsKind, buffer: bufIdx.primary, componentCount: deviations, componentType: \"HALF_FLOAT\", normalized: false, byteOffset: attribOffsets[\"deviations\"], byteStride: stride } : null,\n            triangles: trianglePosBuffer ? [\n                { kind: \"FLOAT_VEC4\", buffer: bufIdx.triPos, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: 0, byteStride: 18 },\n                { kind: \"FLOAT_VEC4\", buffer: bufIdx.triPos, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: 6, byteStride: 18 },\n                { kind: \"FLOAT_VEC4\", buffer: bufIdx.triPos, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: 12, byteStride: 18 },\n                { kind: \"UNSIGNED_INT\", buffer: bufIdx.triId, componentCount: 1, componentType: \"UNSIGNED_INT\", normalized: false, byteOffset: 0, byteStride: 4 },\n            ] : null,\n            highlight: { kind: \"UNSIGNED_INT\", buffer: bufIdx.highlight, componentCount: 1, componentType: \"UNSIGNED_BYTE\", normalized: false, byteOffset: 0, byteStride: 0 },\n        } as const satisfies VertexAttributes;\n\n        objectRanges.sort((a, b) => (a.objectId - b.objectId));\n\n        subMeshes.push({\n            materialType,\n            primitiveType: primitiveTypeStrings[primitiveType],\n            numVertices,\n            numTriangles,\n            objectRanges,\n            vertexAttributes,\n            vertexBuffers,\n            indices,\n            baseColorTexture,\n            drawRanges\n        });\n    }\n\n    highlights.mutex.unlock();\n\n    const textures = new Array<NodeTexture | undefined>(schema.textureInfo.length);\n    const { textureInfo } = schema;\n    for (const i of referencedTextures) {\n        const [begin, end] = getRange(textureInfo.pixelRange, i);\n        const semantic = textureInfo.semantic[i];\n        const transform = [\n            textureInfo.transform.e00[i],\n            textureInfo.transform.e01[i],\n            textureInfo.transform.e02[i],\n            textureInfo.transform.e10[i],\n            textureInfo.transform.e11[i],\n            textureInfo.transform.e12[i],\n            textureInfo.transform.e20[i],\n            textureInfo.transform.e21[i],\n            textureInfo.transform.e22[i],\n        ] as const;\n        const ktx = schema.texturePixels.subarray(begin, end);\n        const params = parseKTX(ktx);\n        textures[i] = { semantic, transform, params };\n    }\n\n    return { subMeshes, textures } as const satisfies NodeGeometry;\n}\n\nexport function parseNode(id: string, separatePositionBuffer: boolean, enableOutlines: boolean, version: string, buffer: ArrayBuffer, highlights: Highlights, applyFilter: boolean) {\n    console.assert(version == \"2.0\");\n    // const begin = performance.now();\n    const r = new BufferReader(buffer);\n    var schema = readSchema(r);\n    let predicate: ((objectId: number) => boolean) | undefined;\n    predicate = applyFilter ? (objectId =>\n        highlights.indices[objectId] != 0xff\n    ) : undefined;\n    const childInfos = getChildren(id, schema, separatePositionBuffer, predicate);\n    const geometry = getGeometry(schema, separatePositionBuffer, enableOutlines, highlights, predicate);\n    // const end = performance.now();\n    // console.log((end - begin));\n    return { childInfos, geometry } as const;\n}\n", "export class AbortableDownload {\n    result: Promise<ArrayBuffer | undefined> = Promise.resolve(undefined);\n    aborted = false;\n\n    constructor(private readonly download: () => Promise<ArrayBuffer | undefined>) {\n    }\n\n    start() {\n        this.result = this.download();\n    }\n\n    abort() {\n        this.aborted = true;\n    }\n}\n\nexport class Downloader {\n    activeDownloads = 0;\n    completeResolve: (() => void) | undefined;\n    public static createImageData?: (blob: Blob) => Promise<ImageData>;\n\n    constructor(public baseUrl?: URL) {\n    }\n\n    async complete() {\n        if (this.activeDownloads > 0) {\n            const completePromise = new Promise<void>((resolve, reject) => {\n                this.completeResolve = resolve;\n            });\n            await completePromise;\n            this.completeResolve = undefined;\n        }\n    }\n\n    private async request(filename: string) {\n        const url = new URL(filename, this.baseUrl);\n        if (!url.search)\n            url.search = this.baseUrl?.search ?? \"\";\n        const response = await fetch(url.toString(), { mode: \"cors\" });\n        if (!response.ok) {\n            throw new Error(`HTTP Error: ${response.status}: ${response.statusText} (${url})`);\n        }\n        return response;\n    }\n\n    downloadArrayBufferAbortable(filename: string, buffer?: ArrayBuffer): AbortableDownload {\n        const self = this;\n        const download = new AbortableDownload(buffer != undefined ? downloadAsyncSize : downloadAsync);\n        download.start();\n        return download;\n\n        async function downloadAsyncSize() {\n            try {\n                self.activeDownloads++;\n                const response = await self.request(filename);\n                if (!response.ok)\n                    throw new Error(`HTTP error: ${response.status} ${response.statusText}!`);\n                const reader = response.body!.getReader(); // waiting for safari and typescript to include the byob mode here.\n                const content = new Uint8Array(buffer!);\n                let offset = 0;\n                while (!download.aborted) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    content.set(value, offset);\n                    offset += value.length;\n                }\n                if (!download.aborted) {\n                    console.assert(offset == content.length);\n                    return content.buffer;\n                } else {\n                    reader.cancel();\n                }\n            } finally {\n                self.activeDownloads--;\n                if (self.activeDownloads == 0 && self.completeResolve) {\n                    self.completeResolve();\n                }\n            }\n        }\n\n        async function downloadAsync() {\n            try {\n                self.activeDownloads++;\n                const response = await self.request(filename);\n                if (!response.ok)\n                    throw new Error(`HTTP error: ${response.status} ${response.statusText}!`);\n                // return await response.arrayBuffer(); // sometimes skips/gives up on downloads when previously cancelled, so we use streaming instead.\n                const reader = response.body!.getReader();\n                const chunks: Uint8Array[] = [];\n                let size = 0; // If compressed, we can't use content-length to determine uncompressed length up front, so we must store chunks and then assemble into final buffer.\n                while (!download.aborted) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    size += value.length;\n                }\n                if (!download.aborted) {\n                    const content = new Uint8Array(size);\n                    let offset = 0;\n                    for (const chunk of chunks) {\n                        content.set(chunk, offset);\n                        offset += chunk.length;\n                    }\n                    return content.buffer;\n                } else {\n                    reader.cancel();\n                }\n            } finally {\n                self.activeDownloads--;\n                if (self.activeDownloads == 0 && self.completeResolve) {\n                    self.completeResolve();\n                }\n            }\n        }\n    }\n}\n", "const enum State { unlocked, locked };\n\nexport class Mutex {\n    readonly _view: Int32Array;\n\n    constructor(buffer: SharedArrayBuffer) {\n        this._view = new Int32Array(buffer, 0, 1);\n    }\n\n    // will loop until lock is available, so be careful using this in main thread\n    lockSpin() {\n        const { _view } = this;\n        for (; ;) {\n            if (Atomics.compareExchange(_view, 0, State.unlocked, State.locked) == State.unlocked) {\n                return;\n            }\n        }\n    }\n\n    // blocking call, use in workers only!\n    lockSync() {\n        console.assert(self.Worker != undefined);\n        const { _view } = this;\n        for (; ;) {\n            if (Atomics.compareExchange(_view, 0, State.unlocked, State.locked) == State.unlocked) {\n                return;\n            }\n            Atomics.wait(_view, 0, State.locked);\n        }\n    }\n\n    // safe to use from main thread\n    async lockAsync() {\n        const { _view } = this;\n        for (; ;) {\n            if (Atomics.compareExchange(_view, 0, State.unlocked, State.locked) == State.unlocked) {\n                return;\n            }\n            const { async, value } = Atomics.waitAsync(_view, 0, State.locked);\n            if (async) {\n                await value;\n            }\n        }\n    }\n\n    unlock() {\n        const { _view } = this;\n        if (Atomics.compareExchange(_view, 0, State.locked, State.unlocked) != State.locked) {\n            throw new Error(\"Mutex is in inconsistent state: unlock on unlocked Mutex.\");\n        }\n        Atomics.notify(_view, 0);\n    }\n}", "import { AbortableDownload, Downloader } from \"./download\";\nimport { Mutex } from \"../mutex\";\nimport { parseNode } from \"./parser\";\nimport type { AbortAllMessage, AbortMessage, AbortedAllMessage, AbortedMessage, BufferMessage, ParseMessage, ErrorMessage, LoadMessage, ReadyMessage, MessageRequest, MessageResponse, ParseParams } from \"./messages\";\n\nexport interface HighlightsBuffer {\n    readonly buffer: SharedArrayBuffer;\n    readonly indices: Uint8Array;\n    readonly mutex: Mutex;\n}\n\nexport class LoaderHandler {\n    readonly downloader = new Downloader();\n    readonly downloads = new Map<string, AbortableDownload>();\n    highlights: HighlightsBuffer = undefined!; // will be set right after construction by \"buffer\" message\n\n    constructor(readonly send: (msg: MessageResponse, transfer?: Transferable[]) => void) {\n    }\n\n    receive(msg: MessageRequest) {\n        switch (msg.kind) {\n            case \"buffer\":\n                this.setBuffer(msg);\n                break;\n            case \"parse\":\n                this.parse(msg);\n                break;\n            case \"load\":\n                this.load(msg);\n                break;\n            case \"abort\":\n                this.abort(msg);\n                break;\n            case \"abort_all\":\n                this.abortAll(msg);\n                break;\n            default:\n                console.error(`Uknown load message: ${msg}!`);\n                break;\n        }\n    }\n\n    private setBuffer(msg: BufferMessage) {\n        const { buffer } = msg;\n        const indices = new Uint8Array(buffer, 4);\n        const mutex = new Mutex(buffer);\n        this.highlights = { buffer, indices, mutex };\n    }\n\n    private parseBuffer(buffer: ArrayBuffer, params: ParseParams) {\n        const { highlights } = this;\n        const { id, version, separatePositionsBuffer, enableOutlines, applyFilter } = params;\n        const { childInfos, geometry } = parseNode(id, separatePositionsBuffer, enableOutlines, version, buffer, highlights, applyFilter);\n        const readyMsg: ReadyMessage = { kind: \"ready\", id, childInfos, geometry };\n        const transfer: Transferable[] = [];\n        for (const { vertexBuffers, indices } of geometry.subMeshes) {\n            transfer.push(...vertexBuffers);\n            if (typeof indices != \"number\") {\n                transfer.push(indices.buffer);\n            }\n        }\n        this.send(readyMsg, transfer);\n    }\n\n    private async parse(params: ParseMessage) {\n        const { id, buffer } = params;\n        try {\n            this.parseBuffer(buffer, params);\n        } catch (error) {\n            this.error(id, error);\n        }\n    }\n\n    private async load(params: LoadMessage) {\n        const { downloader, downloads } = this;\n        const { url, id, byteSize } = params;\n        try {\n            const download = downloader.downloadArrayBufferAbortable(url, new ArrayBuffer(byteSize));\n            downloads.set(id, download);\n            const buffer = await download.result;\n            downloads.delete(id);\n            if (buffer) {\n                this.parseBuffer(buffer, params);\n            } else {\n                const abortedMsg: AbortedMessage = { kind: \"aborted\", id };\n                this.send(abortedMsg);\n            }\n        } catch (error) {\n            this.error(id, error);\n        }\n    }\n\n    private removeNode(id: string) {\n        const { downloads } = this;\n        const download = downloads.get(id);\n        downloads.delete(id);\n        return { download };\n    }\n\n    private error(id: string, error: any) {\n        const { download } = this.removeNode(id);\n        const errorMsg = { kind: \"error\", id, error } as ErrorMessage;\n        this.send(errorMsg);\n    }\n\n    private abort(params: AbortMessage) {\n        const { id } = params;\n        const { download } = this.removeNode(id);\n        download?.abort();\n    }\n\n    private async abortAll(params: AbortAllMessage) {\n        const { downloads, downloader } = this;\n        for (const download of downloads.values()) {\n            download.abort();\n        }\n        await downloader.complete();\n        console.assert(downloads.size == 0);\n        const abortedAllMsg = { kind: \"aborted_all\" } as AbortedAllMessage;\n        this.send(abortedAllMsg);\n    }\n}", "export * from \"./parser\";\nexport * from \"./schema_2_0\";\nexport * from \"./handler\";\nexport * from \"./messages\";\nexport const useWorker = true; // set to false for better debugging\n", "\nexport default function inlineWorker(scriptText) {\n  let blob = new Blob([scriptText], {type: 'text/javascript'});\n  let url = URL.createObjectURL(blob);\n  let worker = new Worker(url);\n  URL.revokeObjectURL(url);\n  return worker;\n}\n", "import inlineWorker from '__inline-worker'\nexport default function Worker() {\n  return inlineWorker(\"var ve=Object.defineProperty;var Xe=Object.getOwnPropertySymbols;var Ct=Object.prototype.hasOwnProperty,It=Object.prototype.propertyIsEnumerable;var ye=(t,e,r)=>e in t?ve(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,L=(t,e)=>{for(var r in e||(e={}))Ct.call(e,r)&&ye(t,r,e[r]);if(Xe)for(var r of Xe(e))It.call(e,r)&&ye(t,r,e[r]);return t};var ct=(t,e)=>{for(var r in e)ve(t,r,{get:e[r],enumerable:!0})};var C=(t,e,r)=>(ye(t,typeof e!=\\\"symbol\\\"?e+\\\"\\\":e,r),r);var fe=class{constructor(e){this.download=e;C(this,\\\"result\\\",Promise.resolve(void 0));C(this,\\\"aborted\\\",!1)}start(){this.result=this.download()}abort(){this.aborted=!0}},_e=class{constructor(e){this.baseUrl=e;C(this,\\\"activeDownloads\\\",0);C(this,\\\"completeResolve\\\")}async complete(){this.activeDownloads>0&&(await new Promise((r,n)=>{this.completeResolve=r}),this.completeResolve=void 0)}async request(e){var E,_;let r=new URL(e,this.baseUrl);r.search||(r.search=(_=(E=this.baseUrl)==null?void 0:E.search)!=null?_:\\\"\\\");let n=await fetch(r.toString(),{mode:\\\"cors\\\"});if(!n.ok)throw new Error(`HTTP Error: ${n.status}: ${n.statusText} (${r})`);return n}downloadArrayBufferAbortable(e,r){let n=this,E=new fe(r!=null?_:a);return E.start(),E;async function _(){try{n.activeDownloads++;let o=await n.request(e);if(!o.ok)throw new Error(`HTTP error: ${o.status} ${o.statusText}!`);let R=o.body.getReader(),s=new Uint8Array(r),A=0;for(;!E.aborted;){let{done:T,value:x}=await R.read();if(T)break;s.set(x,A),A+=x.length}if(E.aborted)R.cancel();else return console.assert(A==s.length),s.buffer}finally{n.activeDownloads--,n.activeDownloads==0&&n.completeResolve&&n.completeResolve()}}async function a(){try{n.activeDownloads++;let o=await n.request(e);if(!o.ok)throw new Error(`HTTP error: ${o.status} ${o.statusText}!`);let R=o.body.getReader(),s=[],A=0;for(;!E.aborted;){let{done:T,value:x}=await R.read();if(T)break;s.push(x),A+=x.length}if(E.aborted)R.cancel();else{let T=new Uint8Array(A),x=0;for(let i of s)T.set(i,x),x+=i.length;return T.buffer}}finally{n.activeDownloads--,n.activeDownloads==0&&n.completeResolve&&n.completeResolve()}}}};C(_e,\\\"createImageData\\\");var le=class{constructor(e){C(this,\\\"_view\\\");this._view=new Int32Array(e,0,1)}lockSpin(){let{_view:e}=this;for(;;)if(Atomics.compareExchange(e,0,0,1)==0)return}lockSync(){console.assert(self.Worker!=null);let{_view:e}=this;for(;;){if(Atomics.compareExchange(e,0,0,1)==0)return;Atomics.wait(e,0,1)}}async lockAsync(){let{_view:e}=this;for(;;){if(Atomics.compareExchange(e,0,0,1)==0)return;let{async:r,value:n}=Atomics.waitAsync(e,0,1);r&&await n}}unlock(){let{_view:e}=this;if(Atomics.compareExchange(e,0,1,0)!=1)throw new Error(\\\"Mutex is in inconsistent state: unlock on unlocked Mutex.\\\");Atomics.notify(e,0)}};var Se=1e-6,oe=typeof Float32Array!=\\\"undefined\\\"?Float32Array:Array,Oe=Math.random;var yr=Math.PI/180;Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var q={};ct(q,{add:()=>Dt,angle:()=>jt,bezier:()=>vt,ceil:()=>Ft,clone:()=>Bt,copy:()=>ut,create:()=>Ve,cross:()=>gt,dist:()=>er,distance:()=>ke,div:()=>Lt,divide:()=>Ke,dot:()=>Ze,equals:()=>$t,exactEquals:()=>Qt,floor:()=>yt,forEach:()=>Er,fromValues:()=>Nt,hermite:()=>Xt,inverse:()=>ht,len:()=>rr,length:()=>we,lerp:()=>Ht,max:()=>Ot,min:()=>ft,mul:()=>Gt,multiply:()=>Ye,negate:()=>Pt,normalize:()=>bt,random:()=>Vt,rotateX:()=>Kt,rotateY:()=>kt,rotateZ:()=>zt,round:()=>Ut,scale:()=>pt,scaleAndAdd:()=>mt,set:()=>Mt,sqrDist:()=>tr,sqrLen:()=>nr,squaredDistance:()=>ze,squaredLength:()=>je,str:()=>qt,sub:()=>Jt,subtract:()=>We,transformMat3:()=>Wt,transformMat4:()=>wt,transformQuat:()=>Yt,zero:()=>Zt});function Ve(){var t=new oe(3);return oe!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Bt(t){var e=new oe(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function we(t){var e=t[0],r=t[1],n=t[2];return Math.hypot(e,r,n)}function Nt(t,e,r){var n=new oe(3);return n[0]=t,n[1]=e,n[2]=r,n}function ut(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Mt(t,e,r,n){return t[0]=e,t[1]=r,t[2]=n,t}function Dt(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t}function We(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}function Ye(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t}function Ke(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}function Ft(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function yt(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function ft(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t}function Ot(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t}function Ut(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function pt(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t}function mt(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t}function ke(t,e){var r=e[0]-t[0],n=e[1]-t[1],E=e[2]-t[2];return Math.hypot(r,n,E)}function ze(t,e){var r=e[0]-t[0],n=e[1]-t[1],E=e[2]-t[2];return r*r+n*n+E*E}function je(t){var e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}function Pt(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function ht(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function bt(t,e){var r=e[0],n=e[1],E=e[2],_=r*r+n*n+E*E;return _>0&&(_=1/Math.sqrt(_)),t[0]=e[0]*_,t[1]=e[1]*_,t[2]=e[2]*_,t}function Ze(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function gt(t,e,r){var n=e[0],E=e[1],_=e[2],a=r[0],o=r[1],R=r[2];return t[0]=E*R-_*o,t[1]=_*a-n*R,t[2]=n*o-E*a,t}function Ht(t,e,r,n){var E=e[0],_=e[1],a=e[2];return t[0]=E+n*(r[0]-E),t[1]=_+n*(r[1]-_),t[2]=a+n*(r[2]-a),t}function Xt(t,e,r,n,E,_){var a=_*_,o=a*(2*_-3)+1,R=a*(_-2)+_,s=a*(_-1),A=a*(3-2*_);return t[0]=e[0]*o+r[0]*R+n[0]*s+E[0]*A,t[1]=e[1]*o+r[1]*R+n[1]*s+E[1]*A,t[2]=e[2]*o+r[2]*R+n[2]*s+E[2]*A,t}function vt(t,e,r,n,E,_){var a=1-_,o=a*a,R=_*_,s=o*a,A=3*_*o,T=3*R*a,x=R*_;return t[0]=e[0]*s+r[0]*A+n[0]*T+E[0]*x,t[1]=e[1]*s+r[1]*A+n[1]*T+E[1]*x,t[2]=e[2]*s+r[2]*A+n[2]*T+E[2]*x,t}function Vt(t,e){e=e||1;var r=Oe()*2*Math.PI,n=Oe()*2-1,E=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(r)*E,t[1]=Math.sin(r)*E,t[2]=n*e,t}function wt(t,e,r){var n=e[0],E=e[1],_=e[2],a=r[3]*n+r[7]*E+r[11]*_+r[15];return a=a||1,t[0]=(r[0]*n+r[4]*E+r[8]*_+r[12])/a,t[1]=(r[1]*n+r[5]*E+r[9]*_+r[13])/a,t[2]=(r[2]*n+r[6]*E+r[10]*_+r[14])/a,t}function Wt(t,e,r){var n=e[0],E=e[1],_=e[2];return t[0]=n*r[0]+E*r[3]+_*r[6],t[1]=n*r[1]+E*r[4]+_*r[7],t[2]=n*r[2]+E*r[5]+_*r[8],t}function Yt(t,e,r){var n=r[0],E=r[1],_=r[2],a=r[3],o=e[0],R=e[1],s=e[2],A=E*s-_*R,T=_*o-n*s,x=n*R-E*o,i=E*x-_*T,N=_*A-n*x,l=n*T-E*A,I=a*2;return A*=I,T*=I,x*=I,i*=2,N*=2,l*=2,t[0]=o+A+i,t[1]=R+T+N,t[2]=s+x+l,t}function Kt(t,e,r,n){var E=[],_=[];return E[0]=e[0]-r[0],E[1]=e[1]-r[1],E[2]=e[2]-r[2],_[0]=E[0],_[1]=E[1]*Math.cos(n)-E[2]*Math.sin(n),_[2]=E[1]*Math.sin(n)+E[2]*Math.cos(n),t[0]=_[0]+r[0],t[1]=_[1]+r[1],t[2]=_[2]+r[2],t}function kt(t,e,r,n){var E=[],_=[];return E[0]=e[0]-r[0],E[1]=e[1]-r[1],E[2]=e[2]-r[2],_[0]=E[2]*Math.sin(n)+E[0]*Math.cos(n),_[1]=E[1],_[2]=E[2]*Math.cos(n)-E[0]*Math.sin(n),t[0]=_[0]+r[0],t[1]=_[1]+r[1],t[2]=_[2]+r[2],t}function zt(t,e,r,n){var E=[],_=[];return E[0]=e[0]-r[0],E[1]=e[1]-r[1],E[2]=e[2]-r[2],_[0]=E[0]*Math.cos(n)-E[1]*Math.sin(n),_[1]=E[0]*Math.sin(n)+E[1]*Math.cos(n),_[2]=E[2],t[0]=_[0]+r[0],t[1]=_[1]+r[1],t[2]=_[2]+r[2],t}function jt(t,e){var r=t[0],n=t[1],E=t[2],_=e[0],a=e[1],o=e[2],R=Math.sqrt(r*r+n*n+E*E),s=Math.sqrt(_*_+a*a+o*o),A=R*s,T=A&&Ze(t,e)/A;return Math.acos(Math.min(Math.max(T,-1),1))}function Zt(t){return t[0]=0,t[1]=0,t[2]=0,t}function qt(t){return\\\"vec3(\\\"+t[0]+\\\", \\\"+t[1]+\\\", \\\"+t[2]+\\\")\\\"}function Qt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function $t(t,e){var r=t[0],n=t[1],E=t[2],_=e[0],a=e[1],o=e[2];return Math.abs(r-_)<=Se*Math.max(1,Math.abs(r),Math.abs(_))&&Math.abs(n-a)<=Se*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(E-o)<=Se*Math.max(1,Math.abs(E),Math.abs(o))}var Jt=We,Gt=Ye,Lt=Ke,er=ke,tr=ze,rr=we,nr=je,Er=function(){var t=Ve();return function(e,r,n,E,_,a){var o,R;for(r||(r=3),n||(n=0),E?R=Math.min(E*r+n,e.length):R=e.length,o=n;o<R;o+=r)t[0]=e[o],t[1]=e[o+1],t[2]=e[o+2],_(t,t,a),e[o]=t[0],e[o+1]=t[1],e[o+2]=t[2];return e}}();function qe(t){let e=t.u32(9),r=t.u8(10),n={childInfo:{length:e[0],hash:{start:t.u32(e[0]),count:t.u32(e[0])},childIndex:t.u8(e[0]),childMask:t.u32(e[0]),tolerance:t.i8(e[0]),totalByteSize:t.u32(e[0]),offset:{length:e[0],x:t.f64(e[0]),y:t.f64(e[0]),z:t.f64(e[0])},scale:t.f32(e[0]),bounds:{length:e[0],box:{length:e[0],min:{length:e[0],x:t.f32(e[0]),y:t.f32(e[0]),z:t.f32(e[0])},max:{length:e[0],x:t.f32(e[0]),y:t.f32(e[0]),z:t.f32(e[0])}},sphere:{length:e[0],origo:{length:e[0],x:t.f32(e[0]),y:t.f32(e[0]),z:t.f32(e[0])},radius:t.f32(e[0])}},subMeshes:{start:t.u32(e[0]),count:t.u32(e[0])}},hashBytes:t.u8(e[1]),subMeshProjection:{length:e[2],objectId:t.u32(e[2]),primitiveType:t.u8(e[2]),attributes:t.u8(e[2]),numDeviations:t.u8(e[2]),numIndices:t.u32(e[2]),numVertices:t.u32(e[2]),numTextureBytes:t.u32(e[2])},subMesh:{length:e[3],childIndex:t.u8(e[3]),objectId:t.u32(e[3]),materialIndex:t.u8(e[3]),primitiveType:t.u8(e[3]),materialType:t.u8(e[3]),attributes:t.u8(e[3]),numDeviations:t.u8(e[3]),vertices:{start:t.u32(e[3]),count:t.u32(e[3])},primitiveVertexIndices:{start:t.u32(e[3]),count:t.u32(e[3])},edgeVertexIndices:{start:t.u32(e[3]),count:t.u32(e[3])},cornerVertexIndices:{start:t.u32(e[3]),count:t.u32(e[3])},textures:{start:t.u8(e[3]),count:t.u8(e[3])}},textureInfo:{length:e[4],semantic:t.u8(e[4]),transform:{length:e[4],e00:t.f32(e[4]),e01:t.f32(e[4]),e02:t.f32(e[4]),e10:t.f32(e[4]),e11:t.f32(e[4]),e12:t.f32(e[4]),e20:t.f32(e[4]),e21:t.f32(e[4]),e22:t.f32(e[4])},pixelRange:{start:t.u32(e[4]),count:t.u32(e[4])}},vertex:{length:e[5],position:{length:e[5],x:t.i16(e[5]),y:t.i16(e[5]),z:t.i16(e[5])},normal:r[0]?{length:e[5],x:t.i8(e[5]),y:t.i8(e[5]),z:t.i8(e[5])}:void 0,color:r[1]?{length:e[5],red:t.u8(e[5]),green:t.u8(e[5]),blue:t.u8(e[5]),alpha:t.u8(e[5])}:void 0,texCoord:r[2]?{length:e[5],x:t.f16(e[5]),y:t.f16(e[5])}:void 0,projectedPos:r[3]?{length:e[5],x:t.i16(e[5]),y:t.i16(e[5]),z:t.i16(e[5])}:void 0,deviations:{length:e[5],a:r[4]?t.f16(e[5]):void 0,b:r[5]?t.f16(e[5]):void 0,c:r[6]?t.f16(e[5]):void 0,d:r[7]?t.f16(e[5]):void 0}},triangle:{length:e[6],topologyFlags:r[8]?t.u8(e[6]):void 0},vertexIndex:r[9]?t.u16(e[7]):void 0,texturePixels:t.u8(e[8])};return console.assert(t.eof),n}var Ue=Uint16Array,Ce=class{constructor(e){this.buffer=e;C(this,\\\"pos\\\",0);C(this,\\\"_u8\\\");C(this,\\\"_u16\\\");C(this,\\\"_u32\\\");C(this,\\\"_i8\\\");C(this,\\\"_i16\\\");C(this,\\\"_i32\\\");C(this,\\\"_f16\\\");C(this,\\\"_f32\\\");C(this,\\\"_f64\\\");this._u8=new Uint8Array(e,0,Math.floor(e.byteLength/Uint8Array.BYTES_PER_ELEMENT)),this._u16=new Uint16Array(e,0,Math.floor(e.byteLength/Uint16Array.BYTES_PER_ELEMENT)),this._u32=new Uint32Array(e,0,Math.floor(e.byteLength/Uint32Array.BYTES_PER_ELEMENT)),this._i8=new Int8Array(e,0,Math.floor(e.byteLength/Int8Array.BYTES_PER_ELEMENT)),this._i16=new Int16Array(e,0,Math.floor(e.byteLength/Int16Array.BYTES_PER_ELEMENT)),this._i32=new Int32Array(e,0,Math.floor(e.byteLength/Int32Array.BYTES_PER_ELEMENT)),this._f16=new Uint16Array(e,0,Math.floor(e.byteLength/Uint16Array.BYTES_PER_ELEMENT)),this._f32=new Float32Array(e,0,Math.floor(e.byteLength/Float32Array.BYTES_PER_ELEMENT)),this._f64=new Float64Array(e,0,Math.floor(e.byteLength/Float64Array.BYTES_PER_ELEMENT))}read(e,r){if(r==0)return e.subarray(0,0);let n=e.BYTES_PER_ELEMENT;var E=n-1-(this.pos+n-1)%n;console.assert(E>=0&&E<n);let _=(this.pos+E)/n,a=_+r;return this.pos=a*e.BYTES_PER_ELEMENT,e.subarray(_,a)}get eof(){return this.pos==this.buffer.byteLength}u8(e){return this.read(this._u8,e)}u16(e){return this.read(this._u16,e)}u32(e){return this.read(this._u32,e)}i8(e){return this.read(this._i8,e)}i16(e){return this.read(this._i16,e)}i32(e){return this.read(this._i32,e)}f16(e){return this.read(this._f16,e)}f32(e){return this.read(this._f32,e)}f64(e){return this.read(this._f64,e)}};var Qe=new Uint8Array([171,75,84,88,32,49,49,187,13,10,26,10]),_r=12+13*4,or={[5121]:\\\"UNSIGNED_BYTE\\\",[33635]:\\\"UNSIGNED_SHORT_5_6_5\\\",[32819]:\\\"UNSIGNED_SHORT_4_4_4_4\\\",[32820]:\\\"UNSIGNED_SHORT_5_5_5_1\\\",[5131]:\\\"HALF_FLOAT\\\",[5126]:\\\"FLOAT\\\",[5123]:\\\"UNSIGNED_SHORT\\\",[5125]:\\\"UNSIGNED_INT\\\",[34042]:\\\"UNSIGNED_INT_24_8\\\",[5120]:\\\"BYTE\\\",[5122]:\\\"SHORT\\\",[5124]:\\\"INT\\\",[35902]:\\\"UNSIGNED_INT_5_9_9_9_REV\\\",[33640]:\\\"UNSIGNED_INT_2_10_10_10_REV\\\",[35899]:\\\"UNSIGNED_INT_10F_11F_11F_REV\\\"},ar={[6407]:\\\"RGB\\\",[6408]:\\\"RGBA\\\",[6406]:\\\"ALPHA\\\",[6409]:\\\"LUMINANCE\\\",[6410]:\\\"LUMINANCE_ALPHA\\\",[6402]:\\\"DEPTH_COMPONENT\\\",[34041]:\\\"DEPTH_STENCIL\\\",[35904]:\\\"SRGB_EXT\\\",[35906]:\\\"SRGB_ALPHA_EXT\\\",[6403]:\\\"RED\\\",[33319]:\\\"RG\\\",[36244]:\\\"RED_INTEGER\\\",[33320]:\\\"RG_INTEGER\\\",[36248]:\\\"RGB_INTEGER\\\",[36249]:\\\"RGBA_INTEGER\\\"},Rr={[33321]:\\\"R8\\\",[36756]:\\\"R8_SNORM\\\",[33323]:\\\"RG8\\\",[36757]:\\\"RG8_SNORM\\\",[32849]:\\\"RGB8\\\",[36758]:\\\"RGB8_SNORM\\\",[36194]:\\\"RGB565\\\",[32854]:\\\"RGBA4\\\",[32855]:\\\"RGB5_A1\\\",[32856]:\\\"RGBA8\\\",[36759]:\\\"RGBA8_SNORM\\\",[32857]:\\\"RGB10_A2\\\",[36975]:\\\"RGB10_A2UI\\\",[35905]:\\\"SRGB8\\\",[35907]:\\\"SRGB8_ALPHA8\\\",[33325]:\\\"R16F\\\",[33327]:\\\"RG16F\\\",[34843]:\\\"RGB16F\\\",[34842]:\\\"RGBA16F\\\",[33326]:\\\"R32F\\\",[33328]:\\\"RG32F\\\",[34837]:\\\"RGB32F\\\",[34836]:\\\"RGBA32F\\\",[35898]:\\\"R11F_G11F_B10F\\\",[35901]:\\\"RGB9_E5\\\",[33329]:\\\"R8I\\\",[33330]:\\\"R8UI\\\",[33331]:\\\"R16I\\\",[33332]:\\\"R16UI\\\",[33333]:\\\"R32I\\\",[33334]:\\\"R32UI\\\",[33335]:\\\"RG8I\\\",[33336]:\\\"RG8UI\\\",[33337]:\\\"RG16I\\\",[33338]:\\\"RG16UI\\\",[33339]:\\\"RG32I\\\",[33340]:\\\"RG32UI\\\",[36239]:\\\"RGB8I\\\",[36221]:\\\"RGB8UI\\\",[36233]:\\\"RGB16I\\\",[36215]:\\\"RGB16UI\\\",[36227]:\\\"RGB32I\\\",[36209]:\\\"RGB32UI\\\",[36238]:\\\"RGBA8I\\\",[36220]:\\\"RGBA8UI\\\",[36232]:\\\"RGBA16I\\\",[36214]:\\\"RGBA16UI\\\",[36226]:\\\"RGBA32I\\\",[36208]:\\\"RGBA32UI\\\"},sr={[33776]:\\\"COMPRESSED_RGB_S3TC_DXT1_EXT\\\",[33777]:\\\"COMPRESSED_RGBA_S3TC_DXT1_EXT\\\",[33778]:\\\"COMPRESSED_RGBA_S3TC_DXT3_EXT\\\",[33779]:\\\"COMPRESSED_RGBA_S3TC_DXT5_EXT\\\",[37488]:\\\"COMPRESSED_R11_EAC\\\",[37489]:\\\"COMPRESSED_SIGNED_R11_EAC\\\",[37490]:\\\"COMPRESSED_RG11_EAC\\\",[37491]:\\\"COMPRESSED_SIGNED_RG11_EAC\\\",[37492]:\\\"COMPRESSED_RGB8_ETC2\\\",[37493]:\\\"COMPRESSED_RGBA8_ETC2_EAC\\\",[37494]:\\\"COMPRESSED_SRGB8_ETC2\\\",[37495]:\\\"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\\\",[37496]:\\\"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\\\",[37497]:\\\"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\\\",[35840]:\\\"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\\\",[35842]:\\\"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\\\",[35841]:\\\"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\\\",[35843]:\\\"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\\\",[36196]:\\\"COMPRESSED_RGB_ETC1_WEBGL\\\"},Ar=L(L({},Rr),sr);function Tr(t){let e=new DataView(t.buffer,t.byteOffset,12);for(let a=0;a<Qe.length;a++)if(e.getUint8(a)!=Qe[a])throw new Error(\\\"texture missing KTX identifier\\\");let r=Uint32Array.BYTES_PER_ELEMENT,n=new DataView(t.buffer,12+t.byteOffset,13*r),_=n.getUint32(0,!0)===67305985;return{glType:n.getUint32(1*r,_),glTypeSize:n.getUint32(2*r,_),glFormat:n.getUint32(3*r,_),glInternalFormat:n.getUint32(4*r,_),glBaseInternalFormat:n.getUint32(5*r,_),pixelWidth:n.getUint32(6*r,_),pixelHeight:n.getUint32(7*r,_),pixelDepth:n.getUint32(8*r,_),numberOfArrayElements:n.getUint32(9*r,_),numberOfFaces:n.getUint32(10*r,_),numberOfMipmapLevels:n.getUint32(11*r,_),bytesOfKeyValueData:n.getUint32(12*r,_),littleEndian:_}}function*$e(t,e,r){let n=Math.max(1,t.numberOfMipmapLevels),E=Math.max(1,t.numberOfArrayElements),_=t.numberOfFaces,a=Math.max(1,t.pixelDepth),o=_r+t.bytesOfKeyValueData,R=_==6&&t.numberOfArrayElements==0?1:E*_*a,s=new DataView(e.buffer,e.byteOffset);for(let A=0;A<n;A++){let T=t.pixelWidth>>A,x=t.pixelHeight>>A,i=s.getInt32(o,r);o+=4;let N=i/R;console.assert(N%4==0);for(let l=0;l<E;l++)for(let I=0;I<_;I++)for(let F=0;F<a;F++){let P=o;o+=N;let S=o;yield{mip:A,element:l,face:I,width:T,height:x,blobRange:[P,S],buffer:e.subarray(P,S)}}}console.assert(o==e.byteLength)}function Je(t){let e=Tr(t),{littleEndian:r}=e,n=ar[e.glBaseInternalFormat],E=e.numberOfArrayElements>0,_=e.numberOfFaces==6,a=e.pixelDepth>0,o=e.numberOfMipmapLevels>1,R=Math.max(1,e.numberOfMipmapLevels),s=Ar[e.glInternalFormat],A=E?\\\"TEXTURE_ARRAY\\\":_?\\\"TEXTURE_CUBE_MAP\\\":a?\\\"TEXTURE_3D\\\":\\\"TEXTURE_2D\\\",T=e.glType?or[e.glType]:void 0,x=L({width:e.pixelWidth,height:e.pixelHeight},a?{depth:e.pixelDepth}:void 0),i;if(_){let l=new Array(R).fill(null).map(I=>[]);for(let I of $e(e,t,r))l[I.mip][I.face]=I.buffer;i=l}else{i=new Array(R);for(let l of $e(e,t,r))i[l.mip]=l.buffer}let N=o?{mipMaps:i}:{image:i[0]};return L(L({kind:A,internalFormat:s,type:T},x),N)}var xr=[\\\"POINTS\\\",\\\"LINES\\\",\\\"LINE_LOOP\\\",\\\"LINE_STRIP\\\",\\\"TRIANGLES\\\",\\\"TRIANGLE_STRIP\\\",\\\"TRIANGLE_FAN\\\"];function Ie(t,e){return q.fromValues(t.x[e],t.y[e],t.z[e])}function ee(t,e){let r=t.start[e],n=r+t.count[e];return[r,n]}function ir(t,e){switch(t){case 0:return e;case 1:return e/2;case 2:return e;case 3:return e-1;case 4:return e/3;case 5:return e-2;case 6:return e-2;default:console.warn(`Unknown primitive type: ${t}!`)}}function Ge(t){return{position:{type:Uint16Array,components:[\\\"x\\\",\\\"y\\\",\\\"z\\\"]},normal:{type:Int8Array,components:[\\\"x\\\",\\\"y\\\",\\\"z\\\"]},texCoord:{type:Ue,components:[\\\"x\\\",\\\"y\\\"]},color:{type:Uint8Array,components:[\\\"red\\\",\\\"green\\\",\\\"blue\\\",\\\"alpha\\\"]},projectedPos:{type:Uint16Array,components:[\\\"x\\\",\\\"y\\\",\\\"z\\\"]},deviations:{type:Ue,components:[\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\"].slice(0,t)},materialIndex:{type:Uint8Array},objectId:{type:Uint32Array}}}function ae(t,e=0){var o;let r=0,n={};function E(R){let s=R-1-(r+R-1)%R;r+=s}let _=1,a=Ge(e);for(let R of t){let{type:s,components:A}=a[R],T=(o=A==null?void 0:A.length)!=null?o:1;_=Math.max(_,s.BYTES_PER_ELEMENT),E(s.BYTES_PER_ELEMENT),n[R]=r,r+=s.BYTES_PER_ELEMENT*T}return E(_),n.stride=r,n}function Le(t,e,r,n){let E=[\\\"position\\\"];return t&1&&E.push(\\\"normal\\\"),t&4&&E.push(\\\"texCoord\\\"),t&2&&E.push(\\\"color\\\"),t&8&&E.push(\\\"projectedPos\\\"),e>0&&E.push(\\\"deviations\\\"),r&&E.push(\\\"materialIndex\\\"),n&&E.push(\\\"objectId\\\"),E}function lr(t,e,r,n){var i,N;let E=0,_=0,a=0,o=0,R=0,[s,A]=e;for(let l=s;l<A;l++){let I=t.objectId[l];if((i=n==null?void 0:n(I))==null||i){let F=t.numIndices[l],P=t.numVertices[l],S=t.numTextureBytes[l],y=t.attributes[l],c=t.numDeviations[l],u=t.primitiveType[l],O=S==0,M=!0,[p,...m]=Le(y,c,O,M),Re=r?ae([p]).stride+ae(m,c).stride:ae([p,...m],c).stride;E+=(N=ir(u,F||P))!=null?N:0,a+=F,o+=P,R+=P*Re,_+=S}}let T=o<65535?2:4,x=_+R+a*T;return{primitives:E,gpuBytes:x}}function Sr(t){return Array.prototype.map.call(t,e=>(\\\"00\\\"+e.toString(16).toUpperCase()).slice(-2)).join(\\\"\\\")}function Cr(t,e,r,n){let{childInfo:E,hashBytes:_}=e,a=[],o=[];for(let R=0;R<E.length;R++){let s=E.childIndex[R],A=E.childMask[R],[T,x]=ee(E.hash,R),i=_.slice(T,x),N=Sr(i),l=E.tolerance[R],I=E.totalByteSize[R],F=Ie(E.offset,R),P=E.scale[R],S={box:{min:Ie(E.bounds.box.min,R),max:Ie(E.bounds.box.max,R)},sphere:{center:Ie(E.bounds.sphere.origo,R),radius:E.bounds.sphere.radius[R]}},{sphere:y,box:c}=S;q.add(y.center,y.center,F),q.add(c.min,c.min,F),q.add(c.max,c.max,F);let u=ee(E.subMeshes,R),O=o[s],{primitives:M,gpuBytes:p}=lr(e.subMeshProjection,u,r,n),m=M-(O!=null?O:0);a.push({id:N,childIndex:s,childMask:A,tolerance:l,byteSize:I,offset:F,scale:P,bounds:S,primitives:M,primitivesDelta:m,gpuBytes:p})}return a}function*Ir(t,e){var n;let{subMesh:r}=t;for(let E=0;E<r.length;E++){let _=r.objectId[E];if((n=e==null?void 0:e(_))==null||n){let a=r.childIndex[E],o=r.objectId[E],R=r.materialIndex[E],s=r.materialType[E],A=r.primitiveType[E],T=r.attributes[E],x=r.numDeviations[E],i=ee(r.vertices,E),N=ee(r.primitiveVertexIndices,E),l=ee(r.textures,E);yield{childIndex:a,objectId:o,materialIndex:R,materialType:s,primitiveType:A,attributes:T,deviations:x,vertexRange:i,indexRange:N,textureRange:l}}}}function ce(t,e,r,n,E,_){let a=r/t.BYTES_PER_ELEMENT,o=n/t.BYTES_PER_ELEMENT;console.assert(Math.round(a)==a),console.assert(Math.round(o)==o);let R=a;for(let s=E;s<_;s++)t[R]=e[s],R+=o}function cr(t,e,r,n,E,_){let a=r/t.BYTES_PER_ELEMENT,o=n/t.BYTES_PER_ELEMENT;console.assert(Math.round(a)==a),console.assert(Math.round(o)==o);let R=a;for(let s=E;s<_;s++)t[R]=e,R+=o}function dr(t,e,r,n,E){var l,I,F,P;let{vertex:_,vertexIndex:a}=t,o=[...Ir(t,E)],R=[],s=new Set,A=new Map;for(let S=0;S<o.length;S++){let{materialType:y,primitiveType:c,attributes:u,deviations:O,childIndex:M}=o[S],p=`${y}_${c}_${u}_${O}_${M}`,m=A.get(p);m||(m={materialType:y,primitiveType:c,attributes:u,deviations:O,subMeshIndices:[]},A.set(p,m)),m.subMeshIndices.push(S)}n.mutex.lockSync();for(let{materialType:S,primitiveType:y,attributes:c,deviations:u,subMeshIndices:O}of A.values()){let he=function(B){let f=[],V={};for(let[j,ue]of Object.entries(B)){let te=ue,K=-1;te&&(K=f.indexOf(te),K<0&&(K=f.length,f.push(te))),Reflect.set(V,j,K)}return[f,V]};var N=he;if(O.length==0)continue;let M=O.map(B=>o[B]),p=M.some(B=>B.materialIndex!=255),m=M.some(B=>B.objectId!=4294967295),Re=Le(c,u,p,m),[tt,...rt]=Re,pe=e?rt:Re,Q=ae([tt],u).stride,nt=Q*3,H=ae(pe,u),$=H.stride,Et=[...new Set(M.map(B=>B.childIndex))].sort(),W=0,Be=0,se=0;for(let B=0;B<M.length;B++){let f=M[B],V=f.vertexRange[1]-f.vertexRange[0],j=f.indexRange[1]-f.indexRange[0];W+=V,Be+=j,y==4&&(se+=Math.round((j>0?j:V)/3))}let me=new ArrayBuffer(W*$),d,J;r&&y==4&&(d=new Int16Array(new ArrayBuffer(se*nt)),J=new Uint32Array(se));let Ne=e?new ArrayBuffer(W*Q):void 0,h;a&&(h=new(W<65535?Uint16Array:Uint32Array)(Be));let Ae=new Uint8Array(W),Te=0,b=0,z=0,xe=0,Pe=[],G=[],[_t,U]=he({primary:me,highlight:Ae==null?void 0:Ae.buffer,pos:Ne,triPos:d==null?void 0:d.buffer,triId:d==null?void 0:d.buffer});for(let B of Et){let f=M.filter(K=>K.childIndex==B);if(f.length==0)continue;let V=h?Te:b;for(let K of f){let{vertexRange:At,indexRange:Tt,materialIndex:xt,deviations:it,objectId:re}=K,lt={materialIndex:xt,objectId:re},[g,X]=At,[Me,De]=Tt,St=Ge(it);for(let D of pe){let{type:ne,components:k}=St[D],Z=new ne(me,b*$),w=(l=k==null?void 0:k.length)!=null?l:1;for(var T=0;T<w;T++){let v=H[D]+T*ne.BYTES_PER_ELEMENT;if(D in _){let Ee=Reflect.get(_,D);k&&(Ee=Reflect.get(Ee,k[T])),ce(Z,Ee,v,$,g,X)}else{let Ee=Reflect.get(lt,D);cr(Z,Ee,v,$,g,X)}}}if(d&&J){let{x:D,y:ne,z:k}=_.position,Z=0;if(a&&h){Z=(De-Me)/3;for(let w=Me;w<De;w++){let v=a[w]+g;d[z++]=D[v],d[z++]=ne[v],d[z++]=k[v]}}else{Z=(X-g)/3;for(let w=g;w<X;w++){let v=w;d[z++]=D[v],d[z++]=ne[v],d[z++]=k[v]}}J.fill(re,xe,xe+Z),xe+=Z}if(Ne){let D=new Int16Array(Ne,b*Q);ce(D,_.position.x,0,Q,g,X),ce(D,_.position.y,2,Q,g,X),ce(D,_.position.z,4,Q,g,X)}if(a&&h)for(let D=Me;D<De;D++)h[Te++]=a[D]+b;let ge=(I=n.indices[re])!=null?I:0;ge&&Ae.fill(ge,b,b+(X-g));let Fe=G.length-1,He=b+X-g;Fe>=0&&G[Fe].objectId==re?G[Fe].endVertex=He:G.push({objectId:re,beginVertex:b,endVertex:He}),b+=X-g}let j=h?Te:b,ue=V*(h?h.BYTES_PER_ELEMENT:$),te=j-V;Pe.push({childIndex:B,byteOffset:ue,first:V,count:te})}console.assert(b==W),console.assert(Te==Be),console.assert(z==((F=d==null?void 0:d.length)!=null?F:0)),console.assert(xe==((P=J==null?void 0:J.length)!=null?P:0));let ot=h!=null?h:W,[be,at]=M[0].textureRange,ie;at>be&&(ie=be),ie!=null&&s.add(ie);let Y=$,Rt=u==0||u==1?\\\"FLOAT\\\":`FLOAT_VEC${u}`,st={position:{kind:\\\"FLOAT_VEC4\\\",buffer:U.pos,componentCount:3,componentType:\\\"SHORT\\\",normalized:!0,byteOffset:H.position,byteStride:e?0:Y},normal:c&1?{kind:\\\"FLOAT_VEC3\\\",buffer:U.primary,componentCount:3,componentType:\\\"BYTE\\\",normalized:!0,byteOffset:H.normal,byteStride:Y}:null,material:p?{kind:\\\"UNSIGNED_INT\\\",buffer:U.primary,componentCount:1,componentType:\\\"UNSIGNED_BYTE\\\",normalized:!1,byteOffset:H.materialIndex,byteStride:Y}:null,objectId:m?{kind:\\\"UNSIGNED_INT\\\",buffer:U.primary,componentCount:1,componentType:\\\"UNSIGNED_INT\\\",normalized:!1,byteOffset:H.objectId,byteStride:Y}:null,texCoord:c&4?{kind:\\\"FLOAT_VEC2\\\",buffer:U.primary,componentCount:2,componentType:\\\"HALF_FLOAT\\\",normalized:!1,byteOffset:H.texCoord,byteStride:Y}:null,color:c&2?{kind:\\\"FLOAT_VEC4\\\",buffer:U.primary,componentCount:4,componentType:\\\"UNSIGNED_BYTE\\\",normalized:!0,byteOffset:H.color,byteStride:Y}:null,projectedPos:c&8?{kind:\\\"FLOAT_VEC4\\\",buffer:U.primary,componentCount:3,componentType:\\\"SHORT\\\",normalized:!0,byteOffset:H.projectedPos,byteStride:Y}:null,deviations:u!=0?{kind:Rt,buffer:U.primary,componentCount:u,componentType:\\\"HALF_FLOAT\\\",normalized:!1,byteOffset:H.deviations,byteStride:Y}:null,triangles:d?[{kind:\\\"FLOAT_VEC4\\\",buffer:U.triPos,componentCount:3,componentType:\\\"SHORT\\\",normalized:!0,byteOffset:0,byteStride:18},{kind:\\\"FLOAT_VEC4\\\",buffer:U.triPos,componentCount:3,componentType:\\\"SHORT\\\",normalized:!0,byteOffset:6,byteStride:18},{kind:\\\"FLOAT_VEC4\\\",buffer:U.triPos,componentCount:3,componentType:\\\"SHORT\\\",normalized:!0,byteOffset:12,byteStride:18},{kind:\\\"UNSIGNED_INT\\\",buffer:U.triId,componentCount:1,componentType:\\\"UNSIGNED_INT\\\",normalized:!1,byteOffset:0,byteStride:4}]:null,highlight:{kind:\\\"UNSIGNED_INT\\\",buffer:U.highlight,componentCount:1,componentType:\\\"UNSIGNED_BYTE\\\",normalized:!1,byteOffset:0,byteStride:0}};G.sort((B,f)=>B.objectId-f.objectId),R.push({materialType:S,primitiveType:xr[y],numVertices:W,numTriangles:se,objectRanges:G,vertexAttributes:st,vertexBuffers:_t,indices:ot,baseColorTexture:ie,drawRanges:Pe})}n.mutex.unlock();let x=new Array(t.textureInfo.length),{textureInfo:i}=t;for(let S of s){let[y,c]=ee(i.pixelRange,S),u=i.semantic[S],O=[i.transform.e00[S],i.transform.e01[S],i.transform.e02[S],i.transform.e10[S],i.transform.e11[S],i.transform.e12[S],i.transform.e20[S],i.transform.e21[S],i.transform.e22[S]],M=t.texturePixels.subarray(y,c),p=Je(M);x[S]={semantic:u,transform:O,params:p}}return{subMeshes:R,textures:x}}function et(t,e,r,n,E,_,a){console.assert(n==\\\"2.0\\\");let o=new Ce(E);var R=qe(o);let s;s=a?x=>_.indices[x]!=255:void 0;let A=Cr(t,R,e,s),T=dr(R,e,r,_,s);return{childInfos:A,geometry:T}}var de=class{constructor(e){this.send=e;C(this,\\\"downloader\\\",new _e);C(this,\\\"downloads\\\",new Map);C(this,\\\"highlights\\\")}receive(e){switch(e.kind){case\\\"buffer\\\":this.setBuffer(e);break;case\\\"parse\\\":this.parse(e);break;case\\\"load\\\":this.load(e);break;case\\\"abort\\\":this.abort(e);break;case\\\"abort_all\\\":this.abortAll(e);break;default:console.error(`Uknown load message: ${e}!`);break}}setBuffer(e){let{buffer:r}=e,n=new Uint8Array(r,4),E=new le(r);this.highlights={buffer:r,indices:n,mutex:E}}parseBuffer(e,r){let{highlights:n}=this,{id:E,version:_,separatePositionsBuffer:a,enableOutlines:o,applyFilter:R}=r,{childInfos:s,geometry:A}=et(E,a,o,_,e,n,R),T={kind:\\\"ready\\\",id:E,childInfos:s,geometry:A},x=[];for(let{vertexBuffers:i,indices:N}of A.subMeshes)x.push(...i),typeof N!=\\\"number\\\"&&x.push(N.buffer);this.send(T,x)}async parse(e){let{id:r,buffer:n}=e;try{this.parseBuffer(n,e)}catch(E){this.error(r,E)}}async load(e){let{downloader:r,downloads:n}=this,{url:E,id:_,byteSize:a}=e;try{let o=r.downloadArrayBufferAbortable(E,new ArrayBuffer(a));n.set(_,o);let R=await o.result;if(n.delete(_),R)this.parseBuffer(R,e);else{let s={kind:\\\"aborted\\\",id:_};this.send(s)}}catch(o){this.error(_,o)}}removeNode(e){let{downloads:r}=this,n=r.get(e);return r.delete(e),{download:n}}error(e,r){let{download:n}=this.removeNode(e),E={kind:\\\"error\\\",id:e,error:r};this.send(E)}abort(e){let{id:r}=e,{download:n}=this.removeNode(r);n==null||n.abort()}async abortAll(e){let{downloads:r,downloader:n}=this;for(let _ of r.values())_.abort();await n.complete(),console.assert(r.size==0);let E={kind:\\\"aborted_all\\\"};this.send(E)}};var Br=new de((t,e)=>{postMessage(t,{transfer:e})});onmessage=t=>{let e=t.data;e.kind==\\\"close\\\"?close():Br.receive(e)};\\n\");\n}\n", "///@ts-ignore\nimport createWorker from \"./worker/index.worker.js\"; // uses esbuild-plugin-inline-worker to inline worker code.\nimport type { RenderStateScene } from \"core3d/state\";\nimport { LoaderHandler, type AbortAllMessage, type AbortMessage, type BufferMessage, type CloseMessage, type LoadMessage, type MessageRequest, type MessageResponse, type NodePayload, type ParseMessage } from \"./worker\";\nimport { OctreeNode } from \"./node.js\";\nimport type { DeviceProfile } from \"core3d/device.js\";\n\ninterface PayloadPromiseMethods { readonly resolve: (value: NodePayload | undefined) => void, readonly reject: (reason: string) => void };\n\nexport interface NodeLoaderOptions {\n    readonly useWorker: boolean;\n}\n\nexport class NodeLoader {\n    readonly worker: Worker | undefined;\n    readonly handler;\n    readonly payloadPromises = new Map<string, PayloadPromiseMethods>();\n    abortAllPromise: Promise<void> = Promise.resolve();\n    private resolveAbortAll: (() => void) | undefined;\n    aborted = false;\n\n    constructor(options: NodeLoaderOptions) {\n        if (options.useWorker) {\n            const worker = this.worker = createWorker() as Worker;\n            worker.onmessage = e => {\n                this.receive(e.data as MessageResponse);\n            }\n        }\n        this.handler = new LoaderHandler(this.receive.bind(this));\n    }\n\n    setBuffer(buffer: SharedArrayBuffer) {\n        const msg: BufferMessage = { kind: \"buffer\", buffer };\n        this.send(msg);\n    }\n\n    get activeDownloads() {\n        return this.payloadPromises.size;\n    }\n\n    private send(msg: MessageRequest) {\n        const { worker, handler } = this;\n        if (worker) {\n            worker.postMessage(msg);\n        } else {\n            handler.receive(msg);\n        }\n    }\n\n    private receive(msg: MessageResponse) {\n        if (msg.kind == \"aborted_all\") {\n            const { resolveAbortAll } = this;\n            this.resolveAbortAll = undefined;\n            resolveAbortAll?.();\n            return;\n        }\n        const { id } = msg;\n        const { payloadPromises } = this;\n        const payloadPromise = payloadPromises.get(id);\n        if (payloadPromise) {\n            payloadPromises.delete(id);\n            const { resolve, reject } = payloadPromise;\n            switch (msg.kind) {\n                case \"ready\":\n                    resolve(msg);\n                    break;\n                case \"aborted\":\n                    resolve(undefined);\n                    break;\n                case \"error\":\n                    reject(msg.error);\n                    break;\n            }\n        }\n    }\n\n    abortAll() {\n        this.abortAllPromise = new Promise<void>((resolve) => {\n            this.resolveAbortAll = resolve;\n        })\n        const msg: AbortAllMessage = { kind: \"abort_all\" };\n        this.send(msg);\n        this.payloadPromises.clear();\n    }\n\n    dispose() {\n        const msg: CloseMessage = { kind: \"close\" };\n        this.send(msg);\n    }\n\n    parseNode(buffer: ArrayBuffer, id: string, deviceProfile: DeviceProfile, version: string): Promise<NodePayload | undefined> {\n        const { payloadPromises } = this;\n        const enableOutlines = deviceProfile.features.outline;\n        const applyFilter = true;\n        const parseMsg: ParseMessage = { kind: \"parse\", buffer, id, version, separatePositionsBuffer: true, enableOutlines, applyFilter };\n        const promise = new Promise<NodePayload | undefined>((resolve, reject) => {\n            payloadPromises.set(id, { resolve, reject });\n        });\n        this.send(parseMsg);\n        return promise;\n    }\n\n    loadNode(node: OctreeNode, version: string): Promise<NodePayload | undefined> {\n        const { payloadPromises } = this;\n        const { deviceProfile } = node.context.renderContext;\n        const { id, data } = node;\n        if (node.context.url == undefined) {\n            return Promise.resolve(undefined);\n        }\n        const url = new URL(node.context.url);\n        url.pathname += node.path;\n        const { byteSize } = data;\n        const enableOutlines = deviceProfile.features.outline;\n        const applyFilter = true;\n        const loadMsg: LoadMessage = { kind: \"load\", id, version, url: url.toString(), byteSize, separatePositionsBuffer: true, enableOutlines, applyFilter };\n        console.assert(byteSize != 0);\n        const abortMsg: AbortMessage = { kind: \"abort\", id };\n        const abort = () => { this.send(abortMsg); }\n        node.download = { abort };\n        this.send(loadMsg);\n        return new Promise<NodePayload | undefined>((resolve, reject) => {\n            payloadPromises.set(id, { resolve, reject });\n        });\n    }\n}\n", "import type { RenderStateColorGradient, RGB, RGBA } from \"core3d\";\nimport { vec4 } from \"gl-matrix\";\n\nexport function gradientRange(gradient: RenderStateColorGradient<RGB | RGBA>) {\n    if (gradient.knots.length == 0)\n        return [0, 0] as const;\n    return [gradient.knots[0].position, gradient.knots[gradient.knots.length - 1].position] as const;\n}\n\nexport function computeGradientColors(size: number, gradient: RenderStateColorGradient<RGB | RGBA>): Uint8ClampedArray {\n    const { knots } = gradient;\n    const n = knots.length;\n    const pixels = new Uint8ClampedArray(size * 4);\n    if (n > 0) {\n        const minValue = knots[0].position;\n        const maxValue = knots[n - 1].position;\n        let prevIndex = 0;\n        function getColor(index: number) {\n            const [r, g, b, a] = knots[index].color;\n            return vec4.fromValues(r, g, b, a ?? 1);\n        }\n        const color = getColor(0);\n        for (let i = 0; i < size; i++) {\n            const texel = (i + 0.5) / size * (maxValue - minValue) + minValue;\n            for (let j = prevIndex; j < n - 1; j++) {\n                prevIndex = j;\n                const e0 = knots[j].position;\n                const e1 = knots[j + 1].position;\n                const c0 = getColor(j);\n                const c1 = getColor(j + 1);\n                if (texel >= e0 && texel < e1) {\n                    const t = (texel - e0) / (e1 - e0);\n                    vec4.lerp(color, c0, c1, t);\n                    break;\n                }\n            }\n            const [r, g, b, a] = color;\n            pixels[i * 4 + 0] = r * 255;\n            pixels[i * 4 + 1] = g * 255;\n            pixels[i * 4 + 2] = b * 255;\n            pixels[i * 4 + 3] = a * 255;\n        }\n    }\n    return pixels;\n}\n", "import type { DerivedRenderState, RenderContext, RenderState, RenderStateGroupAction, RenderStateHighlightGroups, RenderStateScene, RGBATransform } from \"core3d\";\nimport type { RenderModuleContext } from \"..\";\nimport { createSceneRootNodes } from \"core3d/scene\";\nimport { NodeState, type OctreeContext, OctreeNode, Visibility, NodeGeometryKind } from \"./node\";\nimport { glClear, glDraw, glState, glTransformFeedback, glUpdateTexture } from \"webgl2\";\nimport { MaterialType } from \"./worker\";\nimport { getMultiDrawParams } from \"./mesh\";\nimport { type ReadonlyVec3, vec3, vec4 } from \"gl-matrix\";\nimport { NodeLoader } from \"./loader\";\nimport { computeGradientColors, gradientRange } from \"./gradient\";\n// import { BufferFlags } from \"@novorender/core3d/buffers\";\nimport { OctreeModule, Gradient, type Resources, type Uniforms, ShaderMode, ShaderPass } from \"./module\";\nimport { Mutex } from \"./mutex\";\nimport { useWorker } from \"./worker\";\nimport { decodeBase64 } from \"core3d/util\";\n\nconst enum UBO { camera, clipping, scene, node };\n\ninterface RenderNode {\n    readonly mask: number;\n    readonly node: OctreeNode;\n};\n\nexport interface RootNodes {\n    readonly [NodeGeometryKind.terrain]?: OctreeNode;\n    readonly [NodeGeometryKind.triangles]?: OctreeNode;\n    readonly [NodeGeometryKind.lines]?: OctreeNode;\n    readonly [NodeGeometryKind.points]?: OctreeNode;\n    readonly [NodeGeometryKind.documents]?: OctreeNode;\n}\n\nexport class OctreeModuleContext implements RenderModuleContext, OctreeContext {\n    readonly loader: NodeLoader;\n    readonly gradientsImage = new Uint8ClampedArray(Gradient.size * 2 * 4);\n    currentProgramFlags = OctreeModule.defaultProgramFlags;\n    debug = false;\n    suspendUpdates = false;\n\n    localSpaceTranslation = vec3.create() as ReadonlyVec3;\n    localSpaceChanged = false;\n    url: string | undefined;\n    // rootNode: OctreeNode | undefined;\n    rootNodes: RootNodes = {};\n    version: string = \"\";\n    projectedSizeSplitThreshold = 1; // baseline node size split threshold = 50% of view height\n    hidden = [false, false, false, false, false] as readonly [boolean, boolean, boolean, boolean, boolean];\n    readonly highlight;\n\n    constructor(readonly renderContext: RenderContext, readonly module: OctreeModule, readonly uniforms: Uniforms, readonly resources: Resources) {\n        this.loader = new NodeLoader({ useWorker });\n        const maxObjects = 10_000_000;// TODO: Get from device profile?\n        const maxByteLength = maxObjects + 4; // add four bytes for mutex\n        //@ts-ignore (TS does not yet declare types for constructor options, although this is supported on both chrome and safari)\n        const buffer = new SharedArrayBuffer(4, { maxByteLength });\n        this.loader.setBuffer(buffer);\n        this.highlight = {\n            buffer,\n            indices: new Uint8Array(buffer, 4),\n            mutex: new Mutex(buffer),\n        } as const;\n    }\n\n    get highlights() {\n        return this.highlight.indices;\n    }\n\n    update(state: DerivedRenderState) {\n        // const beginTime = performance.now();\n\n        const { renderContext, resources, uniforms, projectedSizeSplitThreshold, module } = this;\n        const { gl, deviceProfile } = renderContext;\n        const { scene, localSpaceTranslation, highlights, points, terrain, pick, output, clipping } = state;\n        const { values } = uniforms.scene;\n\n        let { currentProgramFlags } = this;\n        function updateShaderCompileConstants(flags: Partial<typeof currentProgramFlags>) {\n            type Keys = keyof typeof currentProgramFlags;\n            if ((Object.getOwnPropertyNames(flags) as Keys[]).some(key => currentProgramFlags[key] != flags[key])) {\n                currentProgramFlags = { ...currentProgramFlags, ...flags };\n            }\n        }\n\n        this.projectedSizeSplitThreshold = 1 / deviceProfile.detailBias;\n\n        if (values.iblMipCount != renderContext.iblTextures.numMipMaps) {\n            values.iblMipCount = renderContext.iblTextures.numMipMaps;\n        }\n\n        this.debug = state.debug.showNodeBounds;\n\n        let updateGradients = false;\n        if (renderContext.hasStateChanged({ points })) {\n            const { size, deviation } = points;\n            const { values } = uniforms.scene;\n            values.pixelSize = size.pixel ?? 0;\n            values.maxPixelSize = size.maxPixel ?? 20;\n            values.metricSize = size.metric ?? 0;\n            values.toleranceFactor = size.toleranceFactor ?? 0;\n            values.deviationIndex = deviation.index;\n            values.deviationFactor = deviation.mixFactor;\n            values.deviationRange = gradientRange(deviation.colorGradient);\n            values.useProjectedPosition = points.useProjectedPosition;\n            const deviationColors = computeGradientColors(Gradient.size, deviation.colorGradient);\n            this.gradientsImage.set(deviationColors, 0 * Gradient.size * 4);\n            updateGradients = true;\n        }\n\n        if (renderContext.hasStateChanged({ terrain })) {\n            const { values } = uniforms.scene;\n            values.elevationRange = gradientRange(terrain.elevationGradient);\n            const elevationColors = computeGradientColors(Gradient.size, terrain.elevationGradient);\n            this.gradientsImage.set(elevationColors, 1 * Gradient.size * 4);\n            updateGradients = true;\n        }\n\n        if (renderContext.hasStateChanged({ pick })) {\n            const { values } = uniforms.scene;\n            values.pickOpacityThreshold = pick.opacityThreshold;\n        }\n\n        if (updateGradients) {\n            glUpdateTexture(gl, resources.gradientsTexture, { ...module.gradientImageParams, image: this.gradientsImage });\n        }\n\n        if (renderContext.hasStateChanged({ scene })) {\n            const { prevState } = renderContext;\n            if (scene) {\n                const { hide } = scene;\n                if (hide != prevState?.scene?.hide) {\n                    if (hide) {\n                        const { terrain, triangles, lines, points, documents } = hide;\n                        this.hidden = [terrain ?? false, triangles ?? false, lines ?? false, points ?? false, documents ?? false];\n                    } else {\n                        this.hidden = [true, false, false, false, false];\n                    }\n                }\n            }\n\n            if (scene?.url != this.url) {\n                if (this.url) {\n                    this.loader.abortAll(); // abort any pending downloads for previous scene\n                }\n\n                // delete existing scene\n                for (const rootNode of Object.values(this.rootNodes)) {\n                    rootNode.dispose();\n                }\n                this.rootNodes = {};\n\n                // update material atlas if url has changed\n                const url = scene?.url;\n                if (url != this.url) {\n                    const { highlight } = this;\n                    const numObjects = scene?.config.numObjects ?? 0;\n                    const numBytes = numObjects + 4; // add four bytes for mutex\n                    if (highlight.buffer.byteLength != numBytes) {\n                        highlight.mutex.lockSpin();\n                        if (numBytes > highlight.buffer.byteLength) {\n                            //@ts-ignore\n                            highlight.buffer.grow(numBytes);\n                        }\n                        type Mutable<T> = { -readonly [P in keyof T]: T[P] };\n                        (highlight as Mutable<typeof highlight>).indices = new Uint8Array(highlight.buffer, 4, numObjects);\n                        updateHighlightBuffer(highlight.indices, state.highlights);\n                        highlight.mutex.unlock();\n                    }\n                    this.url = url;\n                    if (url) {\n                        const materialData = makeMaterialAtlas(state);\n                        if (materialData) {\n                            glUpdateTexture(gl, resources.materialTexture, { kind: \"TEXTURE_2D\", width: 256, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: materialData });\n                        }\n                    }\n                }\n\n                // initiate loading of scene\n                if (scene) {\n                    this.version = scene.config.version;\n                    this.reloadScene(scene);\n                }\n            }\n        }\n\n        const { rootNodes } = this;\n\n        if (renderContext.hasStateChanged({ localSpaceTranslation })) {\n            this.localSpaceChanged = localSpaceTranslation !== this.localSpaceTranslation;\n            this.localSpaceTranslation = localSpaceTranslation;\n        }\n\n        if (renderContext.hasStateChanged({ highlights })) {\n            const { groups } = highlights;\n            const { highlight } = this;\n            const { prevState } = renderContext;\n            const prevGroups = prevState?.highlights.groups ?? [];\n\n            updateShaderCompileConstants({ highlight: groups.length > 0 });\n\n            const { values } = uniforms.scene;\n            values.applyDefaultHighlight = highlights.defaultAction != undefined;\n\n            // are there any potential changes to filtering\n            if (scene) {\n                const n = Math.max(groups.length, prevGroups.length);\n                let reload = false;\n                const prevDefaultAction = prevState?.highlights.defaultAction;\n                const currDefaultAction = state.highlights.defaultAction;\n                if (prevDefaultAction != currDefaultAction && prevDefaultAction == \"filter\" || currDefaultAction == \"filter\") {\n                    reload = true;\n                } else {\n                    for (let i = 0; i < n; i++) {\n                        if (groups[i] != prevGroups[i] && (groups[i]?.action == \"filter\" || prevGroups[i]?.action == \"filter\")) {\n                            reload = true;\n                            break;\n                        }\n                    }\n                }\n                if (reload) {\n                    this.reloadScene(scene);\n                }\n            }\n\n            const transforms = [highlights.defaultAction, ...groups.map(g => g.action)];\n            const prevTransforms = prevState ?\n                [\n                    prevState.highlights.defaultAction,\n                    ...prevState.highlights.groups.map(g => g.action)\n                ] : [];\n            if (!sequenceEqual(transforms, prevTransforms)) {\n                // update highlight matrices\n                const image = createColorTransforms(highlights);\n                glUpdateTexture(gl, resources.highlightTexture, { kind: \"TEXTURE_2D\", width: 256, height: 5, internalFormat: \"RGBA32F\", type: \"FLOAT\", image });\n            }\n\n            const objectIds = groups.map(g => g.objectIds);\n            const prevObjectIds = prevState?.highlights.groups.map(g => g.objectIds) ?? [];\n            const objectIdsChanged = !sequenceEqual(objectIds, prevObjectIds);\n\n            // do async stuff below\n            if (objectIdsChanged) {\n                highlight.mutex.lockSpin(); // worker should not hold this lock for long, so we're fine spinning until it's available.\n                updateHighlightBuffer(highlight.indices, highlights);\n                highlight.mutex.unlock();\n\n                // update highlight vertex attributes\n                const nodes: OctreeNode[] = [];\n                for (const rootNode of Object.values(rootNodes)) {\n                    nodes.push(...iterateNodes(rootNode));\n                }\n                // const highlights = createHighlightsMap(groups, nodes);\n                for (const node of nodes) {\n                    node.applyHighlights(highlight.indices);\n                }\n                // renderContext.changed = true; // notify of changes, in case mutex lock went async\n            };\n        }\n\n        if (renderContext.hasStateChanged({ clipping })) {\n            updateShaderCompileConstants({ clip: clipping.enabled });\n        }\n\n        if (renderContext.hasStateChanged({ output })) {\n            updateShaderCompileConstants({ dither: output.samplesMSAA <= 1 });\n        }\n\n        renderContext.updateUniformBuffer(resources.sceneUniforms, uniforms.scene);\n\n        // recompile shader programs if flags have changed\n        if (this.currentProgramFlags != currentProgramFlags) {\n            this.currentProgramFlags = currentProgramFlags;\n            OctreeModule.compileShaders(renderContext, resources.bin, resources.programs, currentProgramFlags).then(() => {\n                // console.log(`new render program flags:`, currentProgramFlags);\n                renderContext.changed = true;\n            });\n        }\n\n        if (!this.suspendUpdates) {\n            const nodes: OctreeNode[] = [];\n            for (const rootNode of Object.values(rootNodes)) {\n                rootNode.update(state); // recursively update all nodes' visibility and projectedSize++\n\n                // collapse nodes\n                const preCollapseNodes = [...iterateNodes(rootNode)];\n                for (const node of preCollapseNodes) {\n                    if (!node.shouldSplit(projectedSizeSplitThreshold * 0.98)) { // add a little \"slack\" before collapsing back again\n                        if (node.state != NodeState.collapsed) {\n                            node.dispose(); // collapse node\n                        }\n                    }\n                }\n                nodes.push(...iterateNodes(rootNode));\n            }\n\n            nodes.sort((a, b) => b.projectedSize - a.projectedSize); // sort by descending projected size\n\n            const { maxGPUBytes } = deviceProfile.limits; // 1_000_000_000;\n            const { maxPrimitives } = deviceProfile.limits; // 2_000_000;\n            let gpuBytes = 0;\n            let primitives = 0; // # rendered primitives (points, lines and triangles)\n            for (const node of nodes) {\n                if (node.hasGeometry) {\n                    gpuBytes += node.data.gpuBytes;\n                    primitives += node.renderedPrimitives;\n                }\n                if (node.state == NodeState.requestDownload || node.state == NodeState.downloading) {\n                    // include projected resources in the budget\n                    primitives += node.data.primitivesDelta;\n                    gpuBytes += node.data.gpuBytes;\n                }\n            }\n\n            // split nodes based on camera orientation\n            for (const node of nodes) {\n                if (node.shouldSplit(projectedSizeSplitThreshold)) {\n                    if (node.state == NodeState.collapsed) {\n                        if (primitives + node.data.primitivesDelta <= maxPrimitives && gpuBytes + node.data.gpuBytes <= maxGPUBytes) {\n                            node.state = NodeState.requestDownload;\n                            primitives += node.data.primitivesDelta;\n                            gpuBytes += node.data.gpuBytes;\n                        }\n                    }\n                }\n            }\n            sessionStorage.setItem(\"gpu_bytes\", gpuBytes.toLocaleString());\n            sessionStorage.setItem(\"primitives\", primitives.toLocaleString());\n\n            const maxDownloads = 8;\n            let availableDownloads = maxDownloads - this.loader.activeDownloads;\n            for (const node of nodes) {\n                if (availableDownloads > 0 && node.state == NodeState.requestDownload) {\n                    node.downloadNode();\n                    availableDownloads--;\n                }\n            }\n        }\n        const endTime = performance.now();\n        // console.log(endTime - beginTime);\n    }\n\n    applyDefaultAttributeValues() {\n        const { gl } = this.renderContext;\n        // we need to provide default values for non-float vertex attributes in case they are not included in vertex buffer to avoid getting a type binding error.\n        gl.vertexAttribI4ui(VertexAttributeIds.material, 0xff, 0, 0, 0);\n        gl.vertexAttribI4ui(VertexAttributeIds.objectId, 0xffffffff, 0, 0, 0);\n        gl.vertexAttrib4f(VertexAttributeIds.color0, 0, 0, 0, 0);\n        gl.vertexAttrib4f(VertexAttributeIds.projectedPos, 0, 0, 0, 0);\n        gl.vertexAttrib4f(VertexAttributeIds.deviations, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        gl.vertexAttribI4ui(VertexAttributeIds.highlight, 0, 0, 0, 0);\n    }\n\n    getRenderNodes(projectedSizeSplitThreshold: number, rootNode: OctreeNode | undefined): readonly RenderNode[] {\n        // create list of meshes that we can sort by material/state?\n        const nodes: RenderNode[] = [];\n        function iterate(node: OctreeNode): boolean {\n            let rendered = false;\n            if (node.visibility != Visibility.none) {\n                let mask = node.data.childMask;\n                if (node.shouldSplit(projectedSizeSplitThreshold)) {\n                    for (const child of node.children) {\n                        if (child.hasGeometry) {\n                            rendered = true;\n                            if (iterate(child)) {\n                                mask &= ~(1 << child.data.childIndex);\n                            }\n                        }\n                    }\n                }\n                if (mask) {\n                    rendered = true;\n                    nodes.push({ mask, node });\n                }\n            }\n            return rendered;\n        }\n        if (rootNode) {\n            iterate(rootNode);\n            nodes.sort((a, b) => a.node.viewDistance - b.node.viewDistance); // sort nodes front to back, i.e. ascending view distance\n        }\n        return nodes;\n    }\n\n    prepass(state: DerivedRenderState) {\n        const { resources, renderContext } = this;\n        const { programs } = resources;\n        const { gl } = renderContext;\n        for (const rootNode of Object.values(this.rootNodes)) {\n            const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, rootNode);\n            glState(gl, {\n                program: programs.pre,\n                depth: { test: true },\n            });\n            gl.activeTexture(gl.TEXTURE0);\n            const meshState: MeshState = {};\n            for (const { mask, node } of renderNodes) {\n                this.renderNode(node, mask, meshState, ShaderPass.pre);\n            }\n            gl.bindTexture(gl.TEXTURE_2D, null);\n        }\n    }\n\n    render(state: DerivedRenderState) {\n        const { resources, renderContext, debug } = this;\n        const { usePrepass, samplerSingle, samplerMip } = renderContext;\n        const { programs, sceneUniforms, samplerNearest, materialTexture, highlightTexture, gradientsTexture } = resources;\n        const { gl, iblTextures, cameraUniforms, clippingUniforms, outlineUniforms, deviceProfile } = renderContext;\n\n        // glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 });\n\n        const { diffuse, specular } = iblTextures;\n        glState(gl, {\n            program: programs.color,\n            uniformBuffers: [cameraUniforms, clippingUniforms, sceneUniforms, null],\n            cull: { enable: true, },\n            depth: {\n                test: true,\n                writeMask: true,\n                func: usePrepass ? \"LEQUAL\" : \"LESS\",\n            },\n            textures: [\n                { kind: \"TEXTURE_2D\", texture: null, sampler: samplerSingle }, // basecolor - will be overridden by nodes that have textures, e.g. terrain nodes.\n                { kind: \"TEXTURE_CUBE_MAP\", texture: diffuse, sampler: samplerNearest },\n                { kind: \"TEXTURE_CUBE_MAP\", texture: specular, sampler: samplerMip },\n                { kind: \"TEXTURE_2D\", texture: materialTexture, sampler: samplerNearest },\n                { kind: \"TEXTURE_2D\", texture: highlightTexture, sampler: samplerNearest },\n                { kind: \"TEXTURE_2D\", texture: gradientsTexture, sampler: samplerNearest },\n            ],\n        });\n        this.applyDefaultAttributeValues();\n        gl.activeTexture(gl.TEXTURE0);\n\n        for (const rootNode of Object.values(this.rootNodes)) {\n            const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, rootNode);\n            const meshState: MeshState = {};\n            for (const { mask, node } of renderNodes) {\n                this.renderNode(node, mask, meshState, ShaderPass.color);\n            }\n            if (rootNode.geometryKind == NodeGeometryKind.terrain && state.terrain.asBackground) {\n                glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 });\n            }\n        }\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n        if (state.outlines.enabled && deviceProfile.features.outline) {\n            // transform outline plane into local space\n            const [x, y, z, offset] = state.outlines.plane;\n            const plane = vec4.fromValues(x, y, z, -offset);\n\n            // render clipping outlines\n            glState(gl, {\n                uniformBuffers: [cameraUniforms, clippingUniforms, outlineUniforms, null],\n                depth: {\n                    test: false,\n                    writeMask: false\n                },\n            });\n            const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, this.rootNodes[NodeGeometryKind.triangles]);\n            for (const { mask, node } of renderNodes) {\n                if (node.intersectsPlane(plane)) {\n                    this.renderNodeClippingOutline(node, mask);\n                }\n            }\n        }\n\n        if (debug) {\n            for (const rootNode of Object.values(this.rootNodes)) {\n                const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, rootNode);\n                glState(gl, {\n                    program: programs.debug,\n                    uniformBuffers: [cameraUniforms, clippingUniforms, sceneUniforms, null],\n                    depth: {\n                        test: true,\n                        writeMask: false,\n                        func: \"GREATER\",\n                    },\n                    cull: { enable: true, },\n                    blend: {\n                        enable: true,\n                        srcRGB: \"CONSTANT_ALPHA\",\n                        dstRGB: \"ONE_MINUS_CONSTANT_ALPHA\",\n                        color: [0, 0, 0, .25],\n                    },\n                    // drawBuffers: renderContext.drawBuffers(BufferFlags.color),\n                });\n                for (const { mask, node } of renderNodes) {\n                    this.renderNodeDebug(node);\n                }\n\n                glState(gl, {\n                    program: programs.debug,\n                    depth: { func: \"LESS\", },\n                    blend: {\n                        color: [0, 0, 0, .75],\n                    },\n                });\n                for (const { mask, node } of renderNodes) {\n                    this.renderNodeDebug(node);\n                }\n            }\n        }\n    }\n\n    pick() {\n        const { resources, renderContext } = this;\n        const { gl, cameraUniforms, clippingUniforms, outlineUniforms, samplerSingle, samplerMip, iblTextures, prevState, deviceProfile } = renderContext;\n        const { programs, sceneUniforms, samplerNearest, materialTexture, highlightTexture, gradientsTexture } = resources;\n        const { diffuse, specular } = iblTextures;\n        const state = prevState!;\n\n        for (const rootNode of Object.values(this.rootNodes)) {\n            const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, rootNode);\n            glState(gl, {\n                program: programs.pick,\n                uniformBuffers: [cameraUniforms, clippingUniforms, sceneUniforms, null],\n                cull: { enable: true, },\n                textures: [\n                    { kind: \"TEXTURE_2D\", texture: null, sampler: samplerSingle }, // basecolor - will be overridden by nodes that have textures, e.g. terrain nodes.\n                    { kind: \"TEXTURE_CUBE_MAP\", texture: diffuse, sampler: samplerNearest },\n                    { kind: \"TEXTURE_CUBE_MAP\", texture: specular, sampler: samplerMip },\n                    { kind: \"TEXTURE_2D\", texture: materialTexture, sampler: samplerNearest },\n                    { kind: \"TEXTURE_2D\", texture: highlightTexture, sampler: samplerNearest },\n                    { kind: \"TEXTURE_2D\", texture: gradientsTexture, sampler: samplerNearest },\n                ],\n            });\n            this.applyDefaultAttributeValues();\n            gl.activeTexture(gl.TEXTURE0);\n            const meshState: MeshState = {};\n            for (const { mask, node } of renderNodes) {\n                this.renderNode(node, mask, meshState, ShaderPass.pick);\n            }\n            gl.bindTexture(gl.TEXTURE_2D, null);\n\n            if (state.outlines.enabled && deviceProfile.features.outline) {\n                // render clipping outlines\n                glState(gl, {\n                    uniformBuffers: [cameraUniforms, outlineUniforms, null],\n                    depth: {\n                        test: false,\n                        writeMask: false\n                    },\n                });\n                for (const { mask, node } of renderNodes) {\n                    if (node.intersectsPlane(state.viewFrustum.near)) {\n                        this.renderNodeClippingOutline(node, mask);\n                    }\n                }\n            }\n\n            if (rootNode.geometryKind == NodeGeometryKind.terrain && state.terrain.asBackground) {\n                glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 });\n            }\n        }\n    }\n\n    renderNode(node: OctreeNode, mask: number, meshState: MeshState, pass: ShaderPass) {\n        const { renderContext } = this;\n        const { gl } = renderContext;\n        const { resources } = this;\n        const { programs } = resources;\n        const { data } = node;\n        const prepass = pass == ShaderPass.pre;\n        if (mask && node.uniforms) {\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, UBO.node, node.uniforms);\n            for (const mesh of node.meshes) {\n                const { materialType } = mesh;\n                const isTransparent = materialType == MaterialType.transparent;\n                if (prepass && isTransparent)\n                    continue;\n                gl.bindVertexArray(prepass ? mesh.vaoPosOnly : mesh.vao);\n                const mode = mesh.materialType == MaterialType.elevation ? ShaderMode.terrain : mesh.drawParams.mode == \"POINTS\" ? ShaderMode.points : ShaderMode.triangles;\n                if (meshState.mode != mode) {\n                    meshState.mode = mode;\n                    gl.useProgram(programs[pass][mode]);\n                }\n                const doubleSided = mesh.materialType != MaterialType.opaque;\n                if (meshState.doubleSided != doubleSided) {\n                    meshState.doubleSided = doubleSided;\n                    if (doubleSided) {\n                        gl.disable(gl.CULL_FACE);\n                    } else {\n                        gl.enable(gl.CULL_FACE);\n                    }\n                }\n                if (pass == ShaderPass.color || pass == ShaderPass.pick) {\n                    gl.bindTexture(gl.TEXTURE_2D, mesh.baseColorTexture ?? resources.defaultBaseColorTexture);\n                }\n                if (mask == data.childMask) {\n                    const stats = glDraw(gl, mesh.drawParams);\n                    renderContext[\"addRenderStatistics\"](stats);\n                } else {\n                    // determine which portions of the parent node must be rendered based on what children currently don't render themselves\n                    const multiDrawParams = getMultiDrawParams(mesh, mask);\n                    if (multiDrawParams) {\n                        const stats = glDraw(gl, multiDrawParams);\n                        renderContext[\"addRenderStatistics\"](stats);\n                    }\n                }\n            }\n        }\n    }\n\n    renderNodeClippingOutline(node: OctreeNode, mask: number) {\n        const { resources, renderContext, module } = this;\n        const { gl } = renderContext;\n        const { programs, transformFeedback, vb_line, vao_line } = resources;\n        if (mask && node.uniforms) {\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, UBO.node, node.uniforms);\n            for (const mesh of node.meshes) {\n                if (mesh.numTriangles && mesh.drawParams.mode == \"TRIANGLES\" && !mesh.baseColorTexture) {\n                    for (const drawRange of mesh.drawRanges) {\n                        if ((1 << drawRange.childIndex) & mask) {\n                            const count = drawRange.count / 3;\n                            const first = drawRange.first / 3;\n                            console.assert(count * 2 <= module.maxLines);\n                            // find triangle intersections\n                            glState(gl, {\n                                program: programs.intersect,\n                                vertexArrayObject: mesh.vaoTriangles,\n                            });\n                            glTransformFeedback(gl, { kind: \"POINTS\", transformFeedback, outputBuffers: [vb_line!], count, first });\n\n                            // draw lines\n                            glState(gl, {\n                                program: programs.line,\n                                vertexArrayObject: vao_line,\n                            });\n                            const stats = glDraw(gl, { kind: \"arrays_instanced\", mode: \"LINES\", count: 2, instanceCount: count });\n                            renderContext[\"addRenderStatistics\"](stats);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    renderNodeDebug(node: OctreeNode) {\n        const { renderContext } = this;\n        const { gl } = renderContext;\n\n        if (node.renderedChildMask && node.uniforms) {\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, UBO.node, node.uniforms ?? null);\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLES\", count: 8 * 12 });\n            renderContext[\"addRenderStatistics\"](stats);\n        }\n    }\n\n    contextLost() {\n        const { loader, rootNodes } = this;\n        loader.abortAll();\n        for (const rootNode of Object.values(rootNodes)) {\n            rootNode?.dispose(); // consider retaining submesh js data\n        }\n    }\n\n    dispose() {\n        this.contextLost();\n        this.resources.bin.dispose();\n        this.rootNodes = {};\n    }\n\n    private async reloadScene(scene: RenderStateScene) {\n        this.suspendUpdates = true;\n        await this.loader.abortAllPromise; // make sure we wait for any previous aborts to complete\n        const rootNodes = await createSceneRootNodes(this, scene.config, this.renderContext.deviceProfile);\n        if (rootNodes) {\n            this.rootNodes = rootNodes;\n        }\n        this.suspendUpdates = false;\n        this.renderContext.changed = true;\n    }\n}\n\nfunction makeMaterialAtlas(state: DerivedRenderState) {\n    const { scene } = state;\n    if (scene) {\n        const { config } = scene;\n        const { numMaterials } = config;\n        if (numMaterials) {\n            const { diffuse, opacity } = config.materialProperties;\n            console.assert(numMaterials <= 256);\n            function zeroes() { return new Uint8ClampedArray(numMaterials); };\n            function ones() { const a = new Uint8ClampedArray(numMaterials); a.fill(255); return a; };\n            const red = decodeBase64(diffuse.red, Uint8ClampedArray) ?? zeroes();\n            const green = decodeBase64(diffuse.green, Uint8ClampedArray) ?? zeroes();\n            const blue = decodeBase64(diffuse.blue, Uint8ClampedArray) ?? zeroes();\n            const alpha = decodeBase64(opacity, Uint8ClampedArray) ?? ones();\n            const srcData = interleaveRGBA(red, green, blue, alpha);\n            return srcData;\n        }\n    }\n}\n\n\nconst enum Highlight {\n    default = 0,\n    hidden = 0xfe,\n    filtered = 0xff,\n}\n\nfunction updateHighlightBuffer(buffer: Uint8Array, highlight: RenderStateHighlightGroups) {\n    const { defaultAction, groups } = highlight;\n    function getIndex(action: RenderStateGroupAction | undefined, value: number) {\n        return action == \"hide\" ? Highlight.hidden : action == \"filter\" ? Highlight.filtered : value;\n    }\n    const defaultValue = getIndex(defaultAction, Highlight.default);\n    buffer.fill(defaultValue);\n    // apply highlight groups\n    let groupIndex = 1;\n    for (const group of groups) {\n        const idx = getIndex(group.action, groupIndex);\n        for (const objectId of group.objectIds) {\n            buffer[objectId] = idx;\n        }\n        groupIndex++;\n    }\n}\n\n\nfunction* iterateNodes(node: OctreeNode | undefined): IterableIterator<OctreeNode> {\n    if (node) {\n        yield node;\n        for (const child of node.children) {\n            yield* iterateNodes(child);\n        }\n    }\n}\n\nfunction createColorTransforms(highlights: RenderStateHighlightGroups) {\n    const numColorMatrices = 256;\n    const numColorMatrixCols = 5;\n    const numColorMatrixRows = 4;\n\n    const colorMatrices = new Float32Array(numColorMatrices * numColorMatrixRows * numColorMatrixCols);\n    // initialize with identity matrices\n    for (let i = 0; i < numColorMatrices; i++) {\n        for (let j = 0; j < numColorMatrixCols; j++) {\n            colorMatrices[(numColorMatrices * j + i) * 4 + j] = 1;\n        }\n    }\n\n    function copyMatrix(index: number, rgbaTransform: RGBATransform) {\n        for (let col = 0; col < numColorMatrixCols; col++) {\n            for (let row = 0; row < numColorMatrixRows; row++) {\n                colorMatrices[(numColorMatrices * col + index) * 4 + row] = rgbaTransform[col + row * numColorMatrixCols];\n            }\n        }\n    }\n\n    // Copy transformation matrices\n    const { defaultAction, groups } = highlights;\n    copyMatrix(0, getRGBATransform(defaultAction));\n    for (let i = 0; i < groups.length; i++) {\n        copyMatrix(i + 1, getRGBATransform(groups[i].action));\n    }\n    return colorMatrices;\n}\n\nfunction interleaveRGBA(r: Uint8ClampedArray, g: Uint8ClampedArray, b: Uint8ClampedArray, a: Uint8ClampedArray) {\n    const n = r.length;\n    console.assert(n == g.length && n == b.length && n == a.length);\n    const rgba = new Uint8ClampedArray(256 * 4);\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        rgba[j++] = r[i];\n        rgba[j++] = g[i];\n        rgba[j++] = b[i];\n        rgba[j++] = a[i];\n    }\n    return rgba;\n}\n\nfunction sequenceEqual(a: any[], b: any[]) {\n    if (a.length != b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst defaultRGBATransform: RGBATransform = [\n    1, 0, 0, 0, 0,\n    0, 1, 0, 0, 0,\n    0, 0, 1, 0, 0,\n    0, 0, 0, 1, 0,\n];\n\n\nfunction getRGBATransform(action: RenderStateGroupAction | undefined): RGBATransform {\n    return (typeof action != \"string\" && Array.isArray(action)) ? action : defaultRGBATransform;\n}\n\nconst enum VertexAttributeIds {\n    position,\n    normal,\n    material,\n    objectId,\n    texCoord0,\n    color0,\n    projectedPos,\n    deviations,\n    highlight,\n};\n\ninterface MeshState {\n    mode?: ShaderMode;\n    doubleSided?: boolean;\n}\n", "import type { DeviceProfile, RenderContext } from \"core3d\";\nimport type { RenderModule } from \"..\";\nimport { glUBOProxy, type TextureParams2DUncompressed, type UniformTypes } from \"webgl2\";\nimport { shaders } from \"./shaders\";\nimport type { ResourceBin } from \"core3d/resource\";\nimport { OctreeModuleContext } from \"./context\";\n\nexport const enum ShaderPass { color, pick, pre };\nexport const enum ShaderMode { triangles, points, terrain };\nexport const enum Gradient { size = 1024 };\n\nexport class OctreeModule implements RenderModule {\n    readonly kind = \"octree\";\n    readonly sceneUniforms = {\n        applyDefaultHighlight: \"bool\",\n        iblMipCount: \"float\",\n        pixelSize: \"float\",\n        maxPixelSize: \"float\",\n        metricSize: \"float\",\n        toleranceFactor: \"float\",\n        deviationIndex: \"int\",\n        deviationFactor: \"float\",\n        deviationRange: \"vec2\",\n        useProjectedPosition: \"bool\",\n        elevationRange: \"vec2\",\n        pickOpacityThreshold: \"float\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    readonly gradientImageParams: TextureParams2DUncompressed = { kind: \"TEXTURE_2D\", width: Gradient.size, height: 2, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: null };\n    readonly maxHighlights = 8;\n\n    static readonly textureNames = [\"base_color\", \"ibl.diffuse\", \"ibl.specular\", \"materials\", \"highlights\", \"gradients\"] as const;\n    static readonly textureUniforms = OctreeModule.textureNames.map(name => `textures.${name}`);\n    static readonly uniformBufferBlocks = [\"Camera\", \"Clipping\", \"Scene\", \"Node\"];\n    static readonly passes = [ShaderPass.color, ShaderPass.pick, ShaderPass.pre] as const;\n    static readonly modes = [ShaderMode.triangles, ShaderMode.points, ShaderMode.terrain] as const;\n\n    async withContext(context: RenderContext) {\n        const uniforms = this.createUniforms();\n        const resources = await this.createResources(context, uniforms);\n        return new OctreeModuleContext(context, this, uniforms, resources);\n    }\n\n    createUniforms() {\n        return {\n            scene: glUBOProxy(this.sceneUniforms),\n        } as const;\n    }\n\n    async createResources(context: RenderContext, uniforms: Uniforms) {\n        const bin = context.resourceBin(\"Watermark\");\n        const sceneUniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniforms.scene.buffer });\n        const samplerNearest = bin.createSampler({ minificationFilter: \"NEAREST\", magnificationFilter: \"NEAREST\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\n        const defaultBaseColorTexture = bin.createTexture({ kind: \"TEXTURE_2D\", width: 1, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: new Uint8Array([255, 255, 255, 255]) });\n        const materialTexture = bin.createTexture({ kind: \"TEXTURE_2D\", width: 256, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: null });\n        const highlightTexture = bin.createTexture({ kind: \"TEXTURE_2D\", width: 256, height: 5, internalFormat: \"RGBA32F\", type: \"FLOAT\", image: null });\n        const gradientsTexture = bin.createTexture(this.gradientImageParams);\n\n        const { outline } = context.deviceProfile.features;\n        const transformFeedback = bin.createTransformFeedback()!;\n        let vb_line: WebGLBuffer | null = null;\n        let vao_line: WebGLVertexArrayObject | null = null;\n        if (outline) {\n            vb_line = bin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: this.maxLines * 24, usage: \"STATIC_DRAW\" });\n            vao_line = bin.createVertexArray({\n                attributes: [\n                    { kind: \"FLOAT_VEC4\", buffer: vb_line, byteStride: 24, byteOffset: 0, componentType: \"FLOAT\", divisor: 1 }, // positions in plane space (line vertex pair)\n                    { kind: \"FLOAT\", buffer: vb_line, byteStride: 24, byteOffset: 16, componentType: \"FLOAT\", divisor: 1 }, // opacity\n                    { kind: \"UNSIGNED_INT\", buffer: vb_line, byteStride: 24, byteOffset: 20, componentType: \"UNSIGNED_INT\", divisor: 1 }, // object_id\n                ],\n            });\n        }\n\n        const { textureUniforms, uniformBufferBlocks } = OctreeModule;\n        const programs = {} as Mutable<Programs>;\n        const shadersPromise = OctreeModule.compileShaders(context, bin, programs);\n        const [/*color, pick, pre,*/ intersect, line, debug] = await Promise.all([\n            // context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, textureUniforms, header: OctreeModule.shaderConstants(ShaderPass.color, ShaderMode.triangles) }),\n            // context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, textureUniforms, header: OctreeModule.shaderConstants(ShaderPass.pick, ShaderMode.triangles) }),\n            // context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, textureUniforms, header: OctreeModule.shaderConstants(ShaderPass.pre, ShaderMode.triangles) }),\n            context.makeProgramAsync(bin, { ...shaders.intersect, uniformBufferBlocks: [\"Camera\", \"Clipping\", \"Outline\", \"Node\"], transformFeedback: { varyings: [\"line_vertices\", \"opacity\", \"object_id\"], bufferMode: \"INTERLEAVED_ATTRIBS\" } }),\n            context.makeProgramAsync(bin, { ...shaders.line, uniformBufferBlocks: [\"Camera\", \"Clipping\", \"Outline\", \"Node\"] }),\n            context.makeProgramAsync(bin, { ...shaders.debug, uniformBufferBlocks }),\n            shadersPromise,\n        ]);\n        // const programs = { color, pick, pre, intersect, line, debug };\n        programs.intersect = intersect;\n        programs.line = line;\n        programs.debug = debug;\n        // const programs = { intersect, line, debug };\n        return {\n            bin, programs,\n            transformFeedback, vb_line, vao_line,\n            sceneUniforms, samplerNearest, defaultBaseColorTexture, materialTexture, highlightTexture, gradientsTexture\n        } as const;\n    }\n\n    static readonly defaultProgramFlags = {\n        clip: false as boolean,\n        dither: false as boolean,\n        highlight: false as boolean,\n    } as const;\n\n    static shaderConstants(deviceProfile: DeviceProfile, pass: ShaderPass, mode: ShaderMode, programFlags = OctreeModule.defaultProgramFlags) {\n        const { clip, dither, highlight } = programFlags;\n        const flags: string[] = [];\n        if (clip || deviceProfile.quirks.slowShaderRecompile) { //Always complie in clip on devices with slow recomplie.\n            flags.push(\"CLIP\");\n        }\n        if (dither) {\n            flags.push(\"DITHER\");\n        }\n        if (highlight) {\n            flags.push(\"HIGHLIGHT\");\n        }\n        if (deviceProfile.quirks.adreno600) {\n            flags.push(\"ADRENO600\");\n        }\n        const defines = [\n            { name: \"PASS\", value: pass.toString() },\n            { name: \"MODE\", value: mode.toString() },\n        ];\n        return { defines, flags } as const;\n    }\n\n    static async compileShaders(context: RenderContext, bin: ResourceBin, programs: Mutable<Programs>, programFlags = OctreeModule.defaultProgramFlags): Promise<void> {\n        const { textureUniforms, uniformBufferBlocks } = OctreeModule;\n        const promises: Promise<void>[] = [];\n        for (const pass of OctreeModule.passes) {\n            const modes = (programs[pass] ??= {} as ModePrograms) as Mutable<ModePrograms>;\n            for (const mode of OctreeModule.modes) {\n                const promise = context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, textureUniforms, header: OctreeModule.shaderConstants(context.deviceProfile, pass, mode, programFlags) });\n                const compiledPromise = promise.then(program => {\n                    modes[mode] = program;\n                });\n                promises.push(compiledPromise);\n            }\n        }\n        await Promise.all(promises);\n    }\n\n    readonly maxLines = 1024 * 1024; // TODO: find a proper size!\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\nexport type Uniforms = ReturnType<OctreeModule[\"createUniforms\"]>;\nexport type Resources = Awaited<ReturnType<OctreeModule[\"createResources\"]>>;\ntype PassPrograms = { readonly [P in keyof typeof ShaderPass]: ModePrograms };\ntype ModePrograms = { readonly [P in keyof typeof ShaderMode]: WebGLProgram };\nexport interface Programs extends PassPrograms {\n    readonly intersect: WebGLProgram;\n    readonly line: WebGLProgram;\n    readonly debug: WebGLProgram;\n}\n\n", "import type { DerivedRenderState, RenderContext } from \"core3d\";\nimport type { RenderModuleContext, RenderModule } from \"..\";\nimport { glUBOProxy, glDraw, glState, type UniformTypes } from \"webgl2\";\nimport vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\n\nexport class TonemapModule implements RenderModule {\n    readonly kind = \"tonemap\";\n    readonly uniforms = {\n        exposure: \"float\",\n        mode: \"uint\",\n        maxLinearDepth: \"float\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    async withContext(context: RenderContext) {\n        const uniforms = this.createUniforms();\n        const resources = await this.createResources(context, uniforms);\n        return new TonemapModuleContext(context, this, uniforms, resources);\n    }\n\n    createUniforms() {\n        return glUBOProxy(this.uniforms);\n    }\n\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\n        const bin = context.resourceBin(\"Tonemap\");\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: uniformsProxy.buffer.byteLength });\n        const sampler = bin.createSampler({ minificationFilter: \"NEAREST\", magnificationFilter: \"NEAREST\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\n        const textureNames = [\"color\", \"pick\", \"zbuffer\"] as const;\n        const textureUniforms = textureNames.map(name => `textures.${name}`);\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks: [\"Tonemapping\"], textureUniforms })\n        return { bin, uniforms, sampler, program } as const;\n    }\n}\n\ntype Uniforms = ReturnType<TonemapModule[\"createUniforms\"]>;\ntype Resources = Awaited<ReturnType<TonemapModule[\"createResources\"]>>;\n\nclass TonemapModuleContext implements RenderModuleContext {\n\n    constructor(readonly context: RenderContext, readonly module: TonemapModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\n\n    update(state: DerivedRenderState) {\n        const { context } = this;\n        const { uniforms } = this.resources\n        const { camera, tonemapping } = state;\n\n        if (context.hasStateChanged({ camera, tonemapping })) {\n            const { camera, tonemapping } = state;\n            const { values } = this.uniforms;\n            values.exposure = Math.pow(2, tonemapping.exposure);\n            values.mode = tonemapping.mode;\n            values.maxLinearDepth = camera.far;\n            context.updateUniformBuffer(uniforms, this.uniforms);\n        }\n    }\n\n    render() {\n        const { context, resources } = this;\n        const { program, sampler, uniforms } = resources;\n        const { gl } = context;\n        const { textures } = context.buffers;\n\n        context.buffers.resolveMSAA();\n\n        glState(gl, {\n            program,\n            uniformBuffers: [uniforms],\n            textures: [\n                { kind: \"TEXTURE_2D\", texture: textures.color, sampler },\n                { kind: \"TEXTURE_2D\", texture: textures.pick, sampler },\n                { kind: \"TEXTURE_2D\", texture: textures.depth, sampler },\n            ],\n            frameBuffer: null,\n            drawBuffers: [\"BACK\"],\n            depth: {\n                test: false,\n                writeMask: false,\n            },\n        });\n\n        const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\n        context[\"addRenderStatistics\"](stats);\n    }\n\n    contextLost() {\n    }\n\n    dispose() {\n        this.contextLost();\n        this.resources.bin.dispose();\n    }\n}\n", "import render_vert from \"./render.vert\";\nimport render_frag from \"./render.frag\";\nimport line_vert from \"./line.vert\";\nimport line_frag from \"./line.frag\";\nimport intersect_vert from \"./intersect.vert\";\n\ntype Shaders = { readonly [P in string]: { readonly vertexShader: string; readonly fragmentShader?: string; } };\n\nexport const shaders = {\n    render: {\n        vertexShader: render_vert,\n        fragmentShader: render_frag,\n    },\n    line: {\n        vertexShader: line_vert,\n        fragmentShader: line_frag,\n    },\n    intersect: {\n        vertexShader: intersect_vert,\n    },\n} as const satisfies Shaders;\n", "import type { DerivedRenderState, RenderContext } from \"core3d\";\nimport type { RenderModuleContext, RenderModule } from \"..\";\nimport { glUBOProxy, glDraw, glState, glTransformFeedback, type UniformTypes } from \"webgl2\";\nimport { mat4, vec3, type ReadonlyVec3 } from \"gl-matrix\";\nimport { BufferFlags } from \"core3d/buffers\";\nimport { shaders } from \"./shaders\";\n\nexport class CubeModule implements RenderModule {\n    readonly kind = \"cube\";\n    readonly cubeUniforms = {\n        modelLocalMatrix: \"mat4\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    async withContext(context: RenderContext) {\n        const uniforms = this.createUniforms();\n        const resources = await this.createResources(context, uniforms);\n        return new CubeModuleContext(context, this, uniforms, resources);\n    }\n\n    createUniforms() {\n        return {\n            cube: glUBOProxy(this.cubeUniforms),\n        } as const;\n    }\n\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\n        const vertices = createVertices((pos, norm, col) => ([...pos, ...norm, ...col]));\n        const pos = createVertices((pos) => (pos));\n        const indices = createIndices();\n        const triplets = new Float32Array(indices.length * 3);\n        for (let i = 0; i < indices.length; i += 3) {\n            const [a, b, c] = indices.slice(i, i + 3);\n            const pa = pos.slice(a * 3, (a + 1) * 3);\n            const pb = pos.slice(b * 3, (b + 1) * 3);\n            const pc = pos.slice(c * 3, (c + 1) * 3);\n            triplets.set(pa, i * 3 + 0);\n            triplets.set(pb, i * 3 + 3);\n            triplets.set(pc, i * 3 + 6);\n        }\n\n        const bin = context.resourceBin(\"Cube\");\n        const uniforms = {\n            cube: bin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: uniformsProxy.cube.buffer.byteLength }),\n        } as const;\n        const transformFeedback = bin.createTransformFeedback();\n\n        const vb_render = bin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData: vertices });\n        const ib_render = bin.createBuffer({ kind: \"ELEMENT_ARRAY_BUFFER\", srcData: indices });\n        const vao_render = bin.createVertexArray({\n            attributes: [\n                { kind: \"FLOAT_VEC3\", buffer: vb_render, byteStride: 36, byteOffset: 0 }, // position\n                { kind: \"FLOAT_VEC3\", buffer: vb_render, byteStride: 36, byteOffset: 12 }, // normal\n                { kind: \"FLOAT_VEC3\", buffer: vb_render, byteStride: 36, byteOffset: 24 }, // color\n            ],\n            indices: ib_render\n        });\n        bin.subordinate(vao_render, vb_render, ib_render);\n\n        const vb_triplets = bin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData: triplets });\n        const vao_triplets = bin.createVertexArray({\n            attributes: [\n                { kind: \"FLOAT_VEC3\", buffer: vb_triplets, byteStride: 36, byteOffset: 0 }, // position 0\n                { kind: \"FLOAT_VEC3\", buffer: vb_triplets, byteStride: 36, byteOffset: 12 }, // position 1\n                { kind: \"FLOAT_VEC3\", buffer: vb_triplets, byteStride: 36, byteOffset: 24 }, // position 2\n            ],\n        });\n        bin.subordinate(vao_triplets, vb_triplets);\n\n        // const vb_line = bin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: 12 * 2 * 8, usage: \"STATIC_DRAW\" });\n        const vb_line = bin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: 12 * 2 * 4, usage: \"STATIC_DRAW\" });\n        const vb_opacity = bin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: 12 * 4, usage: \"STATIC_DRAW\" });\n        const vao_line = bin.createVertexArray({\n            attributes: [\n                // { kind: \"FLOAT_VEC2\", buffer: vb_line, byteStride: 8, byteOffset: 0 }, // position\n                // { kind: \"FLOAT_VEC2\", buffer: vb_line, byteStride: 4, byteOffset: 0, componentType: \"HALF_FLOAT\" }, // position\n                { kind: \"FLOAT_VEC4\", buffer: vb_line, byteStride: 8, byteOffset: 0, componentType: \"HALF_FLOAT\", divisor: 1 }, // position\n                { kind: \"FLOAT\", buffer: vb_opacity, byteStride: 4, byteOffset: 0, componentType: \"FLOAT\", divisor: 1 }, // opacity\n            ],\n        });\n\n        const uniformBufferBlocks = [\"Camera\", \"Clipping\", \"Cube\"];\n        const [color, pick, line, intersect] = await Promise.all([\n            context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks }),\n            context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, header: { flags: [\"PICK\"] } }),\n            context.makeProgramAsync(bin, { ...shaders.line, uniformBufferBlocks: [...uniformBufferBlocks, \"Outline\"] }),\n            context.makeProgramAsync(bin, { ...shaders.intersect, uniformBufferBlocks: [...uniformBufferBlocks, \"Outline\"], transformFeedback: { varyings: [\"line_vertices\", \"opacity\"], bufferMode: \"SEPARATE_ATTRIBS\" } }),\n        ]);\n        const programs = { color, pick, line, intersect };\n        return { bin, uniforms, transformFeedback, vao_render, vao_triplets, vao_line, vb_line, vb_opacity, programs } as const;\n    }\n}\n\ntype Uniforms = ReturnType<CubeModule[\"createUniforms\"]>;\ntype Resources = Awaited<ReturnType<CubeModule[\"createResources\"]>>;\n\nclass CubeModuleContext implements RenderModuleContext {\n    constructor(readonly context: RenderContext, readonly module: CubeModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\n\n    update(state: DerivedRenderState) {\n        const { context, resources, uniforms } = this;\n        const { cube, localSpaceTranslation } = state;\n        if (context.hasStateChanged({ cube, localSpaceTranslation })) {\n            const { scale, position } = cube;\n            const posLS = vec3.subtract(vec3.create(), position, localSpaceTranslation);\n            const m = [\n                scale, 0, 0, 0,\n                0, scale, 0, 0,\n                0, 0, scale, 0,\n                ...posLS, 1\n            ] as Parameters<typeof mat4.fromValues>;\n            uniforms.cube.values.modelLocalMatrix = mat4.fromValues(...m);\n        }\n        context.updateUniformBuffer(resources.uniforms.cube, uniforms.cube);\n    }\n\n    render(state: DerivedRenderState) {\n        const { context, resources } = this;\n        const { programs, uniforms, transformFeedback, vao_render, vao_triplets, vao_line, vb_line, vb_opacity } = resources;\n        const { gl, cameraUniforms, clippingUniforms, outlineUniforms, deviceProfile } = context;\n\n        if (state.cube.enabled) {\n            // render normal cube\n            glState(gl, {\n                program: programs.color,\n                uniformBuffers: [cameraUniforms, clippingUniforms, uniforms.cube],\n                // drawBuffers: context.drawBuffers(),\n                depth: { test: true, },\n                cull: { enable: false },\n                vertexArrayObject: vao_render,\n            });\n            const stats = glDraw(gl, { kind: \"elements\", mode: \"TRIANGLES\", indexType: \"UNSIGNED_SHORT\", count: 36 });\n            context[\"addRenderStatistics\"](stats);\n\n            if (state.outlines.enabled && deviceProfile.features.outline) {\n                // transform vertex triplets into intersection lines\n                glState(gl, {\n                    program: programs.intersect,\n                    uniformBuffers: [cameraUniforms, clippingUniforms, uniforms.cube, outlineUniforms],\n                    vertexArrayObject: vao_triplets,\n                });\n                glTransformFeedback(gl, { kind: \"POINTS\", transformFeedback, outputBuffers: [vb_line, vb_opacity], count: 12 });\n\n                // render intersection lines\n                glState(gl, {\n                    program: programs.line,\n                    // drawBuffers: context.drawBuffers(BufferFlags.color),\n                    blend: {\n                        enable: true,\n                        srcRGB: \"SRC_ALPHA\",\n                        dstRGB: \"ONE_MINUS_SRC_ALPHA\",\n                        srcAlpha: \"ZERO\",\n                        dstAlpha: \"ONE\",\n                    },\n                    depth: { test: false, },\n                    vertexArrayObject: vao_line,\n                });\n                // const stats = glDraw(gl, { kind: \"arrays\", mode: \"LINES\", count: 12 * 2 });\n                const stats = glDraw(gl, { kind: \"arrays_instanced\", mode: \"LINES\", count: 2, instanceCount: 12 });\n                context[\"addRenderStatistics\"](stats);\n            }\n        }\n    }\n\n    pick(state: DerivedRenderState) {\n        const { context, resources } = this;\n        const { programs, uniforms, vao_render } = resources;\n        const { gl, cameraUniforms, clippingUniforms } = context;\n\n        if (state.cube.enabled) {\n            glState(gl, {\n                program: programs.pick,\n                uniformBuffers: [cameraUniforms, clippingUniforms, uniforms.cube],\n                depth: { test: true, },\n                cull: { enable: false },\n                vertexArrayObject: vao_render,\n            });\n            glDraw(gl, { kind: \"elements\", mode: \"TRIANGLES\", indexType: \"UNSIGNED_SHORT\", count: 36 });\n            // TODO: render pickable outlines too?\n        }\n    }\n\n    contextLost(): void {\n    }\n\n    dispose() {\n        this.contextLost();\n        this.resources.bin.dispose();\n    }\n}\n\nfunction createVertices(pack: (position: ReadonlyVec3, normal: ReadonlyVec3, color: ReadonlyVec3) => Iterable<number>) {\n    function face(x: ReadonlyVec3, y: ReadonlyVec3, color: ReadonlyVec3) {\n        const normal = vec3.cross(vec3.create(), y, x);\n        function vert(fx: \"add\" | \"sub\", fy: \"add\" | \"sub\") {\n            const pos = vec3.clone(normal);\n            vec3[fx](pos, pos, x);\n            vec3[fy](pos, pos, y);\n            return pack(pos, normal, color);\n            // return [...pos, ...normal, ...color];\n        }\n        return [\n            ...vert(\"sub\", \"sub\"),\n            ...vert(\"add\", \"sub\"),\n            ...vert(\"sub\", \"add\"),\n            ...vert(\"add\", \"add\"),\n        ];\n    }\n\n    return new Float32Array([\n        ...face([0, 0, -1], [0, 1, 0], [1, 0, 0]), // right (1, 0, 0)\n        ...face([0, 0, 1], [0, 1, 0], [0, 1, 1]), // left (-1, 0, 0)\n        ...face([1, 0, 0], [0, 0, 1], [0, 1, 0]), // top (0, 1, 0)\n        ...face([1, 0, 0], [0, 0, -1], [1, 0, 1]), // bottom (0, -1, 0)\n        ...face([1, 0, 0], [0, 1, 0], [0, 0, 1]), // front (0, 0, 1)\n        ...face([-1, 0, 0], [0, 1, 0], [1, 1, 0]), // back (0, 0, -1)\n    ]);\n}\n\nfunction createIndices() {\n    let idxOffset = 0;\n    function face() {\n        const idx = [0, 2, 1, 1, 2, 3].map(i => i + idxOffset);\n        idxOffset += 4;\n        return idx;\n    }\n    return new Uint16Array([\n        ...face(),\n        ...face(),\n        ...face(),\n        ...face(),\n        ...face(),\n        ...face(),\n    ]);\n}", "import type { DerivedRenderState, RenderContext } from \"core3d\";\nimport type { RenderModuleContext, RenderModule } from \"..\";\nimport { glDraw, glState, glUBOProxy, type UniformTypes } from \"webgl2\";\nimport vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\nimport { ResourceBin } from \"core3d/resource\";\n\nexport class ClippingModule implements RenderModule {\n    readonly kind = \"clipping\";\n    readonly uniforms = {\n        \"colors.0\": \"vec4\",\n        \"colors.1\": \"vec4\",\n        \"colors.2\": \"vec4\",\n        \"colors.3\": \"vec4\",\n        \"colors.4\": \"vec4\",\n        \"colors.5\": \"vec4\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    async withContext(context: RenderContext) {\n        const uniforms = this.createUniforms();\n        const resources = await this.createResources(context, uniforms);\n        return new ClippingModuleContext(context, this, uniforms, resources);\n    }\n\n    createUniforms() {\n        return glUBOProxy(this.uniforms);\n    }\n\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\n        const bin = context.resourceBin(\"Clipping\");\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: uniformsProxy.buffer.byteLength });\n        const uniformBufferBlocks = [\"Camera\", \"Clipping\", \"Colors\"];\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks });\n        return { bin, uniforms, program } as const;\n    }\n}\n\ntype Uniforms = ReturnType<ClippingModule[\"createUniforms\"]>;\ntype Resources = Awaited<ReturnType<ClippingModule[\"createResources\"]>>;\n\nclass ClippingModuleContext implements RenderModuleContext {\n    constructor(readonly context: RenderContext, readonly module: ClippingModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\n\n    update(state: DerivedRenderState) {\n        const { context, resources } = this;\n        const { clipping } = state;\n        if (context.hasStateChanged({ clipping })) {\n            const { planes } = clipping;\n            const values = this.uniforms.values;\n            for (let i = 0; i < planes.length; i++) {\n                const { color } = planes[i];\n                const idx = i as 0 | 1 | 2 | 3 | 4 | 5;\n                values[`colors.${idx}` as const] = color ?? [0, 0, 0, 0];\n            }\n        }\n        context.updateUniformBuffer(resources.uniforms, this.uniforms);\n    }\n\n    render(state: DerivedRenderState) {\n        const { context, resources } = this;\n        const { program, uniforms } = resources;\n        const { gl, cameraUniforms, clippingUniforms } = context;\n        const { clipping } = state;\n\n        if (clipping.draw) {\n            glState(gl, {\n                program,\n                uniformBuffers: [cameraUniforms, clippingUniforms, uniforms],\n                drawBuffers: context.drawBuffers(),\n                depth: {\n                    test: true,\n                    // writeMask: true,\n                },\n                blend: {\n                    enable: true,\n                    srcRGB: \"SRC_ALPHA\",\n                    dstRGB: \"ONE_MINUS_SRC_ALPHA\",\n                    srcAlpha: \"ZERO\",\n                    dstAlpha: \"ONE\",\n                },\n            });\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\n            context[\"addRenderStatistics\"](stats);\n        }\n    }\n\n    contextLost(): void {\n    }\n\n    dispose() {\n        this.contextLost();\n        this.resources.bin.dispose();\n    }\n}", "import type { DerivedRenderState, RenderContext } from \"core3d\";\nimport type { RenderModuleContext, RenderModule } from \"..\";\nimport { glUBOProxy, glDraw, glState } from \"webgl2\";\nimport type { UniformTypes } from \"webgl2\";\nimport vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\nimport logoBinary from \"./logo.bin\";\n\nexport class WatermarkModule implements RenderModule {\n    readonly kind = \"watermark\";\n    readonly uniforms = {\n        modelClipMatrix: \"mat4\",\n        color: \"vec4\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    async withContext(context: RenderContext) {\n        const uniforms = this.createUniforms();\n        const resources = await this.createResources(context, uniforms);\n        return new WatermarkModuleContext(context, this, uniforms, resources);\n    }\n\n    createUniforms() {\n        return glUBOProxy(this.uniforms);\n    }\n\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\n        const bin = context.resourceBin(\"Watermark\");\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniformsProxy.buffer });\n        const { vertices, indices } = WatermarkModule.geometry();\n        const vb = bin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData: vertices });\n        const ib = bin.createBuffer({ kind: \"ELEMENT_ARRAY_BUFFER\", srcData: indices });\n        const vao = bin.createVertexArray({\n            attributes: [\n                { kind: \"FLOAT_VEC3\", buffer: vb, byteStride: 12, byteOffset: 0 }, // position\n            ],\n            indices: ib\n        });\n        bin.subordinate(vao, vb, ib);\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks: [\"Watermark\"] })\n        return { bin, uniforms, vao, program } as const;\n    }\n\n    // these magic numbers are the byte offsets and lengths from gltf bufferViews\n    static readonly vertexBufferBytes = 16620;\n    static readonly indexBufferBytes = 12276;\n    static readonly numIndices = this.indexBufferBytes / 2;\n\n    // Logo data are comes from the binary buffer of an gltf file. It has positions and triangle indices only. Z-coordinate is used for antialiasing. Mesh has been tesselated such that each triangle lies in a single antialiasing slope, i.e. has vertices along one edge only.\n    static geometry() {\n        const vertices = new Float32Array(logoBinary.buffer, 0, WatermarkModule.vertexBufferBytes / 4).slice();\n        const indices = new Uint16Array(logoBinary.buffer, WatermarkModule.vertexBufferBytes, WatermarkModule.numIndices).slice();\n        return { vertices, indices };\n    }\n}\n\ntype Uniforms = ReturnType<WatermarkModule[\"createUniforms\"]>;\ntype Resources = Awaited<ReturnType<WatermarkModule[\"createResources\"]>>;\n\nclass WatermarkModuleContext implements RenderModuleContext {\n    constructor(readonly context: RenderContext, readonly module: WatermarkModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\n\n    update(state: DerivedRenderState) {\n        const { context, resources } = this;\n        const { output } = state; 6\n        if (context.hasStateChanged({ output })) {\n            const { values } = this.uniforms;\n            const padding = 1; // % of logo height\n            const size = 0.2; // in % of screen diagonal\n            const { width, height } = output;\n            const w = 12.717909812927246 - 0.00042313020094297826;\n            const h = 0.0024876839015632868 + 1.87906813621521;\n            const e = 0.1; // size of aa bevel edge in meters.\n            const d = Math.hypot(w, h);\n            const diag = Math.hypot(width, height) * size;\n            const sx = 2 * diag / d / width;\n            const sy = 2 * diag / d / height;\n            const sz = diag / d * e * 0.5 / h; // use to scale z-slope (should be one pixels wide)\n            const m = [\n                sx, 0, 0, 0,\n                0, sy, 0, 0,\n                0, 0, sz, 0,\n                1 - (padding) * sx, -1 + (padding) * sy, sz * 0.5, 1,\n            ] as const;\n            values.modelClipMatrix = m;\n            values.color = [43 / 255, 46 / 255, 52 / 255, 0.5];\n            context.updateUniformBuffer(resources.uniforms, this.uniforms);\n        }\n    }\n\n    render() {\n        const { context, resources, module } = this;\n        const { program, uniforms, vao, } = resources;\n        const { gl } = context;\n\n        glState(gl, {\n            program,\n            uniformBuffers: [uniforms],\n            depth: { writeMask: false, },\n            cull: { enable: true },\n            vertexArrayObject: vao,\n            blend: {\n                enable: true,\n                srcRGB: \"SRC_ALPHA\",\n                srcAlpha: \"ONE\",\n                dstRGB: \"ONE\",\n                dstAlpha: \"ONE\",\n            },\n        });\n        const stats = glDraw(gl, { kind: \"elements\", mode: \"TRIANGLES\", indexType: \"UNSIGNED_SHORT\", count: WatermarkModule.numIndices });\n        context[\"addRenderStatistics\"](stats);\n    }\n\n    contextLost(): void {\n    }\n\n    dispose() {\n        this.contextLost();\n        this.resources.bin.dispose();\n    }\n}\n", "import type { DerivedRenderState, RenderContext, RenderStateDynamicGeometry, RenderStateDynamicImage, RenderStateDynamicInstance, RenderStateDynamicMaterial, RenderStateDynamicMeshPrimitive, RenderStateDynamicObject, RenderStateDynamicSampler, RenderStateDynamicTexture, RenderStateDynamicVertexAttribute } from \"core3d\";\nimport type { RenderModuleContext, RenderModule } from \"..\";\nimport { glUBOProxy, glDraw, glState, type UniformTypes, type VertexArrayParams, type VertexAttribute, type DrawParamsElements, type DrawParamsArrays, type StateParams, type DrawParamsArraysInstanced, type DrawParamsElementsInstanced, glUpdateBuffer } from \"webgl2\";\nimport vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\nimport { mat3, mat4, vec3, type ReadonlyVec3 } from \"gl-matrix\";\nimport { BufferFlags } from \"core3d/buffers\";\nimport { ResourceBin } from \"core3d/resource\";\n\nexport class DynamicModule implements RenderModule {\n    readonly kind = \"dynamic\";\n    readonly materialUniforms = {\n        baseColor: \"vec4\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    readonly instanceUniforms = {\n        modelViewMatrix: \"mat4\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    async withContext(context: RenderContext) {\n        const resources = await this.createResources(context);\n        return new DynamicModuleContext(context, this, resources);\n    }\n\n    async createResources(context: RenderContext) {\n        const bin = context.resourceBin(\"Dynamic\");\n        const defaultSampler = bin.createSampler({ magnificationFilter: \"LINEAR\", minificationFilter: \"LINEAR_MIPMAP_LINEAR\", wrap: [\"REPEAT\", \"REPEAT\"] });\n        const defaultTexture = bin.createTexture({ kind: \"TEXTURE_2D\", width: 1, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: new Uint8Array(4) }); // used to avoid warnings on android\n        const uniformBufferBlocks = [\"Camera\", \"Material\", \"Object\"];\n        const textureNames = [\"lut_ggx\", \"ibl.diffuse\", \"ibl.specular\", \"base_color\", \"metallic_roughness\", \"normal\", \"emissive\", \"occlusion\"] as const;\n        const textureUniforms = textureNames.map(name => `textures.${name}`);\n        const [unlit, ggx] = await Promise.all([\n            context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks, textureUniforms }),\n            context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks, textureUniforms, header: { flags: [\"PBR_METALLIC_ROUGHNESS\"] } }),\n        ]);\n        const programs = { unlit, ggx };\n        return { bin, defaultSampler, defaultTexture, programs } as const;\n    }\n}\n\ntype Resources = Awaited<ReturnType<DynamicModule[\"createResources\"]>>;\n\nclass DynamicModuleContext implements RenderModuleContext {\n    iblTextures;\n    readonly buffers = new Map<BufferSource, BufferAsset>();\n    readonly geometries = new Map<RenderStateDynamicGeometry, GeometryAsset>();\n    readonly objects = new Map<RenderStateDynamicObject, ObjectAsset>();\n    readonly materials = new Map<RenderStateDynamicMaterial, MaterialAsset>();\n    readonly images = new Map<RenderStateDynamicImage, TextureAsset>();\n    readonly samplers = new Map<RenderStateDynamicSampler, SamplerAsset>();\n\n    constructor(readonly context: RenderContext, readonly module: DynamicModule, readonly resources: Resources) {\n        this.iblTextures = context.iblTextures;\n    }\n\n    update(state: DerivedRenderState) {\n        const { context, resources } = this;\n        const { bin, defaultSampler, defaultTexture, programs } = resources;\n        const { dynamic, localSpaceTranslation } = state;\n        if (context.hasStateChanged({ dynamic })) {\n            // synchronizing assets by reference is slower than array indexing, but it makes the render state safer and simpler to modify.\n            // performance should not be a major issue for < 1000 objects or so, however.\n            function* getTextures(material: RenderStateDynamicMaterial) {\n                const { baseColorTexture } = material;\n                if (baseColorTexture)\n                    yield baseColorTexture.texture;\n                if (material.kind == \"ggx\") {\n                    const { emissiveTexture, metallicRoughnessTexture, normalTexture, occlusionTexture } = material;\n                    if (emissiveTexture)\n                        yield emissiveTexture.texture;\n                    if (metallicRoughnessTexture)\n                        yield metallicRoughnessTexture.texture;\n                    if (normalTexture)\n                        yield normalTexture.texture;\n                    if (occlusionTexture)\n                        yield occlusionTexture.texture;\n                }\n            }\n            const primitives = [...new Set<RenderStateDynamicMeshPrimitive>(dynamic.objects.flatMap(o => o.mesh.primitives))];\n            const geometries = [...new Set<RenderStateDynamicGeometry>(primitives.map(p => p.geometry))];\n            const materials = [...new Set<RenderStateDynamicMaterial>(primitives.map(p => p.material))];\n            const textures = [...new Set<RenderStateDynamicTexture>(materials.flatMap(m => [...getTextures(m)]))];\n            const images = [...new Set<RenderStateDynamicImage>(textures.map(t => t.image))];\n            const samplers = [...new Set<RenderStateDynamicSampler>(textures.map(t => t.sampler!).filter(s => s))];\n            const objects = [...new Set<RenderStateDynamicObject>(dynamic.objects.map(o => o))];\n            const vertexBuffers = new Set<BufferSource>(geometries.flatMap(g => [...Object.values(g.attributes).map((a: RenderStateDynamicVertexAttribute) => a.buffer).filter(b => b)]));\n            const indexBuffers = new Set<BufferSource>(geometries.map(g => typeof g.indices == \"number\" ? undefined : g.indices).filter(b => b) as BufferSource[]);\n            const numVertexBuffers = vertexBuffers.size;\n            const buffers = [...vertexBuffers, ...indexBuffers];\n            syncAssets(bin, buffers, this.buffers, (data, idx) => new BufferAsset(bin, idx < numVertexBuffers ? \"ARRAY_BUFFER\" : \"ELEMENT_ARRAY_BUFFER\", data));\n            syncAssets(bin, images, this.images, data => new TextureAsset(bin, data));\n            syncAssets(bin, samplers, this.samplers, data => new SamplerAsset(bin, data));\n            syncAssets(bin, geometries, this.geometries, data => new GeometryAsset(bin, data, this.buffers));\n            syncAssets(bin, objects, this.objects, data => new ObjectAsset(bin, context, data, state));\n            syncAssets(bin, materials, this.materials, data => new MaterialAsset(bin, context, data, this.images, this.samplers, defaultTexture, defaultSampler, programs[data.kind]));\n        }\n        if (context.hasStateChanged({ localSpaceTranslation })) {\n            for (const instance of this.objects.values()) {\n                instance.update(context, state);\n            }\n        }\n        if (context.iblTextures != this.iblTextures) {\n            this.iblTextures = context.iblTextures;\n            for (const material of this.materials.values()) {\n                material.update(context, defaultTexture);\n            }\n        }\n    }\n\n    render(state: DerivedRenderState) {\n        const { context } = this;\n        const { gl, cameraUniforms } = context;\n\n        glState(gl, {\n            uniformBuffers: [cameraUniforms],\n            depth: {\n                test: true,\n                writeMask: true,\n            },\n        });\n\n        const { objects, geometries, materials } = this;\n        const meshes: { readonly material: MaterialAsset; readonly geometry: GeometryAsset; readonly object: ObjectAsset }[] = [];\n        let numPrimitives = 0;\n        state.dynamic.objects.forEach((p => { numPrimitives += p.mesh.primitives.length }));\n        if (numPrimitives != geometries.size) {// happens to objects that are deleted the next frame when using pickbuffers as they are using previous state.\n            return;\n        }\n        for (const obj of state.dynamic.objects) {\n            const objAsset = objects.get(obj)!;\n            for (const primitive of obj.mesh.primitives) {\n                const geometry = geometries.get(primitive.geometry)!;\n                const material = materials.get(primitive.material)!;\n                meshes.push({ material, geometry, object: objAsset });\n            }\n        }\n        // sort by material and then object\n        meshes.sort((a, b) => {\n            let diff = a.material.index - b.material.index;\n            if (diff == 0) {\n                diff = a.object.index - b.object.index;\n            }\n            return diff;\n        })\n\n        // vertex attribute defaults\n        gl.vertexAttrib4f(3, 1, 1, 1, 1); // color0\n\n        let currentMaterial: MaterialAsset = undefined!;\n        let currentObject: ObjectAsset = undefined!;\n\n        for (const { material, object, geometry } of meshes) {\n\n            if (currentMaterial != material) {\n                currentMaterial = material;\n                gl.bindBufferBase(gl.UNIFORM_BUFFER, 1, material.uniformsBuffer);\n                glState(gl, currentMaterial.stateParams);\n            }\n            if (currentObject != object) {\n                currentObject = object;\n                gl.bindBufferBase(gl.UNIFORM_BUFFER, 2, object.uniformsBuffer);\n            }\n            gl.bindVertexArray(geometry.resources.vao);\n            // TODO: create an geometry+instances VAO?\n            gl.bindBuffer(gl.ARRAY_BUFFER, object.instancesBuffer);\n            for (let i = 0; i < 4; i++) {\n                const attrib = i + VertexAttribs.matrix0;\n                gl.vertexAttribPointer(attrib, 3, gl.FLOAT, false, 4 * 12, i * 12);\n                gl.vertexAttribDivisor(attrib, 1);\n                gl.enableVertexAttribArray(attrib);\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n            const kind = `${geometry.drawParams.kind}_instanced` as const;\n            const params = { ...geometry.drawParams, kind, instanceCount: object.numInstances } as (DrawParamsArraysInstanced | DrawParamsElementsInstanced);\n            const stats = glDraw(gl, params);\n            gl.bindVertexArray(null);\n            context[\"addRenderStatistics\"](stats);\n        }\n\n        for (let i = 0; i < 4; i++) {\n            const attrib = i + VertexAttribs.matrix0;\n            gl.disableVertexAttribArray(attrib);\n        }\n    }\n\n    pick(state: DerivedRenderState) {\n        this.render(state); // TODO: make separate program for pick buffers instead of relying on drawbuffers\n    }\n\n    contextLost(): void {\n    }\n\n    dispose() {\n        const { resources, buffers, geometries, materials, objects } = this;\n        const { bin, programs, defaultSampler, defaultTexture } = resources;\n        this.contextLost();\n        const assets = [...buffers.values(), ...geometries.values(), ...materials.values(), ...objects.values()];\n        for (const asset of assets) {\n            asset.dispose(bin);\n        }\n        bin.delete(programs.unlit, programs.ggx, defaultSampler, defaultTexture);\n        console.assert(bin.size == 0);\n        bin.dispose();\n        buffers.clear();\n        geometries.clear();\n        materials.clear();\n        objects.clear();\n    }\n}\n\nfunction syncAssets<TK, TV extends { index: number, dispose(bin: ResourceBin): void }>(bin: ResourceBin, uniqueResources: Iterable<TK>, map: Map<TK, TV>, create: (resource: TK, index: number) => TV) {\n    // delete unreferenced resources\n    const unreferenced = new Map<TK, TV>(map);\n    for (const resource of uniqueResources) {\n        unreferenced.delete(resource);\n    }\n    for (const [resource, asset] of unreferenced) {\n        map.delete(resource);\n        asset.dispose(bin);\n    }\n\n    // index and create new resources\n    let idx = 0;\n    for (const resource of uniqueResources) {\n        let asset = map.get(resource);\n        if (!asset) {\n            asset = create(resource, idx);\n            map.set(resource, asset);\n        }\n        asset.index = idx++;\n    }\n}\n\nclass BufferAsset {\n    index = 0;\n    readonly buffer: WebGLBuffer;\n\n    constructor(bin: ResourceBin, kind: \"ARRAY_BUFFER\" | \"ELEMENT_ARRAY_BUFFER\", srcData: BufferSource) {\n        this.buffer = bin.createBuffer({ kind, srcData });\n    }\n\n    dispose(bin: ResourceBin) {\n        bin.delete(this.buffer);\n    }\n}\n\nconst enum VertexAttribs {\n    position,\n    normal,\n    tangent,\n    color0,\n    texCoord0,\n    texCoord1,\n    matrix0,\n    matrix1,\n    matrix2,\n    matrix3,\n}\n\nclass GeometryAsset {\n    index = 0;\n    readonly drawParams: DrawParamsElements | DrawParamsArrays;\n    readonly resources;\n\n    constructor(bin: ResourceBin, data: RenderStateDynamicGeometry, buffers: Map<BufferSource, BufferAsset>) {\n        const hasIndexBuffer = typeof data.indices != \"number\";\n        const indexType = !hasIndexBuffer ? undefined : data.indices instanceof Uint32Array ? \"UNSIGNED_INT\" : data.indices instanceof Uint16Array ? \"UNSIGNED_SHORT\" : \"UNSIGNED_BYTE\";\n        const mode = data.primitiveType;\n        const count = hasIndexBuffer ? data.indices.length : data.indices;\n        this.drawParams = { kind: hasIndexBuffer ? \"elements\" : \"arrays\", mode, count, indexType: indexType } as DrawParamsElements | DrawParamsArrays;\n        const { position, normal, tangent, color0, texCoord0, texCoord1 } = data.attributes;\n        function convAttr(a: RenderStateDynamicVertexAttribute | undefined) {\n            if (!a)\n                return null;\n            const { buffer } = buffers.get(a.buffer)!;\n            return { ...a, buffer } as VertexAttribute;\n        }\n        const indices = typeof data.indices == \"number\" ? undefined : bin.createBuffer({ kind: \"ELEMENT_ARRAY_BUFFER\", srcData: data.indices });\n        const params: VertexArrayParams = {\n            attributes: [\n                convAttr(position),\n                convAttr(normal),\n                convAttr(tangent),\n                convAttr(color0),\n                convAttr(texCoord0),\n                convAttr(texCoord1),\n            ],\n            indices,\n        }\n        const vao = bin.createVertexArray(params);\n        if (indices) {\n            bin.subordinate(vao, indices);\n        }\n        this.resources = { vao } as const;\n    }\n\n    dispose(bin: ResourceBin) {\n        bin.delete(this.resources.vao);\n    }\n}\n\nclass ObjectAsset {\n    index = 0;\n    private readonly uniforms;\n\n    readonly numInstances: number;\n    readonly uniformsBuffer: WebGLBuffer;\n    readonly instancesBuffer: WebGLBuffer;\n\n    constructor(bin: ResourceBin, context: RenderContext, readonly data: RenderStateDynamicObject, state: DerivedRenderState) {\n        const uniformsDesc = {\n            worldLocalMatrix: \"mat4\",\n            baseObjectId: \"uint\",\n        } as const satisfies Record<string, UniformTypes>;\n        this.uniforms = glUBOProxy(uniformsDesc);\n        const { values } = this.uniforms;\n        values.baseObjectId = data.baseObjectId ?? 0xffffffff;\n        this.uniformsBuffer = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: this.uniforms.buffer });\n        const { instances } = data;\n        this.numInstances = instances.length;\n        this.instancesBuffer = ObjectAsset.createInstancesBuffer(bin, instances, state.localSpaceTranslation);\n        this.update(context, state);\n    }\n\n    static createInstancesBuffer(bin: ResourceBin, instances: readonly RenderStateDynamicInstance[], localSpaceTranslation: ReadonlyVec3) {\n        const srcData = ObjectAsset.computeInstanceMatrices(instances, localSpaceTranslation);\n        return bin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData });\n    }\n\n    static computeInstanceMatrices(instances: readonly RenderStateDynamicInstance[], localSpaceTranslation: ReadonlyVec3) {\n        const srcData = new Float32Array(instances.length * 12);\n        for (let i = 0; i < instances.length; i++) {\n            const { position, rotation } = instances[i];\n            const translatedPos = vec3.sub(vec3.create(), position, localSpaceTranslation);\n            const transform = rotation ? mat4.fromRotationTranslation(mat4.create(), rotation, translatedPos) : mat4.fromTranslation(mat4.create(), translatedPos);\n            const [e00, e01, e02, e03, e10, e11, e12, e13, e20, e21, e22, e23, e30, e31, e32, e33] = transform;\n            const elems4x3 = [e00, e01, e02, e10, e11, e12, e20, e21, e22, e30, e31, e32];\n            srcData.set(elems4x3, i * elems4x3.length);\n            // srcData.set(transform, i * 16);\n        }\n        return srcData;\n    }\n\n    update(context: RenderContext, state: DerivedRenderState) {\n        const { uniforms, uniformsBuffer, data, instancesBuffer } = this;\n        const { localSpaceTranslation } = state;\n        const { values } = uniforms;\n        values.worldLocalMatrix = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), state.localSpaceTranslation));\n\n        if (context.hasStateChanged({ localSpaceTranslation })) {\n            const srcData = ObjectAsset.computeInstanceMatrices(data.instances, localSpaceTranslation);\n            glUpdateBuffer(context.gl, { kind: \"ARRAY_BUFFER\", srcData, targetBuffer: instancesBuffer });\n        }\n\n        context.updateUniformBuffer(uniformsBuffer, uniforms);\n    }\n\n    dispose(bin: ResourceBin) {\n        bin.delete(this.uniformsBuffer);\n    }\n}\n\ntype TextureNames = \"baseColor\" | \"emissive\" | \"normal\" | \"occlusion\" | \"metallicRoughness\";\n\nclass MaterialAsset {\n    index = 0;\n    readonly kind;\n    readonly uniforms;\n    readonly stateParams: StateParams;\n    readonly uniformsBuffer;\n    readonly textures = {} as { [P in TextureNames]?: WebGLTexture };\n    readonly samplers = {} as { [P in TextureNames]?: WebGLSampler };\n\n    constructor(\n        bin: ResourceBin,\n        context: RenderContext,\n        data: RenderStateDynamicMaterial,\n        textures: Map<RenderStateDynamicImage, TextureAsset>,\n        samplers: Map<RenderStateDynamicSampler, SamplerAsset>,\n        defaultTexture: WebGLTexture,\n        defaultSamper: WebGLSampler,\n        program: DynamicModuleContext[\"resources\"][\"programs\"][\"ggx\"],\n    ) {\n        this.kind = data.kind;\n        const blend = {\n            enable: true,\n            srcRGB: \"SRC_ALPHA\",\n            dstRGB: \"ONE_MINUS_SRC_ALPHA\",\n            srcAlpha: \"ZERO\",\n            dstAlpha: \"ONE\",\n        } as const satisfies StateParams[\"blend\"];\n        this.stateParams = {\n            program,\n            cull: { enable: data.doubleSided ? false : true },\n            blend: (data.alphaMode == \"BLEND\" ? blend : undefined),\n            // drawBuffers: context.drawBuffers(data.alphaMode == \"BLEND\" ? BufferFlags.color : BufferFlags.all), // for devices without OES_draw_buffers_indexed support\n        };\n        const uniformsDesc = {\n            baseColorFactor: \"vec4\",\n            emissiveFactor: \"vec3\",\n            roughnessFactor: \"float\",\n            metallicFactor: \"float\",\n            normalScale: \"float\",\n            occlusionStrength: \"float\",\n            alphaCutoff: \"float\",\n            baseColorUVSet: \"int\",\n            metallicRoughnessUVSet: \"int\",\n            normalUVSet: \"int\",\n            occlusionUVSet: \"int\",\n            emissiveUVSet: \"int\",\n            radianceMipCount: \"uint\",\n        } as const satisfies Record<string, UniformTypes>;\n        const uniformsProxy = this.uniforms = glUBOProxy(uniformsDesc);\n        let tex = this.textures;\n        let samp = this.samplers;\n        const { values } = uniformsProxy;\n        const { baseColorTexture } = data;\n        values.baseColorFactor = data.baseColorFactor ?? [1, 1, 1, 1];\n        values.baseColorUVSet = data.baseColorTexture ? data.baseColorTexture.texCoord ?? 0 : -1;\n        values.alphaCutoff = data.alphaCutoff ?? data.alphaMode == \"MASK\" ? .5 : 0;\n        values.radianceMipCount = context.iblTextures.numMipMaps;\n        if (baseColorTexture) {\n            tex.baseColor = textures.get(baseColorTexture.texture.image)!.texture;\n            samp.baseColor = samplers.get(baseColorTexture.texture.sampler!)?.sampler ?? defaultSamper;\n        }\n        if (data.kind == \"ggx\") {\n            const { roughnessFactor, metallicFactor, emissiveFactor, emissiveTexture, normalTexture, occlusionTexture, metallicRoughnessTexture } = data;\n            values.roughnessFactor = roughnessFactor ?? 1;\n            values.metallicFactor = metallicFactor ?? 1;\n            values.emissiveFactor = emissiveFactor ?? [0, 0, 0];\n            values.metallicRoughnessUVSet = metallicRoughnessTexture ? metallicRoughnessTexture.texCoord ?? 0 : -1;\n            values.normalUVSet = normalTexture ? normalTexture.texCoord ?? 0 : -1;\n            values.normalScale = normalTexture?.scale ?? 1;\n            values.occlusionUVSet = occlusionTexture ? occlusionTexture.texCoord ?? 0 : -1;\n            values.occlusionStrength = occlusionTexture?.strength ?? 1;\n            values.emissiveUVSet = emissiveTexture ? emissiveTexture.texCoord ?? 0 : -1;\n            if (emissiveTexture) {\n                tex.emissive = textures.get(emissiveTexture.texture.image)!.texture;\n                samp.emissive = samplers.get(emissiveTexture.texture.sampler!)?.sampler ?? defaultSamper;\n            }\n            if (normalTexture) {\n                tex.normal = textures.get(normalTexture.texture.image)!.texture;\n                samp.normal = samplers.get(normalTexture.texture.sampler!)?.sampler ?? defaultSamper;\n            }\n            if (occlusionTexture) {\n                tex.occlusion = textures.get(occlusionTexture.texture.image)!.texture;\n                samp.occlusion = samplers.get(occlusionTexture.texture.sampler!)?.sampler ?? defaultSamper;\n            }\n            if (metallicRoughnessTexture) {\n                tex.metallicRoughness = textures.get(metallicRoughnessTexture.texture.image)!.texture;\n                samp.metallicRoughness = samplers.get(metallicRoughnessTexture.texture.sampler!)?.sampler ?? defaultSamper;\n            }\n        } else {\n            values.roughnessFactor = 1;\n            values.metallicFactor = 1;\n            values.emissiveFactor = [0, 0, 0];\n            values.metallicRoughnessUVSet = -1;\n            values.normalUVSet = -1;\n            values.normalScale = 0;\n            values.occlusionUVSet = -1;\n            values.occlusionStrength = 0;\n            values.emissiveUVSet = -1;\n        }\n        this.uniformsBuffer = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniformsProxy.buffer });\n        this.update(context, defaultTexture)\n    }\n\n    update(context: RenderContext, defaultTexture: WebGLTexture) {\n        const { iblTextures, lut_ggx, samplerSingle, samplerMip } = context;\n        const { uniforms, uniformsBuffer, textures, samplers } = this;\n        const { diffuse, specular, numMipMaps } = iblTextures;\n        type Mutable<T> = { -readonly [P in keyof T]: T[P] };\n        const mutableState = this.stateParams as Mutable<StateParams>;\n        mutableState.textures = [\n            { kind: \"TEXTURE_2D\", texture: lut_ggx, sampler: samplerSingle },\n            { kind: \"TEXTURE_CUBE_MAP\", texture: diffuse, sampler: samplerSingle },\n            { kind: \"TEXTURE_CUBE_MAP\", texture: specular, sampler: samplerMip },\n            { kind: \"TEXTURE_2D\", texture: textures.baseColor ?? defaultTexture, sampler: samplers.baseColor ?? null },\n            { kind: \"TEXTURE_2D\", texture: textures.metallicRoughness ?? defaultTexture, sampler: samplers.metallicRoughness ?? null },\n            { kind: \"TEXTURE_2D\", texture: textures.normal ?? defaultTexture, sampler: samplers.normal ?? null },\n            { kind: \"TEXTURE_2D\", texture: textures.emissive ?? defaultTexture, sampler: samplers.emissive ?? null },\n            { kind: \"TEXTURE_2D\", texture: textures.occlusion ?? defaultTexture, sampler: samplers.occlusion ?? null },\n        ] as const;\n        uniforms.values.radianceMipCount = numMipMaps;\n        context.updateUniformBuffer(uniformsBuffer, uniforms);\n    }\n\n    dispose(bin: ResourceBin) {\n        bin.delete(this.uniformsBuffer);\n    }\n}\n\nclass TextureAsset {\n    index = 0;\n    readonly texture: WebGLTexture;\n\n    constructor(bin: ResourceBin, image: RenderStateDynamicImage) {\n        this.texture = bin.createTexture(image.params);\n    }\n\n    dispose(bin: ResourceBin) {\n        bin.delete(this.texture);\n    }\n}\n\nclass SamplerAsset {\n    index = 0;\n    readonly sampler: WebGLSampler;\n\n    constructor(bin: ResourceBin, sampler: RenderStateDynamicSampler) {\n        this.sampler = bin.createSampler(sampler);\n    }\n\n    dispose(bin: ResourceBin) {\n        bin.delete(this.sampler);\n    }\n}", "import type { DerivedRenderState, RenderContext } from \"core3d\";\nimport type { RenderModuleContext, RenderModule } from \"..\";\nimport { glUBOProxy, glDraw, glState, type UniformTypes } from \"webgl2\";\nimport vertexShader from \"./shader.vert\";\nimport fragmentShader from \"./shader.frag\";\nimport { mat4, vec3 } from \"gl-matrix\";\n\nexport class ToonModule implements RenderModule {\n    readonly kind = \"toon_outline\";\n    readonly uniforms = {\n        color: \"vec3\",\n    } as const satisfies Record<string, UniformTypes>;\n\n    async withContext(context: RenderContext) {\n        const uniforms = this.createUniforms();\n        const resources = await this.createResources(context, uniforms);\n        return new ToonModuleContext(context, this, uniforms, resources);\n    }\n\n    createUniforms() {\n        return glUBOProxy(this.uniforms);\n    }\n\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\n        const bin = context.resourceBin(\"Grid\");\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniformsProxy.buffer });\n        const sampler = bin.createSampler({ minificationFilter: \"NEAREST\", magnificationFilter: \"NEAREST\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\n        const textureNames = [\"color\", \"pick\", \"zbuffer\"] as const;\n        const textureUniforms = textureNames.map(name => `textures.${name}`);\n\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks: [\"Camera\"], textureUniforms })\n        return { bin, uniforms, sampler, program } as const;\n    }\n}\n\ntype Uniforms = ReturnType<ToonModule[\"createUniforms\"]>;\ntype Resources = Awaited<ReturnType<ToonModule[\"createResources\"]>>;\n\nfunction isEnabled(context: RenderContext, state: DerivedRenderState) {\n    return state.toonOutline.enabled && (context.isIdleFrame || !state.toonOutline.onlyOnIdleFrame);\n}\n\nclass ToonModuleContext implements RenderModuleContext {\n    constructor(readonly context: RenderContext, readonly module: ToonModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\n\n    update(state: DerivedRenderState) {\n        const { context, resources } = this;\n        if (context.deviceProfile.quirks.adreno600) { //Normals are 0 and converting depht does not work on adreno 600 series\n            return;\n        }\n        const { uniforms } = resources;\n        const { toonOutline, localSpaceTranslation } = state;\n        if (context.hasStateChanged({ toonOutline, localSpaceTranslation })) {\n            const { values } = this.uniforms;\n            values.color = toonOutline.color;\n            context.updateUniformBuffer(uniforms, this.uniforms);\n        }\n        if (context.isRendering() && !context.isPickBuffersValid() && isEnabled(context, state)) {\n            context.renderPickBuffers();\n        }\n    }\n\n    render(state: DerivedRenderState) {\n        const { context, resources } = this;\n        if (context.deviceProfile.quirks.adreno600) { //Normals are 0 and converting depht does not work on adreno 600 series\n            return;\n        }\n        const { program, uniforms, sampler } = resources;\n        const { gl, cameraUniforms } = context;\n        const { textures } = context.buffers;\n\n        if (context.isRendering() && context.isPickBuffersValid() && isEnabled(context, state)) {\n            glState(gl, {\n                program,\n                uniformBuffers: [cameraUniforms, uniforms],\n                textures: [\n                    { kind: \"TEXTURE_2D\", texture: textures.color, sampler },\n                    { kind: \"TEXTURE_2D\", texture: textures.pick, sampler },\n                    { kind: \"TEXTURE_2D\", texture: textures.depth, sampler },\n                ],\n                sample: {\n                    alphaToCoverage: true\n                },\n                blend: {\n                    enable: false,\n                    srcRGB: \"SRC_ALPHA\",\n                    dstRGB: \"ONE_MINUS_SRC_ALPHA\",\n                    srcAlpha: \"ONE\",\n                    dstAlpha: \"ONE\",\n                },\n                depth: {\n                    test: false,\n                    writeMask: false,\n                },\n            });\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\n            context[\"addRenderStatistics\"](stats);\n        }\n    }\n\n    contextLost(): void {\n    }\n\n    dispose() {\n        this.contextLost();\n        this.resources.bin.dispose();\n    }\n}", "import type { DerivedRenderState } from \"../state\";\nimport { RenderContext } from \"../context\";\nimport { BackgroundModule } from \"./background\";\nimport { GridModule } from \"./grid\";\nimport { OctreeModule } from \"./octree\";\nimport { TonemapModule } from \"./tonemap\";\nimport { CubeModule } from \"./cube\";\nimport { ClippingModule } from \"./clipping\";\nimport { WatermarkModule } from \"./watermark\";\nimport { DynamicModule } from \"./dynamic\";\nimport { ToonModule } from \"./toon_outline\";\n\n// contains all state (geometry, textures etc), or has at least the ability to reload state on demand if e.g. webgl context is lost\nexport interface RenderModule {\n    readonly kind: string;\n    withContext(context: RenderContext): RenderModuleContext | Promise<RenderModuleContext>;\n}\n\n// contains module's GPU resources\nexport interface RenderModuleContext {\n    readonly module: RenderModule;\n    update(state: DerivedRenderState): void;\n    readonly prepass?: (state: DerivedRenderState) => void;\n    readonly pick?: (state: DerivedRenderState) => void;\n    render(state: DerivedRenderState): void;\n    contextLost(): void;\n    dispose(): void;\n}\n\nexport function createDefaultModules() {\n    return [\n        new BackgroundModule(),\n        new CubeModule(),\n        new OctreeModule(),\n        new DynamicModule(),\n        new ToonModule(),\n        new GridModule(),\n        new ClippingModule(),\n        new WatermarkModule(),\n        new TonemapModule(),\n    ];\n}\n", "import type { AtLeastOne, RGB, RGBA, RGBATransform } from \"./state\";\n\nexport function createNeutralHighlight(): RGBATransform {\n    return [\n        1, 0, 0, 0, 0,\n        0, 1, 0, 0, 0,\n        0, 0, 1, 0, 0,\n        0, 0, 0, 1, 0,\n    ] as const\n}\n\nexport function createTransparentHighlight(opacity: number): RGBATransform {\n    return [\n        1, 0, 0, 0, 0,\n        0, 1, 0, 0, 0,\n        0, 0, 1, 0, 0,\n        0, 0, 0, opacity, 0,\n    ] as const\n}\n\nexport function createColorSetHighlight(color: RGB | RGBA): RGBATransform {\n    const [r, g, b, a] = color;\n    return [\n        0, 0, 0, 0, r,\n        0, 0, 0, 0, g,\n        0, 0, 0, 0, b,\n        0, 0, 0, 0, a ?? 1,\n    ] as const\n}\n\nexport function createRGBATransformHighlight(options: AtLeastOne<RGBAOptions>): RGBATransform {\n    const r = normalizeLinearTransform(options.red);\n    const g = normalizeLinearTransform(options.green);\n    const b = normalizeLinearTransform(options.blue);\n    const a = normalizeLinearTransform(options.opacity);\n    return [\n        r[0], 0, 0, 0, r[1],\n        0, g[0], 0, 0, g[1],\n        0, 0, b[0], 0, b[1],\n        0, 0, 0, a[0], a[1],\n    ] as const\n}\n\nexport function createHSLATransformHighlight(options: AtLeastOne<HSLAOptions>): RGBATransform {\n    const [ls, lo] = normalizeLinearTransform(options.lightness);\n    const [as, ao] = normalizeLinearTransform(options.opacity);\n\n    function mix(a: number, b: number, t: number) {\n        return a + (b - a) * t;\n    }\n\n    const ss = options.saturation ?? 1;\n    const s0 = mix(1 / 3, 1, ss) * ls;\n    const s1 = mix(1 / 3, 0, ss) * ls;\n    // TODO: Weigh RGB differently based on perceived brightness ~(0.3, 0.6, 0.1)?\n    // TODO: Add hue offset?\n\n    return [\n        s0, s1, s1, 0, lo,\n        s1, s0, s1, 0, lo,\n        s1, s1, s0, 0, lo,\n        0, 0, 0, as, ao,\n    ] as const;\n}\n\nfunction isLinearTransform(transform: LinearTransform | number | undefined): transform is LinearTransform {\n    return typeof (transform) == \"object\";\n}\n\nfunction normalizeLinearTransform(transform: LinearTransform | number | undefined) {\n    let scale = 1;\n    let offset = 0;\n    if (isLinearTransform(transform)) {\n        if (transform.scale != undefined) {\n            scale = transform.scale;\n        }\n        if (transform.offset != undefined) {\n            offset = transform.offset;\n        }\n    } else if (typeof transform == \"number\") {\n        scale = 0;\n        offset = transform;\n    }\n    return [scale, offset];\n}\n\n/** Options for RGBA + alpha color transformation.\n * @remarks\n * All input values are between 0 and 1.\n */\nexport interface RGBAOptions {\n    /** Red color adjustment. */\n    readonly red: number | LinearTransform;\n    /** Green color adjustment. */\n    readonly green: number | LinearTransform;\n    /** Blue color adjustment. */\n    readonly blue: number | LinearTransform;\n    /** Opacity/alpha adjustment. */\n    readonly opacity: number | LinearTransform;\n}\n\n/** Options for HSL + alpha color transformation.\n * @remarks\n * All input values are between 0 and 1.\n * See [Wikipedia](https://en.wikipedia.org/wiki/HSL_and_HSV) for more details on the HSV color space.\n */\nexport interface HSLAOptions {\n    /** Lightness adjustment. */\n    readonly lightness: number | LinearTransform;\n    /** Saturation adjustment (scale). */\n    readonly saturation: number;\n    // /** Hue adjustment (offset). */\n    // readonly hue: number;\n    /** Opacity/alpha adjustment. */\n    readonly opacity: number | LinearTransform;\n}\n\n\n/** Linear transform options.\n * @remarks\n * The transform is performed by first applying scale, then adding offset, i.e.: result = value * scale + offset.\n * If scale = 0, offset will effectively replace input value.\n */\nexport interface LinearTransform {\n    /** Multiplicand for input value. Default = 1.*/\n    readonly scale?: number;\n    /** Addend for scaled input value. Default = 0. */\n    readonly offset?: number;\n}\n", "export class Benchmark {\n    readonly canvas;\n    readonly gl;\n    static readonly size = 1024;\n    static readonly numPixels = Benchmark.size * Benchmark.size;\n\n    constructor() {\n        const options: WebGLContextAttributes = {\n            alpha: true,\n            antialias: false,\n            depth: false,\n            desynchronized: false,\n            failIfMajorPerformanceCaveat: true,\n            powerPreference: \"high-performance\",\n            premultipliedAlpha: true,\n            preserveDrawingBuffer: false,\n            stencil: false,\n        };\n\n        const { size } = Benchmark;\n        // const canvas = this.canvas = new OffscreenCanvas(size, size);\n        const canvas = this.canvas = document.createElement(\"canvas\");\n        canvas.width = size;\n        canvas.height = size;\n        canvas.style.backgroundColor = \"red\";\n        canvas.style.position = \"absolute\";\n        canvas.style.top = \"0\";\n        canvas.style.left = \"0\";\n        canvas.style.right = \"0\";\n        canvas.style.bottom = \"0\";\n        canvas.style.zIndex = \"10\";\n        document.body.appendChild(canvas);\n        const gl = canvas.getContext(\"webgl2\", options);\n        if (!gl)\n            throw new Error(\"Unable to create WebGL 2 context!\");\n        this.gl = gl;\n    }\n\n    dispose() {\n        const { gl, canvas } = this;\n        document.body.removeChild(canvas);\n        const ext = gl.getExtension(\"WEBGL_lose_context\");\n        ext?.loseContext();\n    }\n}\n", "export function waitFrame() {\n    return new Promise<number>((resolve) => {\n        function animate(time: number) {\n            resolve(time);\n        }\n        requestAnimationFrame(animate);\n    });\n}\n\nexport async function measure(action: (iteration: number) => void) {\n    const elapsed: number[] = [];\n    let prevTime: number | undefined;\n\n    async function tick() {\n        const time = await waitFrame();\n        if (prevTime != undefined) {\n            elapsed.push(time - prevTime);\n        }\n        prevTime = time;\n    }\n\n    // measure frame interval\n    const frames = 6;\n    for (let i = 0; i < frames; i++) {\n        await tick();\n    }\n    elapsed.sort((a, b) => a - b);\n    const medianInterval = elapsed[Math.round(elapsed.length / 2)]; // use median interval as frame interval\n    const fps = Math.round(1000 / medianInterval); // round to nearest FPS\n    console.log({ fps });\n\n    let iterations = 1;\n    for (; ;) {\n        prevTime = undefined;\n        elapsed.length = 0;\n        for (let i = 0; i < frames; i++) {\n            await tick();\n            for (let j = 0; j < iterations; j++) {\n                action(j);\n            }\n        }\n        elapsed.sort((a, b) => a - b);\n        const averageFrameInterval = elapsed.slice(1, elapsed.length - 1).reduce((a, b) => (a + b)) / (elapsed.length - 2); // ignore min and max values\n        if (averageFrameInterval > 100) {\n            return averageFrameInterval / iterations;\n        }\n        iterations = Math.max(iterations + 1, Math.round(iterations * 1.75));\n        console.log(iterations);\n    }\n}\n\nfunction waitSync(gl: WebGL2RenderingContext, sync: WebGLSync) {\n    gl.flush();\n    let resolve: (value: number) => void = undefined!;\n    const promise = new Promise<number>((res) => { resolve = res; });\n    (function checkSync(): void {\n        const flags = 0; // gl.SYNC_FLUSH_COMMANDS_BIT\n        const timeout = 0; // gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL\n        const status = gl.clientWaitSync(sync, flags, timeout);\n        switch (status) {\n            case gl.TIMEOUT_EXPIRED:\n                setTimeout(checkSync);\n                return;\n            case gl.WAIT_FAILED:\n                throw new Error('GPU Sync error!');\n        }\n        gl.deleteSync(sync);\n        resolve(performance.now());\n    })();\n    return promise;\n}\n", "import fillrate_vert from \"./fillrate.vert\";\nimport fillrate_frag from \"./fillrate.frag\";\nimport pointrate_vert from \"./pointrate.vert\";\nimport pointrate_frag from \"./pointrate.frag\";\n\ntype Shaders = { readonly [P in string]: { readonly vertexShader: string; readonly fragmentShader?: string; } };\n\nexport const shaders = {\n    fillrate: {\n        vertexShader: fillrate_vert,\n        fragmentShader: fillrate_frag,\n    },\n    pointrate: {\n        vertexShader: pointrate_vert,\n        fragmentShader: pointrate_frag,\n    },\n} as const satisfies Shaders;\n", "import { glClear, glCreateProgram, glDraw, glState, glUniformLocations } from \"webgl2\";\nimport { measure } from \"./util\";\nimport { Benchmark } from \"./benchmark\";\nimport { shaders } from \"./shaders\";\n\nexport class FillrateProfiler {\n    readonly program;\n    readonly uniforms;\n\n    constructor(readonly benchmark: Benchmark) {\n        const { gl } = this.benchmark;\n        this.program = glCreateProgram(gl, shaders.fillrate);\n        this.uniforms = glUniformLocations(gl, this.program, [\"seed\"]);\n    }\n\n    async measure() {\n        const { benchmark, program, uniforms } = this;\n        const { gl } = benchmark;\n        const { size, numPixels } = Benchmark;\n        gl.getError();\n        const numQuads = 128;\n        // TODO: create dedicated framebuffer (HDRI?)\n        glState(gl, {\n            viewport: { width: size, height: size },\n            program,\n            blend: {\n                enable: true,\n                srcRGB: \"SRC_ALPHA\",\n                dstRGB: \"ONE_MINUS_SRC_ALPHA\",\n                srcAlpha: \"ONE\",\n                dstAlpha: \"ONE\",\n            },\n            depth: {\n                test: false,\n                writeMask: false,\n            },\n        });\n\n        function render(iteration: number) {\n            gl.uniform1f(uniforms.seed, Math.random());\n            // glClear(gl, { kind: \"back_buffer\", color: [0, 0, 0, 1] });\n            glDraw(gl, { kind: \"arrays_instanced\", mode: \"TRIANGLE_STRIP\", count: 4, instanceCount: numQuads }); // draw quad\n            gl.flush();\n        }\n\n        glClear(gl, { kind: \"back_buffer\", color: [0, 0, 0, 1] });\n        const time = await measure(render);\n        const rate = numPixels * numQuads * 1000 / time;\n        return rate;\n    }\n}\n\n\n\n/*\n\nFillrate (GPix/sec) = Ghz * #ROPs\n3070: 1.5 * 96 = ~150\nM1: 1.25 * 32 = ~40\nMali-G57 MC2 (oppo): 0.85  * 4 = ~3.4\nMail-G52 MP2 (A8): 0.95 * 4 = ~4.5\nMali-G77 MC9 (OnePlus Nord 2): 0.85 * 18 = ~46\n*/", "import { glClear, glCreateProgram, glDraw, glState, glUniformLocations } from \"webgl2\";\nimport { waitFrame, measure } from \"./util\";\nimport { Benchmark } from \"./benchmark\";\nimport { shaders } from \"./shaders\";\n\nexport class PointrateProfiler {\n    readonly program;\n    readonly uniforms;\n\n    constructor(readonly benchmark: Benchmark) {\n        const { gl } = this.benchmark;\n        this.program = glCreateProgram(gl, shaders.pointrate);\n        this.uniforms = glUniformLocations(gl, this.program, [\"color\"]);\n    }\n\n    async measure() {\n        const { benchmark, program, uniforms } = this;\n        const { gl } = benchmark;\n        const { size, numPixels } = Benchmark;\n        gl.getError();\n        const numOverdraws = 8;\n        glState(gl, {\n            viewport: { width: size, height: size },\n            program,\n            blend: {\n                enable: false,\n            },\n            depth: {\n                test: false,\n                writeMask: false,\n            },\n        });\n\n        function render(iteration: number) {\n            gl.uniform4f(uniforms.color, Math.random(), Math.random(), Math.random(), 1);\n            glDraw(gl, { kind: \"arrays_instanced\", mode: \"POINTS\", count: numPixels, instanceCount: numOverdraws }); // draw quad\n        }\n\n        glClear(gl, { kind: \"back_buffer\", color: [0, 0, 0, 1] });\n        const time = await measure(render);\n        const rate = numPixels * numOverdraws * 1000 / time;\n        return rate;\n    }\n}\n\n/*\nmacbook pro 13 2018 / Intel Iris Plus Graphics 655 (https://support.apple.com/kb/SP775?locale=en_US)\nchrome: fr: 13.17, pr: 0.49\nsafari: fr: 10.1, pr: 0.07\n(chrome and safari differs significantly in point rate, even on M1 mac)\n(no timer webgl extensions on either browser)\n\nmacobook pro 13 M1 2020\nchrome: fr: 182, pr: 1.3\nsafari: fr: 79, pr: 1.3\n\n*/", "import { mat4, type ReadonlyVec2, type ReadonlyVec3, vec2, vec3, quat } from \"gl-matrix\";\nimport type { RenderStateDynamicGeometry, RenderStateDynamicInstance, RenderStateDynamicMaterial, RenderStateDynamicMesh, RenderStateDynamicMeshPrimitive, RenderStateDynamicObject, RenderStateDynamicVertexAttributes } from \"./state\";\n\nconst defaultMaterial: RenderStateDynamicMaterial = {\n    kind: \"unlit\",\n};\n\nconst testMaterial: RenderStateDynamicMaterial = {\n    kind: \"ggx\",\n    metallicFactor: 1,\n    roughnessFactor: 0.1,\n};\n\nconst defaultInstance: RenderStateDynamicInstance = {\n    position: vec3.create(),\n};\n\nexport function createRandomInstances(count = 1, radius?: number) {\n    const instances: RenderStateDynamicInstance[] = [];\n    const r = radius ?? count <= 1 ? 0 : Math.pow(count, 1 / 3) * 2;\n    const rndCoord = () => ((Math.random() * 2 - 1) * r);\n    const rndAngle = () => (Math.random() * 360);\n    for (var i = 0; i < count; i++) {\n        const position = vec3.fromValues(rndCoord(), rndCoord(), rndCoord());\n        if (vec3.sqrLen(position) > r * r) {\n            i--;\n            continue;\n        }\n        const rotation = quat.fromEuler(quat.create(), rndAngle(), rndAngle(), rndAngle());\n        instances.push({ position, rotation })\n    }\n    return instances;\n}\n\nexport function createTestCube(): RenderStateDynamicObject {\n    const vertices = createCubeVertices((pos, norm, col) => ([...pos, ...norm, ...col]));\n    const indices = createCubeIndices();\n\n    const attributes = {\n        position: { kind: \"FLOAT_VEC3\", buffer: vertices, byteStride: 36, byteOffset: 0 },\n        normal: { kind: \"FLOAT_VEC3\", buffer: vertices, byteStride: 36, byteOffset: 12 },\n        color0: { kind: \"FLOAT_VEC3\", buffer: vertices, byteStride: 36, byteOffset: 24 },\n    } as const satisfies RenderStateDynamicVertexAttributes;\n\n    const geometry: RenderStateDynamicGeometry = {\n        primitiveType: \"TRIANGLES\",\n        attributes,\n        indices,\n    };\n\n    const primitive: RenderStateDynamicMeshPrimitive = { geometry, material: testMaterial };\n    const mesh: RenderStateDynamicMesh = { primitives: [primitive] };\n    const instances = [defaultInstance];\n    return { mesh, instances };\n}\n\nfunction createCubeVertices(pack: (position: ReadonlyVec3, normal: ReadonlyVec3, color: ReadonlyVec3) => Iterable<number>) {\n    function face(x: ReadonlyVec3, y: ReadonlyVec3, color: ReadonlyVec3) {\n        const normal = vec3.cross(vec3.create(), y, x);\n        function vert(fx: \"add\" | \"sub\", fy: \"add\" | \"sub\") {\n            const pos = vec3.clone(normal);\n            vec3[fx](pos, pos, x);\n            vec3[fy](pos, pos, y);\n            return pack(pos, normal, color);\n            // return [...pos, ...normal, ...color];\n        }\n        return [\n            ...vert(\"sub\", \"sub\"),\n            ...vert(\"add\", \"sub\"),\n            ...vert(\"sub\", \"add\"),\n            ...vert(\"add\", \"add\"),\n        ];\n    }\n\n    return new Float32Array([\n        ...face([0, 0, -1], [0, 1, 0], [1, 0, 0]), // right (1, 0, 0)\n        ...face([0, 0, 1], [0, 1, 0], [0, 1, 1]), // left (-1, 0, 0)\n        ...face([1, 0, 0], [0, 0, 1], [0, 1, 0]), // top (0, 1, 0)\n        ...face([1, 0, 0], [0, 0, -1], [1, 0, 1]), // bottom (0, -1, 0)\n        ...face([1, 0, 0], [0, 1, 0], [0, 0, 1]), // front (0, 0, 1)\n        ...face([-1, 0, 0], [0, 1, 0], [1, 1, 0]), // back (0, 0, -1)\n    ])\n}\n\nfunction createCubeIndices() {\n    let idxOffset = 0;\n    function face() {\n        const idx = [0, 2, 1, 1, 2, 3].map(i => i + idxOffset);\n        idxOffset += 4;\n        return idx;\n    }\n    return new Uint16Array([\n        ...face(),\n        ...face(),\n        ...face(),\n        ...face(),\n        ...face(),\n        ...face(),\n    ]);\n}\n\nexport function createTestSphere(detail = 0): RenderStateDynamicObject {\n    const radius = 1;\n    const { positionBuffer, normalBuffer, texCoordBuffer } = icosahedron(radius, detail);\n\n    const attributes = {\n        position: { kind: \"FLOAT_VEC3\", buffer: positionBuffer },\n        normal: { kind: \"FLOAT_VEC3\", buffer: normalBuffer },\n        texCoord0: { kind: \"FLOAT_VEC2\", buffer: texCoordBuffer },\n    } as const satisfies RenderStateDynamicVertexAttributes;\n\n    const geometry: RenderStateDynamicGeometry = {\n        primitiveType: \"TRIANGLES\",\n        attributes,\n        indices: positionBuffer.length / 3,\n    };\n\n    const primitive: RenderStateDynamicMeshPrimitive = { geometry, material: testMaterial };\n    const mesh: RenderStateDynamicMesh = { primitives: [primitive] };\n    return { mesh, instances: [defaultInstance] };\n}\n\nfunction icosahedron(radius: number, detail: number) {\n    const t = (1 + Math.sqrt(5)) / 2;\n    const vertices = [\n        - 1, t, 0, 1, t, 0, - 1, - t, 0, 1, - t, 0,\n        0, - 1, t, 0, 1, t, 0, - 1, - t, 0, 1, - t,\n        t, 0, - 1, t, 0, 1, - t, 0, - 1, - t, 0, 1\n    ];\n    const indices = [\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11,\n        1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8,\n        3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9,\n        4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1\n    ];\n    return polyhedron(vertices, indices, radius, detail);\n}\n\nfunction polyhedron(vertices: number[], indices: number[], radius: number, detail: number) {\n    const vertexBuffer: number[] = [];\n    const uvBuffer: number[] = [];\n\n    // the subdivision creates the vertex buffer data\n    subdivide(detail);\n\n    // all vertices should lie on a conceptual sphere with a given radius\n    applyRadius(radius);\n\n    // finally, create the uv data\n    generateUVs();\n\n    // build non-indexed geometry\n    const positionBuffer = new Float32Array(vertexBuffer);\n    const normalBuffer = new Float32Array(vertexBuffer);\n    const texCoordBuffer = new Float32Array(uvBuffer);\n\n    if (detail == 0) {\n        computeVertexNormals(); // flat normals\n    } else {\n        normalizeNormals(); // smooth normals\n    }\n\n    return { positionBuffer, normalBuffer, texCoordBuffer } as const;\n\n    // helper functions\n    function subdivide(detail: number) {\n        const a = vec3.create();\n        const b = vec3.create();\n        const c = vec3.create();\n\n        // iterate over all faces and apply a subdivision with the given detail value\n        for (let i = 0; i < indices.length; i += 3) {\n            // get the vertices of the face\n            getVertexByIndex(indices[i + 0], a);\n            getVertexByIndex(indices[i + 1], b);\n            getVertexByIndex(indices[i + 2], c);\n\n            // perform subdivision\n            subdivideFace(a, b, c, detail);\n        }\n    }\n\n    function subdivideFace(a: ReadonlyVec3, b: ReadonlyVec3, c: ReadonlyVec3, detail: number) {\n        const cols = detail + 1;\n\n        // we use this multidimensional array as a data structure for creating the subdivision\n        const v: ReadonlyVec3[][] = [];\n\n        // construct all of the vertices for this subdivision\n        for (let i = 0; i <= cols; i++) {\n            v[i] = [];\n            const aj = vec3.lerp(vec3.create(), a, c, i / cols);\n            const bj = vec3.lerp(vec3.create(), b, c, i / cols);\n            const rows = cols - i;\n            for (let j = 0; j <= rows; j++) {\n                if (j === 0 && i === cols) {\n                    v[i][j] = aj;\n                } else {\n                    v[i][j] = vec3.lerp(vec3.create(), aj, bj, j / rows);\n                }\n            }\n        }\n\n        // construct all of the faces\n        for (let i = 0; i < cols; i++) {\n            for (let j = 0; j < 2 * (cols - i) - 1; j++) {\n                const k = Math.floor(j / 2);\n                if (j % 2 === 0) {\n                    pushVertex(v[i][k + 1]);\n                    pushVertex(v[i + 1][k]);\n                    pushVertex(v[i][k]);\n                } else {\n                    pushVertex(v[i][k + 1]);\n                    pushVertex(v[i + 1][k + 1]);\n                    pushVertex(v[i + 1][k]);\n                }\n            }\n        }\n    }\n\n    function applyRadius(radius: number) {\n        const vertex = vec3.create();\n        // iterate over the entire buffer and apply the radius to each vertex\n        for (let i = 0; i < vertexBuffer.length; i += 3) {\n            vertex[0] = vertexBuffer[i + 0];\n            vertex[1] = vertexBuffer[i + 1];\n            vertex[2] = vertexBuffer[i + 2];\n            vec3.scale(vertex, vec3.normalize(vertex, vertex), radius);\n            vertexBuffer[i + 0] = vertex[0];\n            vertexBuffer[i + 1] = vertex[1];\n            vertexBuffer[i + 2] = vertex[2];\n        }\n    }\n\n    function generateUVs() {\n        const vertex = vec3.create();\n        for (let i = 0; i < vertexBuffer.length; i += 3) {\n            vertex[0] = vertexBuffer[i + 0];\n            vertex[1] = vertexBuffer[i + 1];\n            vertex[2] = vertexBuffer[i + 2];\n\n            const u = azimuth(vertex) / 2 / Math.PI + 0.5;\n            const v = inclination(vertex) / Math.PI + 0.5;\n            uvBuffer.push(u, 1 - v);\n        }\n        correctUVs();\n        correctSeam();\n    }\n\n    function correctSeam() {\n        // handle case when face straddles the seam, see #3269\n        for (let i = 0; i < uvBuffer.length; i += 6) {\n            // uv data of a single face\n            const x0 = uvBuffer[i + 0];\n            const x1 = uvBuffer[i + 2];\n            const x2 = uvBuffer[i + 4];\n\n            const max = Math.max(x0, x1, x2);\n            const min = Math.min(x0, x1, x2);\n\n            // 0.9 is somewhat arbitrary\n            if (max > 0.9 && min < 0.1) {\n                if (x0 < 0.2) uvBuffer[i + 0] += 1;\n                if (x1 < 0.2) uvBuffer[i + 2] += 1;\n                if (x2 < 0.2) uvBuffer[i + 4] += 1;\n            }\n        }\n    }\n\n    function pushVertex(vertex: ReadonlyVec3) {\n        vertexBuffer.push(...vertex);\n    }\n\n    function getVertexByIndex(index: number, vertex: vec3) {\n        const stride = index * 3;\n        vertex[0] = vertices[stride + 0];\n        vertex[1] = vertices[stride + 1];\n        vertex[2] = vertices[stride + 2];\n    }\n\n    function correctUVs() {\n        const a = vec3.create();\n        const b = vec3.create();\n        const c = vec3.create();\n        const centroid = vec3.create();\n\n        const uvA = vec2.create();\n        const uvB = vec2.create();\n        const uvC = vec2.create();\n\n        for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n            vec3.set(a, vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n            vec3.set(b, vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n            vec3.set(c, vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n            vec2.set(uvA, uvBuffer[j + 0], uvBuffer[j + 1]);\n            vec2.set(uvB, uvBuffer[j + 2], uvBuffer[j + 3]);\n            vec2.set(uvC, uvBuffer[j + 4], uvBuffer[j + 5]);\n\n            vec3.add(centroid, a, b);\n            vec3.add(centroid, centroid, c);\n            vec3.scale(centroid, centroid, 1. / 3);\n\n            const azi = azimuth(centroid);\n\n            correctUV(uvA, j + 0, a, azi);\n            correctUV(uvB, j + 2, b, azi);\n            correctUV(uvC, j + 4, c, azi);\n        }\n    }\n\n    function correctUV(uv: ReadonlyVec2, stride: number, vector: ReadonlyVec3, azimuth: number) {\n        if ((azimuth < 0) && (uv[0] === 1)) {\n            uvBuffer[stride] = uv[0] - 1;\n        }\n        if ((vector[0] === 0) && (vector[2] === 0)) {\n            uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n        }\n    }\n\n    // Angle around the Y axis, counter-clockwise when looking from above.\n    function azimuth(vector: ReadonlyVec3) {\n        return Math.atan2(vector[2], - vector[0]);\n    }\n\n    // Angle above the XZ plane.\n    function inclination(vector: ReadonlyVec3) {\n        return Math.atan2(- vector[1], Math.sqrt((vector[0] * vector[0]) + (vector[2] * vector[2])));\n    }\n\n    function computeVertexNormals() {\n        if (positionBuffer !== undefined) {\n            const cb = vec3.create(), ab = vec3.create();\n            // non-indexed elements (unconnected triangle soup)\n            for (let i = 0, il = positionBuffer.length; i < il; i += 9) {\n                const pA = positionBuffer.subarray(i + 0, i + 3);\n                const pB = positionBuffer.subarray(i + 3, i + 6);\n                const pC = positionBuffer.subarray(i + 6, i + 9);\n                vec3.sub(cb, pC, pB);\n                vec3.sub(ab, pA, pB);\n                vec3.cross(cb, cb, ab);\n                vec3.normalize(cb, cb);\n                vec3.copy(normalBuffer.subarray(i + 0, i + 3), cb);\n                vec3.copy(normalBuffer.subarray(i + 3, i + 6), cb);\n                vec3.copy(normalBuffer.subarray(i + 6, i + 9), cb);\n            }\n        }\n    }\n\n    function normalizeNormals() {\n        for (let i = 0, il = normalBuffer.length; i < il; i += 3) {\n            const normal = normalBuffer.subarray(i, i + 3);\n            vec3.normalize(normal, normal);\n        }\n    }\n}\n", "import * as GLTF from \"./types\";\n\nasync function request(url: URL, abortController?: AbortController) {\n    const signal = abortController?.signal;\n    const response = await fetch(url.toString(), { mode: \"cors\", signal });\n    if (!response.ok) {\n        throw new Error(`HTTP Error: ${response.status}: ${response.statusText} (${url})`);\n    }\n    return response;\n}\n\nasync function downloadJson(url: URL, abortController?: AbortController) {\n    const response = await request(url, abortController);\n    return await response.json();\n}\n\nasync function downloadArrayBuffer(url: URL, abortController?: AbortController) {\n    const response = await request(url, abortController);\n    return await response.arrayBuffer();\n}\n\nasync function downloadBlob(url: URL, abortController?: AbortController) {\n    const response = await request(url, abortController);\n    return await response.blob();\n}\n\nconst BINARY_HEADER_MAGIC = 'glTF';\nconst BINARY_HEADER_LENGTH = 12;\nconst BINARY_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\nexport function parseGLB(data: ArrayBuffer) {\n    const headerView = new DataView(data, 0, BINARY_HEADER_LENGTH);\n    const decoder = new TextDecoder();\n\n    const header = {\n        magic: decoder.decode(new Uint8Array(data, 0, 4)),\n        version: headerView.getUint32(4, true),\n        length: headerView.getUint32(8, true),\n    };\n\n    if (header.magic !== BINARY_HEADER_MAGIC) {\n        throw new Error('Unsupported glTF-Binary header.');\n    } else if (header.version < 2.0) {\n        throw new Error('Unsupported legacy gltf file detected.');\n    }\n\n    let json: string | undefined;\n    let buffer: ArrayBuffer | undefined;\n    const chunkView = new DataView(data, BINARY_HEADER_LENGTH);\n    let chunkIndex = 0;\n    while (chunkIndex < chunkView.byteLength) {\n        const chunkLength = chunkView.getUint32(chunkIndex, true); chunkIndex += 4;\n        const chunkType = chunkView.getUint32(chunkIndex, true); chunkIndex += 4;\n        if (chunkType === BINARY_CHUNK_TYPES.JSON) {\n            const contentArray = new Uint8Array(data, BINARY_HEADER_LENGTH + chunkIndex, chunkLength);\n            json = decoder.decode(contentArray);\n            json = json.substring(0, json.lastIndexOf(\"}\") + 1);\n        } else if (chunkType === BINARY_CHUNK_TYPES.BIN) {\n            const contentArray = new Uint8Array(data, BINARY_HEADER_LENGTH + chunkIndex, chunkLength);\n            const binaryChunk = new Uint8Array(chunkLength);\n            binaryChunk.set(contentArray);\n            buffer = binaryChunk.buffer;\n        }\n        chunkIndex += chunkLength; // Clients must ignore chunks with unknown types.\n    }\n\n    if (!json) {\n        throw new Error('glTF-Binary: JSON content not found.');\n    }\n    if (!buffer) {\n        throw new Error('glTF-Binary: Binary chunk not found.');\n    }\n    return { json, buffer };\n}\n\nexport async function loadData(url: URL, abortController?: AbortController) {\n    const path = url.pathname.toLowerCase();\n    let gltf: GLTF.GlTf;\n    let buffers: ArrayBuffer[];\n    if (path.endsWith(\".gltf\")) {\n        gltf = await downloadJson(url) as GLTF.GlTf;\n        // fetch binary buffer(s)\n        const bufferPromises = (gltf.buffers ?? []).map(async buf => {\n            const bufferUrl = new URL(buf.uri!, url);\n            if (!bufferUrl.search)\n                bufferUrl.search = url.search ?? \"\";\n            return downloadArrayBuffer(bufferUrl, abortController);\n        });\n        buffers = await Promise.all(bufferPromises);\n    } else if (path.endsWith(\".glb\")) {\n        const glb = await downloadArrayBuffer(url, abortController);\n        const { json, buffer } = parseGLB(glb);\n        gltf = JSON.parse(json) as GLTF.GlTf;\n        buffers = [buffer];\n    } else {\n        throw new Error(`Uknown GLTF file extention: \"${url}\"!`);\n    }\n    const imageBlobPromises = gltf.images?.map(img => {\n        if (img.uri) {\n            const imageUrl = new URL(img.uri, url);\n            return downloadBlob(imageUrl, abortController);\n        }\n    }) ?? [];\n    const externalImageBlobs = await Promise.all(imageBlobPromises);\n    return { gltf, buffers, externalImageBlobs };\n}\n", "import { vec3, mat4, quat, type ReadonlyMat4, mat3 } from \"gl-matrix\";\nimport type { MagFilterString, MinFilterString, TextureParams2DUncompressed, WrapString } from \"webgl2\";\nimport { GL } from \"webgl2/constants\";\nimport type { RenderStateDynamicGeometry, RenderStateDynamicImage, RenderStateDynamicInstance, RenderStateDynamicMaterialGGX, RenderStateDynamicMaterialUnlit, RenderStateDynamicMesh, RenderStateDynamicMeshPrimitive, RenderStateDynamicNormalTextureReference, RenderStateDynamicObject, RenderStateDynamicOcclusionTextureReference, RenderStateDynamicSampler, RenderStateDynamicTexture, RenderStateDynamicTextureReference, RenderStateDynamicVertexAttribute, RenderStateDynamicVertexAttributes, RGB, RGBA } from \"../state\";\nimport * as GLTF from \"./types\";\n\n\nfunction decomposeMatrix(transform: mat4) {\n    const rotation = quat.fromMat3(quat.create(), mat3.fromMat4(mat3.create(), transform));\n    const position = vec3.fromValues(transform[12], transform[13], transform[14]);\n    return { rotation, position } as const;\n}\n\n\nfunction getTransform(node: GLTF.Node) {\n    const { matrix, translation, rotation } = node;\n    const transform: mat4 = mat4.create();\n    if (matrix) {\n        mat4.set(transform, ...(matrix as Parameters<typeof mat4.fromValues>));\n    } else if (translation || rotation) {\n        const t = translation ? vec3.fromValues(...(translation as Parameters<typeof vec3.fromValues>)) : vec3.create();\n        const r = rotation ? quat.fromValues(...(rotation as Parameters<typeof quat.fromValues>)) : quat.create();\n        mat4.fromRotationTranslation(transform, r, t);\n    }\n    return transform;\n}\n\nexport async function parseGLTF(buffers: ArrayBuffer[], gltf: GLTF.GlTf, externalImageBlobs: (Blob | undefined)[], baseObjectId?: number): Promise<readonly RenderStateDynamicObject[]> {\n    const { extensionsRequired, extensionsUsed } = gltf;\n    if (extensionsUsed && extensionsUsed.length != 0 && extensionsUsed[0] != \"KHR_materials_unlit\") {\n        console.warn(`The following glTF extensions were used, but are not supported: ${extensionsUsed.join(', ')}!`);\n    }\n    if (extensionsRequired && extensionsRequired.length != 0 && extensionsRequired[0] != \"KHR_materials_unlit\") {\n        throw new Error(`The following glTF extensions were required, but are not supported: ${extensionsRequired.join(', ')}!`);\n    }\n    const filters = {\n        [GL.NEAREST]: \"NEAREST\",\n        [GL.LINEAR]: \"LINEAR\",\n        [GL.NEAREST_MIPMAP_NEAREST]: \"NEAREST_MIPMAP_NEAREST\",\n        [GL.LINEAR_MIPMAP_NEAREST]: \"LINEAR_MIPMAP_NEAREST\",\n        [GL.NEAREST_MIPMAP_LINEAR]: \"NEAREST_MIPMAP_LINEAR\",\n        [GL.LINEAR_MIPMAP_LINEAR]: \"LINEAR_MIPMAP_LINEAR\",\n    } as { [index: number]: string };\n\n    const wrappings = {\n        [GL.CLAMP_TO_EDGE]: \"CLAMP_TO_EDGE\",\n        [GL.MIRRORED_REPEAT]: \"MIRRORED_REPEAT\",\n        [GL.REPEAT]: \"REPEAT\",\n    } as { [index: number]: string };\n\n    const attributeNames = {\n        POSITION: \"position\",\n        NORMAL: \"normal\",\n        TANGENT: \"tangent\",\n        TEXCOORD_0: \"texCoord0\",\n        TEXCOORD_1: \"texCoord1\",\n        COLOR_0: \"color0\",\n    } as const;\n\n    const attributeCompontentTypes = {\n        [GL.FLOAT]: \"FLOAT\",\n        [GL.BYTE]: \"BYTE\",\n        [GL.SHORT]: \"SHORT\",\n        [GL.INT]: \"INT\",\n        [GL.UNSIGNED_BYTE]: \"UNSIGNED_BYTE\",\n        [GL.UNSIGNED_SHORT]: \"UNSIGNED_SHORT\",\n        [GL.UNSIGNED_INT]: \"UNSIGNED_INT\",\n    } as const;\n\n    /** Spec: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#accessor-element-size */\n    const attributeComponentCounts = {\n        SCALAR: 1,\n        VEC2: 2,\n        VEC3: 3,\n        VEC4: 4,\n    } as const;\n\n    const attributeCompontentTypePrefixes = {\n        [GL.FLOAT]: \"FLOAT\",\n        [GL.BYTE]: \"INT\",\n        [GL.SHORT]: \"INT\",\n        [GL.INT]: \"INT\",\n        [GL.UNSIGNED_BYTE]: \"UNSIGNED_INT\",\n        [GL.UNSIGNED_SHORT]: \"UNSIGNED_INT\",\n        [GL.UNSIGNED_INT]: \"UNSIGNED_INT\",\n    } as const;\n\n    const topologies = {\n        [GL.POINTS]: \"POINTS\",\n        [GL.LINES]: \"LINES\",\n        [GL.LINE_LOOP]: \"LINE_LOOP\",\n        [GL.LINE_STRIP]: \"LINE_STRIP\",\n        [GL.TRIANGLES]: \"TRIANGLES\",\n        [GL.TRIANGLE_STRIP]: \"TRIANGLE_STRIP\",\n        [GL.TRIANGLE_FAN]: \"TRIANGLE_FAN\",\n    } as const;\n\n    /** Spec: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#accessor-element-size */\n    const bufferTypes = {\n        [GL.UNSIGNED_BYTE]: Uint8Array,\n        [GL.UNSIGNED_SHORT]: Uint16Array,\n        [GL.UNSIGNED_INT]: Uint32Array,\n        [GL.BYTE]: Int8Array,\n        [GL.SHORT]: Int16Array,\n        [GL.INT]: Int32Array,\n        [GL.FLOAT]: Float32Array,\n    } as const;\n\n    const bufferViews = gltf.bufferViews!.map(v => {\n        return new Uint8Array(buffers[v.buffer], v.byteOffset, v.byteLength);\n    });\n\n    function getImageBlob(image: GLTF.Image) {\n        const bufferView = gltf.bufferViews![image.bufferView!];\n        const begin = bufferView.byteOffset ?? 0;\n        const end = bufferView.byteLength ? begin + bufferView.byteLength : undefined;\n        const buffer = buffers[bufferView.buffer].slice(begin, end);\n        return new Blob([buffer]);\n    }\n\n    const imagePromises = gltf.images?.map(async (img, idx) => {\n        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n        let blob = externalImageBlobs[idx] ?? getImageBlob(img);\n        if (img.mimeType) {\n            blob = new Blob([blob], { type: img.mimeType });\n        }\n        const image = await createImageBitmap(blob, { colorSpaceConversion: \"none\" });\n        const { width, height } = image;\n        const params: TextureParams2DUncompressed = { kind: \"TEXTURE_2D\", width, height, generateMipMaps: true, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image };\n        return { params } as RenderStateDynamicImage;\n    }) ?? [];\n    const images = await Promise.all(imagePromises);\n\n    const samplers = gltf.samplers?.map(s => {\n        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#samplers\n        const { magFilter, minFilter, wrapS, wrapT } = s;\n        const minificationFilter = filters[minFilter ?? GL.LINEAR_MIPMAP_LINEAR] as MinFilterString;\n        const magnificationFilter = filters[magFilter ?? GL.LINEAR] as MagFilterString;\n        const wrap = wrapS && wrapT ? [wrappings[wrapS] as WrapString, wrappings[wrapT] as WrapString] as const : [\"REPEAT\", \"REPEAT\"] as const;\n        return { minificationFilter, magnificationFilter, wrap } as RenderStateDynamicSampler;\n    }) ?? [];\n\n    const textures = gltf.textures?.map(t => {\n        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n        const image = images[t.source!];\n        const sampler = samplers[t.sampler!];\n        return { image, sampler } as RenderStateDynamicTexture;\n    }) ?? [];\n\n    const defaultMaterial: RenderStateDynamicMaterialGGX = { kind: \"ggx\" };\n    const materials = gltf.materials?.map((m, i) => {\n        const isUnlit = m.extensions && \"KHR_materials_unlit\" in m.extensions;\n        const { pbrMetallicRoughness, normalTexture, occlusionTexture, emissiveTexture, emissiveFactor, alphaMode, alphaCutoff, doubleSided } = m;\n        function getTexInfo(texInfo?: GLTF.TextureInfo | GLTF.MaterialNormalTextureInfo | GLTF.MaterialOcclusionTextureInfo) {\n            if (texInfo) {\n                const transform = undefined; // TODO: add KHR_texture_transform\n                if (\"scale\" in texInfo) {\n                    return {\n                        texture: textures[texInfo.index] ?? null,\n                        texCoord: texInfo.texCoord,\n                        scale: texInfo.scale,\n                        transform,\n                    } as RenderStateDynamicNormalTextureReference;\n                } else if (\"strength\" in texInfo) {\n                    return {\n                        texture: textures[texInfo.index] ?? null,\n                        texCoord: texInfo.texCoord,\n                        strength: texInfo.strength,\n                        transform,\n                    } as RenderStateDynamicOcclusionTextureReference;\n                }\n                return {\n                    texture: textures[texInfo.index] ?? null,\n                    texCoord: texInfo.texCoord,\n                    transform,\n                } as RenderStateDynamicTextureReference;\n            }\n        }\n        if (isUnlit) {\n            return {\n                kind: \"unlit\",\n                doubleSided: doubleSided,\n                alphaMode: alphaMode as \"OPAQUE\" | \"MASK\" | \"BLEND\" | undefined,\n                alphaCutoff: alphaCutoff,\n                baseColorFactor: pbrMetallicRoughness?.baseColorFactor as RGBA | undefined,\n                baseColorTexture: getTexInfo(pbrMetallicRoughness?.baseColorTexture),\n            } as RenderStateDynamicMaterialUnlit;\n        } else {\n            return {\n                kind: \"ggx\",\n                doubleSided: doubleSided,\n                alphaMode: alphaMode as \"OPAQUE\" | \"MASK\" | \"BLEND\" | undefined,\n                alphaCutoff: alphaCutoff,\n                baseColorFactor: pbrMetallicRoughness?.baseColorFactor as RGBA | undefined,\n                metallicFactor: pbrMetallicRoughness?.metallicFactor,\n                roughnessFactor: pbrMetallicRoughness?.roughnessFactor,\n                emissiveFactor: emissiveFactor as RGB | undefined,\n                baseColorTexture: getTexInfo(pbrMetallicRoughness?.baseColorTexture),\n                metallicRoughnessTexture: getTexInfo(pbrMetallicRoughness?.metallicRoughnessTexture),\n                normalTexture: getTexInfo(normalTexture),\n                occlusionTexture: getTexInfo(occlusionTexture),\n                emissiveTexture: getTexInfo(emissiveTexture),\n            } as RenderStateDynamicMaterialGGX;\n        }\n    }) ?? [];\n\n    const meshes = gltf.meshes?.map(m => {\n        const primitives = m.primitives.map(p => {\n            const attributes = {} as RenderStateDynamicVertexAttributes;\n            for (const [key, value] of Object.entries(p.attributes)) {\n                const name = attributeNames[key as keyof typeof attributeNames];\n                // if (name != \"position\")\n                //     continue;\n                const accessor = gltf.accessors![value];\n                console.assert(!accessor.sparse);\n                const bufferView = gltf.bufferViews![accessor.bufferView!];\n                const buffer = bufferViews[accessor.bufferView!];\n                const componentType = accessor.componentType as keyof typeof attributeCompontentTypes;\n                const prefix = attributeCompontentTypePrefixes[componentType];\n                const type = accessor.type as \"SCALAR\" | \"VEC2\" | \"VEC3\" | \"VEC4\";\n                const kind = accessor.type == \"SCALAR\" ? prefix : `${prefix}_${type as Exclude<typeof type, \"SCALAR\">}` as const;\n                // const floatView = new Float32Array(buffer.buffer, buffer.byteOffset + (accessor.byteOffset ?? 0), accessor.count);\n                const attrib = {\n                    kind,\n                    buffer,\n                    componentType: attributeCompontentTypes[componentType],\n                    componentCount: attributeComponentCounts[type],\n                    normalized: accessor.normalized ?? false,\n                    byteStride: bufferView.byteStride ?? 0,\n                    byteOffset: accessor.byteOffset ?? 0,\n                } as const satisfies RenderStateDynamicVertexAttribute;\n                Reflect.set(attributes, name, attrib);\n            };\n\n            const indicesAccessor = p.indices != undefined ? gltf.accessors![p.indices] : undefined;\n            const count = indicesAccessor ? indicesAccessor.count : gltf.accessors![p.attributes[\"POSITION\"]!].count;\n            const ib = bufferViews[indicesAccessor?.bufferView ?? -1];\n            const IndexBufferType = indicesAccessor ? bufferTypes[indicesAccessor.componentType as GL.UNSIGNED_BYTE | GL.UNSIGNED_SHORT | GL.UNSIGNED_INT] : undefined;\n            const indices = IndexBufferType ? new IndexBufferType(ib.buffer, ib.byteOffset + (indicesAccessor!.byteOffset ?? 0), indicesAccessor!.count) : count;\n            const mode = topologies[p.mode as keyof typeof topologies] ?? \"TRIANGLES\";\n\n            const geometry: RenderStateDynamicGeometry = {\n                primitiveType: mode,\n                attributes,\n                indices,\n            };\n            const material = materials[p.material ?? -1] ?? defaultMaterial;\n            return { geometry, material } as RenderStateDynamicMeshPrimitive;\n        });\n        return { primitives } as RenderStateDynamicMesh;\n    }) ?? [];\n\n    const objects: RenderStateDynamicObject[] = [];\n    if (gltf.scenes && gltf.nodes) {\n        const rootNodes = gltf.scenes[gltf.scene ?? 0].nodes;\n        if (rootNodes) {\n            function traverseNodeTree(nodeIndex: number, parentTransform?: ReadonlyMat4) {\n                const node = gltf.nodes![nodeIndex];\n                const transform = getTransform(node);\n                if (parentTransform) {\n                    mat4.multiply(transform, parentTransform, transform);\n                }\n                if (node.mesh != undefined) {\n                    const instance: RenderStateDynamicInstance = decomposeMatrix(transform);\n                    const mesh = meshes[node.mesh];\n                    const obj: RenderStateDynamicObject = { instances: [instance], mesh, baseObjectId };\n                    objects.push(obj);\n                }\n                if (node.children) {\n                    for (const child of node.children) {\n                        traverseNodeTree(child, transform);\n                    }\n                }\n            }\n            for (const rootNodeIndex of rootNodes) {\n                traverseNodeTree(rootNodeIndex);\n            }\n        }\n    }\n    return objects;\n}\n", "import { loadData } from \"./loader\";\nimport { parseGLTF } from \"./parser\";\n\nexport async function loadGLTF(url: URL, baseObjectId?: number, abortController?: AbortController) {\n    const { gltf, buffers, externalImageBlobs } = await loadData(url, abortController);\n    return parseGLTF(buffers, gltf, externalImageBlobs, baseObjectId);\n}", "import { RenderContext } from \"./context\";\nimport { wasmInstance } from \"./wasm\";\nimport lut_ggx_png from \"./lut_ggx.png\";\nimport type { DeviceProfile } from \"./device\";\n\nexport * from \"./state\";\nexport * from \"./context\";\nexport * from \"./modules\";\nexport * from \"./highlight\";\nexport * from \"./device\";\nexport * from \"./benchmark\";\nexport * from \"./geometry\";\nexport { downloadScene } from \"./scene\";\nexport { loadGLTF } from \"./gltf\";\n\nexport function initCore3D(deviceProfile: DeviceProfile, canvas: HTMLCanvasElement, setRenderContext: (context: RenderContext) => void) {\n    const options: WebGLContextAttributes = {\n        alpha: true,\n        antialias: true,\n        depth: false,\n        desynchronized: false,\n        failIfMajorPerformanceCaveat: true,\n        powerPreference: \"high-performance\",\n        premultipliedAlpha: true,\n        preserveDrawingBuffer: false,\n        stencil: false,\n    };\n\n    const wasmPromise = wasmInstance();\n    const blob = new Blob([lut_ggx_png], { type: \"image/png\" });\n    const lut_ggxPromise = createImageBitmap(blob);\n    let renderContext: RenderContext | undefined;\n    let context = { renderContext: undefined as RenderContext | undefined };\n\n    canvas.addEventListener(\"webglcontextlost\", function (event: WebGLContextEvent) {\n        event.preventDefault();\n        console.info(\"WebGL Context lost!\");\n        if (renderContext) {\n            renderContext[\"contextLost\"]();\n            context.renderContext = undefined;\n        }\n        // trigger a reset of canvas on safari.\n        canvas.width = 300;\n        canvas.height = 150;\n        if (animId !== undefined)\n            cancelAnimationFrame(animId);\n        animId = undefined;\n    } as (event: Event) => void, false);\n\n    canvas.addEventListener(\"webglcontextrestored\", function (event: WebGLContextEvent) {\n        console.info(\"WebGL Context restored!\");\n        createContext();\n    } as (event: Event) => void, false);\n\n\n    let animId: number | undefined;\n    async function createContext() {\n        const wasm = await wasmPromise;\n        const lut_ggx = await lut_ggxPromise;\n        renderContext = new RenderContext(deviceProfile, canvas, wasm, lut_ggx, options);\n        await renderContext.init();\n        setRenderContext(renderContext);\n    }\n    createContext();\n\n    // return a method to update device profile and recreate renderContext\n    return async (value: DeviceProfile) => {\n        deviceProfile = value;\n        await createContext();\n    }\n}\n\n\n", "import { vec2 } from \"gl-matrix\";\n\nexport class ControllerInput {\n    readonly domElement;\n    callbacks: ContollerInputContext | undefined;\n    readonly axes: ControllerAxes;\n    pointerTable: readonly { readonly id: number; readonly x: number; readonly y: number; }[] = [];\n    private readonly _keys = new Set<string>();\n    private _mouseButtonDown = false;\n    private _zoomY = 0;\n    private _zoomX = 0;\n    private readonly _touchMovePrev = [0, 0] as [number, number];\n    private _touchZoomDistancePrev = 0;\n    private prevTouchCenter: vec2 | undefined = undefined;\n\n    private _mouseButtons = MouseButtons.none;\n    private _fingers = 0;\n    private _mouseWheelLastActive = 0;\n    private static readonly _gestureKeys = [\"KeyW\", \"KeyS\", \"KeyA\", \"KeyD\", \"KeyQ\", \"KeyE\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\n    usePointerLock = true;\n\n    constructor(domElement?: HTMLElement) {\n        this.domElement = domElement ?? document.body;\n        this.connect();\n        this.axes = {} as ControllerAxes;\n        this.resetAxes();\n    }\n\n    dispose() {\n        this.disconnect();\n    }\n\n    get moving() {\n        return this.isAnyGestureKeyPressed() || this._mouseButtons != 0 || this._fingers != 0 || this.isScrolling();\n    }\n\n    get width() {\n        return this.domElement.clientWidth;\n    }\n\n    get height() {\n        return this.domElement.clientHeight;\n    }\n\n    get multiplier() {\n        const { _keys } = this;\n        let m = 1;\n        if (_keys.has(\"ShiftLeft\")) m *= 10;\n        if (_keys.has(\"ShiftRight\")) m *= 10;\n        if (_keys.has(\"ControlRight\")) m *= 10;\n        if (_keys.has(\"AltLeft\")) m *= 0.1;\n        if (_keys.has(\"AltRight\")) m *= 0.1;\n        return m;\n    }\n\n    get hasShift() {\n        const { _keys } = this;\n        if (_keys.has(\"ShiftLeft\")) return true;\n        if (_keys.has(\"ShiftRight\")) return true;\n        return false;\n    }\n\n    get zoomPos() {\n        const { width, height, _zoomX, _zoomY } = this;\n        if (_zoomX == 0 && _zoomY == 0) {\n            return [0, 0];\n        }\n        return [-(_zoomX - width / 2) / height * 2, (_zoomY - height / 2) / height * 2];\n    }\n\n    protected connect() {\n        const { domElement } = this;\n        if (!domElement) return;\n        const options = false;\n        domElement.tabIndex = 0;\n        domElement.addEventListener(\"keydown\", this.keydown, options);\n        domElement.addEventListener(\"keyup\", this.keyup, options);\n        domElement.addEventListener(\"blur\", this.blur, options);\n        domElement.addEventListener(\"click\", this.click, options);\n        domElement.addEventListener(\"contextmenu\", this.contextmenu, options);\n        domElement.addEventListener(\"mousedown\", this.mousedown, options);\n        domElement.addEventListener(\"mouseup\", this.mouseup, options);\n        domElement.addEventListener(\"mousemove\", this.mousemove, options);\n        domElement.addEventListener(\"wheel\", this.wheel, options);\n        domElement.addEventListener(\"touchstart\", this.touchstart, options);\n        domElement.addEventListener(\"touchmove\", this.touchmove, options);\n        domElement.addEventListener(\"touchend\", this.touchend, options);\n        domElement.addEventListener(\"touchcancel\", this.touchcancel, options);\n        domElement.focus();\n    }\n\n    protected disconnect() {\n        const { domElement } = this;\n        if (!domElement) return;\n        const options = false;\n        domElement.removeEventListener(\"keydown\", this.keydown, options);\n        domElement.removeEventListener(\"keyup\", this.keyup, options);\n        domElement.removeEventListener(\"blur\", this.blur, options);\n        domElement.removeEventListener(\"click\", this.click, options);\n        domElement.removeEventListener(\"contextmenu\", this.contextmenu, options);\n        domElement.removeEventListener(\"mousedown\", this.mousedown, options);\n        domElement.removeEventListener(\"mouseup\", this.mouseup, options);\n        domElement.removeEventListener(\"mousemove\", this.mousemove, options);\n        domElement.removeEventListener(\"wheel\", this.wheel, options);\n        domElement.removeEventListener(\"touchstart\", this.touchstart, options);\n        domElement.removeEventListener(\"touchmove\", this.touchmove, options);\n        domElement.removeEventListener(\"touchend\", this.touchend, options);\n        domElement.removeEventListener(\"touchcancel\", this.touchcancel, options);\n    }\n\n    private click = (e: Event) => {\n        e.preventDefault();\n    };\n\n    private contextmenu = (e: Event) => {\n        e.preventDefault();\n    };\n\n    private static isGestureKey(code: string) {\n        return ControllerInput._gestureKeys.indexOf(code) != -1;\n    }\n\n    public isAnyGestureKeyPressed() {\n        return [...this._keys].some(key => ControllerInput.isGestureKey(key));\n    }\n\n    public isScrolling() {\n        return (performance.now() - this._mouseWheelLastActive) < 100\n    }\n\n    private keydown = (e: KeyboardEvent) => {\n        if (ControllerInput.isGestureKey(e.code)) {\n            e.preventDefault();\n        }\n        this._keys.add(e.code);\n        this._zoomX = 0;\n        this._zoomY = 0;\n    };\n\n    private keyup = (e: KeyboardEvent) => {\n        if (ControllerInput.isGestureKey(e.code)) {\n            e.preventDefault();\n        }\n        this._keys.delete(e.code);\n    };\n\n    private blur = (e: FocusEvent) => {\n        if (\"exitPointerLock\" in document) document.exitPointerLock();\n        this._keys.clear();\n    };\n\n    private mousedown = async (e: MouseEvent) => {\n        const { domElement, axes } = this;\n        this._mouseButtonDown = true;\n        domElement.focus();\n        e.preventDefault();\n        this.callbacks?.mouseButtonChanged?.(e);\n        await this.callbacks?.moveBegin?.(e);\n        this._mouseButtons = e.buttons;\n        if (e.buttons & MouseButtons.forward) {\n            axes.mouse_navigate--;\n        } else if (e.buttons & MouseButtons.backward) {\n            axes.mouse_navigate++;\n        }\n    };\n\n    private mouseup = async (e: MouseEvent) => {\n        e.preventDefault();\n        this._mouseButtons = e.buttons;\n        if (\"exitPointerLock\" in document) document.exitPointerLock();\n        this.callbacks?.mouseButtonChanged?.(e);\n        await this.callbacks?.moveEnd?.(e);\n        this._mouseButtonDown = false;\n    };\n\n    private wheel = async (e: WheelEvent) => {\n        const { axes } = this;\n        this._zoomX = e.offsetX;\n        this._zoomY = e.offsetY;\n        await this.callbacks?.moveBegin?.(e);\n        this._mouseWheelLastActive = performance.now();\n        axes.mouse_wheel += e.deltaY;\n    };\n\n    private mousemove = (e: MouseEvent) => {\n        if (e.buttons < 1) return;\n        if (Math.abs(e.movementX) > 100 || Math.abs(e.movementY) > 100) return;\n        if (this._mouseButtonDown && this.usePointerLock) {\n            (e.currentTarget as HTMLElement).requestPointerLock();\n            this._mouseButtonDown = false;\n        }\n        const { axes } = this;\n        if (e.buttons & MouseButtons.right) {\n            axes.mouse_rmb_move_x += e.movementX;\n            axes.mouse_rmb_move_y += e.movementY;\n        } else if (e.buttons & MouseButtons.middle) {\n            axes.mouse_mmb_move_x += e.movementX;\n            axes.mouse_mmb_move_y += e.movementY;\n        } else if (e.buttons & MouseButtons.left) {\n            axes.mouse_lmb_move_x += e.movementX;\n            axes.mouse_lmb_move_y += e.movementY;\n        }\n    };\n\n    private touchstart = async (event: TouchEvent) => {\n        this.pointerTable = Array.from(event.touches).map(touch => ({ id: touch.identifier, x: Math.round(touch.clientX), y: Math.round(touch.clientY) }));\n        const { pointerTable, _touchMovePrev } = this;\n        this._fingers = event.touches.length;\n        this.callbacks?.touchChanged?.(event);\n\n        switch (pointerTable.length) {\n            case 1:\n                _touchMovePrev[0] = pointerTable[0].x;\n                _touchMovePrev[1] = pointerTable[0].y;\n                break;\n            default: // 2 or more\n                const dx = pointerTable[0].x - pointerTable[1].x;\n                const dy = pointerTable[0].y - pointerTable[1].y;\n                this._touchZoomDistancePrev = Math.sqrt(dx * dx + dy * dy);\n                _touchMovePrev[0] = (pointerTable[0].x + pointerTable[1].x) / 2;\n                _touchMovePrev[1] = (pointerTable[0].y + pointerTable[1].y) / 2;\n                break;\n        }\n        await this.callbacks?.moveBegin?.(event);\n    };\n\n    private touchend = async (event: TouchEvent) => {\n        this.pointerTable = Array.from(event.touches).map(touch => ({ id: touch.identifier, x: Math.round(touch.clientX), y: Math.round(touch.clientY) }));\n        const { pointerTable, _touchMovePrev } = this;\n        this._fingers = event.touches.length;\n        this.callbacks?.touchChanged?.(event);\n        await this.callbacks?.moveEnd?.(event);\n        switch (pointerTable.length) {\n            case 0:\n                break;\n            case 1:\n                _touchMovePrev[0] = pointerTable[0].x;\n                _touchMovePrev[1] = pointerTable[0].y;\n                break;\n            default:\n                const dx = pointerTable[0].x - pointerTable[1].x;\n                const dy = pointerTable[0].y - pointerTable[1].y;\n                this._touchZoomDistancePrev = Math.sqrt(dx * dx + dy * dy);\n                _touchMovePrev[0] = (pointerTable[0].x + pointerTable[1].x) / 2;\n                _touchMovePrev[1] = (pointerTable[0].y + pointerTable[1].y) / 2;\n                break;\n        }\n    };\n\n    private touchcancel = (event: TouchEvent) => {\n        event.preventDefault();\n        this._fingers = event.touches.length;\n        this.pointerTable = Array.from(event.touches).map(touch => ({ id: touch.identifier, x: Math.round(touch.clientX), y: Math.round(touch.clientY) }));\n    };\n\n    private touchmove = (event: TouchEvent) => {\n        if (event.cancelable) event.preventDefault();\n        this.pointerTable = Array.from(event.touches).map(touch => ({ id: touch.identifier, x: Math.round(touch.clientX), y: Math.round(touch.clientY) }));\n        const { pointerTable, _touchMovePrev } = this;\n        let { x, y } = pointerTable[0];\n\n        const { axes } = this;\n        if (pointerTable.length > 1) {\n            const dx = pointerTable[0].x - pointerTable[1].x;\n            const dy = pointerTable[0].y - pointerTable[1].y;\n            const touchZoomDistance = Math.sqrt(dx * dx + dy * dy);\n\n            x = (pointerTable[0].x + pointerTable[1].x) / 2;\n            y = (pointerTable[0].y + pointerTable[1].y) / 2;\n\n            const touchCenter = vec2.fromValues(x, y);\n            let dist = 0;\n            if (this.prevTouchCenter) {\n                dist = vec2.dist(this.prevTouchCenter, touchCenter);\n            }\n            this.prevTouchCenter = touchCenter;\n\n            const deltaWheel = this._touchZoomDistancePrev - touchZoomDistance; // / this.domElement.clientHeight;\n            this._touchZoomDistancePrev = touchZoomDistance;\n            this._zoomX = x;\n            this._zoomY = y;\n            if (dist * 2 < Math.abs(deltaWheel)) {\n                if (pointerTable.length == 2) {\n                    axes.touch_pinch2 += deltaWheel;\n                } else {\n                    axes.touch_pinch3 += deltaWheel;\n                }\n            }\n        }\n        switch (pointerTable.length) {\n            case 1:\n                axes.touch_1_move_x += x - _touchMovePrev[0];\n                axes.touch_1_move_y += y - _touchMovePrev[1];\n                break;\n            case 2:\n                axes.touch_2_move_x += x - _touchMovePrev[0];\n                axes.touch_2_move_y += y - _touchMovePrev[1];\n                break;\n            case 3:\n                axes.touch_3_move_x += x - _touchMovePrev[0];\n                axes.touch_3_move_y += y - _touchMovePrev[1];\n                break;\n        }\n        _touchMovePrev[0] = x;\n        _touchMovePrev[1] = y;\n    };\n\n    animate(elapsedTime: number) {\n        const { axes, _keys } = this;\n        const delta = elapsedTime * this.height / 2000;\n        if (_keys.size) {\n            if (_keys.has(\"KeyA\")) axes.keyboard_ad -= delta;\n            if (_keys.has(\"KeyD\")) axes.keyboard_ad += delta;\n            if (_keys.has(\"KeyW\")) axes.keyboard_ws -= delta;\n            if (_keys.has(\"KeyS\")) axes.keyboard_ws += delta;\n            if (_keys.has(\"KeyQ\")) axes.keyboard_qe += delta;\n            if (_keys.has(\"KeyE\")) axes.keyboard_qe -= delta;\n            if (_keys.has(\"ArrowLeft\")) axes.keyboard_arrow_left_right -= delta;\n            if (_keys.has(\"ArrowRight\")) axes.keyboard_arrow_left_right = delta;;\n            if (_keys.has(\"ArrowUp\")) axes.keyboard_arrow_up_down -= delta;\n            if (_keys.has(\"ArrowDown\")) axes.keyboard_arrow_up_down += delta;\n        }\n    }\n\n    resetAxes() {\n        const { axes } = this;\n        axes.keyboard_ad = 0;\n        axes.keyboard_ws = 0;\n        axes.keyboard_qe = 0;\n        axes.keyboard_arrow_left_right = 0;\n        axes.keyboard_arrow_up_down = 0;\n        axes.mouse_lmb_move_x = 0;\n        axes.mouse_lmb_move_y = 0;\n        axes.mouse_rmb_move_x = 0;\n        axes.mouse_rmb_move_y = 0;\n        axes.mouse_mmb_move_x = 0;\n        axes.mouse_mmb_move_y = 0;\n        axes.mouse_navigate = 0;\n        axes.mouse_navigate = 0;\n        axes.mouse_wheel = 0;\n        axes.touch_1_move_x = 0;\n        axes.touch_1_move_y = 0;\n        axes.touch_2_move_x = 0;\n        axes.touch_2_move_y = 0;\n        axes.touch_3_move_x = 0;\n        axes.touch_3_move_y = 0;\n        axes.touch_pinch2 = 0;\n        axes.touch_pinch3 = 0;\n    }\n}\n\nexport enum MouseButtons {\n    none = 0,\n    left = 1,\n    right = 2,\n    middle = 4,\n    backward = 8,\n    forward = 16,\n}\n\ntype ControllerAxesName =\n    | \"keyboard_ad\"\n    | \"keyboard_ws\"\n    | \"keyboard_qe\"\n    | \"keyboard_arrow_left_right\"\n    | \"keyboard_arrow_up_down\"\n    | \"mouse_lmb_move_x\"\n    | \"mouse_lmb_move_y\"\n    | \"mouse_rmb_move_x\"\n    | \"mouse_rmb_move_y\"\n    | \"mouse_mmb_move_x\"\n    | \"mouse_mmb_move_y\"\n    | \"mouse_navigate\"\n    | \"mouse_navigate\"\n    | \"mouse_wheel\"\n    | \"touch_1_move_x\"\n    | \"touch_1_move_y\"\n    | \"touch_2_move_x\"\n    | \"touch_2_move_y\"\n    | \"touch_3_move_x\"\n    | \"touch_3_move_y\"\n    | \"touch_pinch2\"\n    | \"touch_pinch3\"\n    ;\n\nexport type ControllerAxes = { [P in ControllerAxesName]: number };\n\nexport interface ContollerInputContext {\n    mouseButtonChanged(event: MouseEvent): Promise<void> | void;\n    touchChanged(event: TouchEvent): Promise<void> | void;\n    moveBegin(event: TouchEvent | MouseEvent): Promise<void> | void\n    moveEnd(event: TouchEvent | MouseEvent): Promise<void> | void\n}\n\n", "import type { RenderStateCamera, RenderStateChanges, RecursivePartial, BoundingSphere, PickSample, PickOptions } from \"core3d\";\nimport { type ReadonlyVec3, type ReadonlyQuat, vec3 } from \"gl-matrix\";\nimport { ControllerInput } from \"./input\";\nimport type { FlightControllerParams } from \"./flight\";\nimport type { OrbitControllerParams } from \"./orbit\";\nimport type { OrthoControllerParams } from \"./ortho\";\nimport type { PanoramaControllerParams } from \"./panorama\";\n\nexport type ControllerParams = FlightControllerParams | OrthoControllerParams | PanoramaControllerParams | OrbitControllerParams;\nexport interface Orientation {\n    readonly pos: ReadonlyVec3;\n    readonly pitch: number;\n    readonly yaw: number;\n}\nexport interface FlyToParams {\n    readonly totalFlightTime: number;\n    readonly begin: Orientation;\n    readonly end: Orientation;\n}\n\ninterface FlyToExt extends FlyToParams {\n    currentFlightTime: number;\n    current: Orientation;\n}\n\nexport abstract class BaseController {\n    abstract readonly kind: string;\n    abstract readonly projection: RenderStateCamera[\"kind\"];\n    abstract readonly changed: boolean;\n    private flyTo: FlyToExt | undefined;\n\n    constructor(readonly input: ControllerInput) {\n        // this.connect();\n        // this.axes = {} as ControllerAxes;\n        // this.resetAxes();\n    }\n\n    dispose() {\n        // this.disconnect();\n    }\n\n    get axes() {\n        return this.input.axes;\n    }\n\n    get moving() {\n        return this.input.moving;\n    }\n\n    get width() {\n        return this.input.width;\n    }\n\n    get height() {\n        return this.input.height;\n    }\n\n    get multiplier() {\n        return this.input.multiplier;\n    }\n\n    get zoomPos() {\n        return this.input.zoomPos;\n    }\n\n    get pointerTable() {\n        return this.input.pointerTable;\n    }\n\n    get hasShift() {\n        return this.input.hasShift;\n    }\n\n    get currentFlyTo() {\n        return this.flyTo?.current;\n    }\n\n    protected setFlyTo(flyTo: FlyToParams) {\n        // wrap begin yaw to nearest angular distance\n        let { yaw } = flyTo.begin\n        const target = flyTo.end.yaw;\n        if (yaw - target < -180) yaw += 360;\n        else if (yaw - target > 180) yaw -= 360;\n        const begin = { ...flyTo.begin, yaw };\n        this.flyTo = { ...flyTo, begin, currentFlightTime: 0, current: begin };\n    }\n\n    animate(elapsedTime: number) {\n        if (elapsedTime < 0 || elapsedTime > 250) elapsedTime = 1000 / 60;\n        this.input.animate(elapsedTime);\n        const { flyTo } = this;\n        if (flyTo) {\n            if (flyTo.currentFlightTime >= flyTo.totalFlightTime) {\n                this.flyTo = undefined;\n            } else {\n                flyTo.currentFlightTime += elapsedTime;\n                const { currentFlightTime, totalFlightTime, begin, end, current } = flyTo;\n                if (currentFlightTime < totalFlightTime) {\n                    const lerp = (a: number, b: number, t: number) => (a + (b - a) * t);\n                    const easeInOut = (t: number) => (t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2);\n                    const t = easeInOut(currentFlightTime / totalFlightTime);\n                    const pos = vec3.lerp(vec3.create(), begin.pos, end.pos, t);\n                    const pitch = lerp(begin.pitch, end.pitch, t);\n                    let yaw = lerp(begin.yaw, end.yaw, t);\n                    if (yaw < -180) yaw += 360;\n                    else if (yaw > 180) yaw -= 360;\n                    flyTo.current = { pos, yaw, pitch } as const;\n                } else {\n                    Object.assign(current, end);\n                }\n            }\n        }\n    }\n\n    abstract serialize(includeDerived?: boolean): ControllerInitParams;\n    abstract init(params: ControllerInitParams): void;\n    abstract autoFit(center: ReadonlyVec3, radius: number): void;\n    abstract update(): void;\n    abstract stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera>;\n    abstract updateParams(params: RecursivePartial<ControllerParams>): void;\n    attach() {\n        this.input.callbacks = this;\n    }\n\n    mouseButtonChanged(event: MouseEvent): Promise<void> | void { }\n    touchChanged(event: TouchEvent): Promise<void> | void { }\n    moveBegin(event: TouchEvent | MouseEvent): Promise<void> | void { }\n    moveEnd(event: TouchEvent | MouseEvent): Promise<void> | void { }\n    moveTo(targetPosition: ReadonlyVec3, flyTime: number = 1000, rotation?: ReadonlyQuat): void { }\n    zoomTo(boundingSphere: BoundingSphere, flyTime: number = 1000): void { }\n\n    renderStateChanges(state: RenderStateCamera, elapsedTime: number): RenderStateChanges | undefined {\n        this.animate(elapsedTime);\n        if (Object.values(this.input.axes).some(v => v != 0) || this.currentFlyTo || this.changed) { // check if anything has changed\n            this.update();\n            this.input.resetAxes();\n            const changes = this.stateChanges(state);\n            return Object.keys(changes).length ? { camera: changes } : undefined;\n        }\n    }\n\n    protected static getDistanceFromViewPlane(point: ReadonlyVec3, cameraPosition: ReadonlyVec3, cameraRotation: ReadonlyQuat): number {\n        const dir = vec3.fromValues(0, 0, -1);\n        vec3.transformQuat(dir, dir, cameraRotation);\n        const offset = -vec3.dot(dir, cameraPosition);\n        return vec3.dot(point, dir) + offset;\n    }\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\nexport type MutableCameraState = Partial<Mutable<RenderStateCamera>>;\n\nexport interface PickInterface {\n    pick: (x: number, y: number, options?: PickOptions) => Promise<PickSample | undefined>;\n}\n\nexport interface ControllerInitParams {\n    readonly kind: string;\n    readonly position?: ReadonlyVec3;\n    readonly rotation?: ReadonlyQuat;\n    readonly pivot?: ReadonlyVec3;\n    readonly fovDegrees?: number;\n    readonly fovMeters?: number;\n    readonly distance?: number;\n};", "import { type ReadonlyQuat, glMatrix, quat, mat3, type ReadonlyVec3, vec3 } from \"gl-matrix\";\n\nexport class PitchRollYawOrientation {\n\n    private _pitch = 30;\n    private _yaw = 0;\n    private _roll = 0;\n    private _rot: ReadonlyQuat | undefined;\n\n    get pitch() {\n        return this._pitch;\n    }\n\n    set pitch(value: number) {\n        value = clamp(value, -90, 90);\n        if (value != this._pitch) {\n            this._pitch = value;\n            this._rot = undefined;\n        }\n    }\n\n    get yaw() {\n        return this._yaw;\n    }\n\n    set yaw(value: number) {\n        while (value >= 360) value -= 360;\n        while (value < 0) value += 360;\n        if (value != this._yaw) {\n            this._yaw = value;\n            this._rot = undefined;\n        }\n    }\n\n    get roll() {\n        return this._roll;\n    }\n\n    set roll(value: number) {\n        while (value >= 360) value -= 360;\n        while (value < 0) value += 360;\n        if (value != this._roll) {\n            this._roll = value;\n            this._rot = undefined;\n        }\n    }\n\n    get rotation() {\n        if (!this._rot) {\n            this._rot = this.computeRotation();\n        }\n        return this._rot;\n    }\n\n    decomposeRotation(rot: ReadonlyQuat) {\n        const { yaw, pitch, roll } = decomposeRotation(rot);\n        this.yaw = yaw * 180 / Math.PI;\n        this.pitch = pitch * 180 / Math.PI;\n        this.roll = roll * 180 / Math.PI;\n        this._rot = rot;\n    }\n\n    private computeRotation(): ReadonlyQuat {\n        //ported from https://github.com/BabylonJS/Babylon.js/blob/fe8e43bc526f01a3649241d3819a45455a085461/packages/dev/core/src/Maths/math.vector.ts\n        const { _roll, _pitch, _yaw } = this;\n        return computeRotation(_roll, _pitch, _yaw);\n    }\n}\n\nexport function computeRotation(roll: number, pitch: number, yaw: number) {\n    const halfYaw = glMatrix.toRadian(yaw) * 0.5;\n    const halfPitch = glMatrix.toRadian(pitch) * 0.5;\n    const halfRoll = glMatrix.toRadian(roll) * 0.5;\n\n    const sinRoll = Math.sin(halfRoll);\n    const cosRoll = Math.cos(halfRoll);\n    const sinPitch = Math.sin(halfPitch);\n    const cosPitch = Math.cos(halfPitch);\n    const sinYaw = Math.sin(halfYaw);\n    const cosYaw = Math.cos(halfYaw);\n\n    const x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    const y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    const z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;\n    const w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;\n    const flipYZ = quat.fromValues(0.7071067811865475, 0, 0, 0.7071067811865476);\n    return quat.mul(quat.create(), flipYZ, quat.fromValues(x, y, z, w));\n}\n\nexport function decomposeRotation(rot: ReadonlyQuat) {\n    //ported from https://github.com/BabylonJS/Babylon.js/blob/fe8e43bc526f01a3649241d3819a45455a085461/packages/dev/core/src/Maths/math.vector.ts\n    const flipXZ = quat.fromValues(-0.7071067811865475, 0, 0, 0.7071067811865476);\n\n    const [qx, qy, qz, qw] = quat.mul(quat.create(), flipXZ, rot);\n    const zAxisY = qy * qz - qx * qw;\n    const limit = 0.4999999;\n\n    let yaw = 0;\n    let pitch = 0;\n    let roll = 0;\n    if (zAxisY < -limit) {\n        yaw = 2 * Math.atan2(qy, qw);\n        pitch = Math.PI / 2;\n        roll = 0;\n    } else if (zAxisY > limit) {\n        yaw = 2 * Math.atan2(qy, qw);\n        pitch = -Math.PI / 2;\n        roll = 0;\n    } else {\n        const sqw = qw * qw;\n        const sqz = qz * qz;\n        const sqx = qx * qx;\n        const sqy = qy * qy;\n        roll = Math.atan2(2.0 * (qx * qy + qz * qw), -sqz - sqx + sqy + sqw);\n        pitch = Math.asin(-2.0 * zAxisY);\n        yaw = Math.atan2(2.0 * (qz * qx + qy * qw), sqz - sqx - sqy + sqw);\n    }\n    return { yaw, pitch, roll } as const;\n}\n\nexport function clamp(v: number, min: number, max: number) {\n    if (v < min) {\n        v = min;\n    } else if (v > max) {\n        v = max;\n    }\n    return v;\n}\n\nexport function rotationFromDirection(dir: ReadonlyVec3) {\n    const up = glMatrix.equals(Math.abs(vec3.dot(vec3.fromValues(0, 0, 1), dir)), 1)\n        ? vec3.fromValues(0, 1, 0)\n        : vec3.fromValues(0, 0, 1);\n\n    const right = vec3.cross(vec3.create(), up, dir);\n\n    vec3.cross(up, dir, right);\n    vec3.normalize(up, up);\n\n    vec3.cross(right, up, dir);\n    vec3.normalize(right, right);\n\n    return quat.fromMat3(\n        quat.create(),\n        mat3.fromValues(right[0], right[1], right[2], up[0], up[1], up[2], dir[0], dir[1], dir[2])\n    );\n}", "\nimport { mergeRecursive, type RecursivePartial, type RenderStateCamera } from \"core3d\";\nimport { type ReadonlyVec3, glMatrix, vec2, vec3 } from \"gl-matrix\";\nimport { BaseController, type ControllerInitParams, type MutableCameraState } from \"./base\";\nimport { PitchRollYawOrientation } from \"./orientation\";\nimport { ControllerInput } from \"./input\";\n\n/** Orbit type camera motion controller */\nexport interface OrbitControllerParams {\n    /** The world space coordinate to orbit around. (0,0,0) is default. */\n    readonly pivot?: ReadonlyVec3;\n\n    /** The current pitch of camera in degrees (+/-90) */\n    readonly pitch?: number;\n\n    /** The current yaw of camera in degrees (+/-180) */\n    readonly yaw?: number;\n\n    /** The camera distance relative to pivot point in meters. */\n    readonly distance?: number;\n\n    /** The camera distance relative to pivot point in meters. */\n    readonly maxDistance?: number;\n\n    /** Linear velocity modifier (default is 1.0) */\n    readonly linearVelocity?: number;\n\n    /** Rotational velocity modifier (default is 1.0) */\n    readonly rotationalVelocity?: number;\n\n    /** The vertical camera field of view in degrees (default is 45). */\n    readonly fieldOfView?: number;\n}\n\nexport class OrbitController extends BaseController {\n    static readonly defaultParams = {\n        pivot: [0, 0, 0],\n        distance: 15,\n        pitch: -30,\n        yaw: 30,\n        maxDistance: 1000,\n        linearVelocity: 1,\n        rotationalVelocity: 1,\n        fieldOfView: 45,\n    } as const;\n\n    override kind = \"orbit\" as const;\n    override projection = \"pinhole\" as const;\n    override changed = false;\n    private params;\n    private readonly orientation = new PitchRollYawOrientation();\n    private pivot: ReadonlyVec3 = vec3.create();\n    private distance: number;\n    private fov: number;\n\n    constructor(input: ControllerInput, params?: OrbitControllerParams) {\n        super(input);\n        const { pitch, yaw, distance, pivot, fieldOfView } = this.params = { ...OrbitController.defaultParams, ...params } as const;\n        const { orientation } = this;\n        orientation.pitch = pitch;\n        orientation.yaw = yaw;\n        this.distance = distance;\n        this.fov = fieldOfView;\n        this.pivot = pivot;\n    }\n\n    private get position() {\n        const { orientation, pivot, distance } = this;\n        const pos = vec3.fromValues(0, 0, distance);\n        vec3.transformQuat(pos, pos, orientation.rotation);\n        vec3.add(pos, pos, pivot);\n        return pos;\n    }\n\n    override serialize(includeDerived = false): ControllerInitParams {\n        const { kind, pivot, orientation, distance, fov } = this;\n        const { rotation } = orientation;\n        this.changed = false;\n        return { kind, pivot, rotation, distance, fovDegrees: fov, ...(includeDerived ? { position: this.position } : undefined) };\n    }\n\n    override updateParams(params: RecursivePartial<OrbitControllerParams>) {\n        this.params = mergeRecursive(this.params, params);\n    }\n\n    override init(params: ControllerInitParams) {\n        const { kind, position, rotation, pivot, fovDegrees, distance } = params;\n        console.assert(kind == this.kind);\n        if (fovDegrees != undefined) {\n            this.fov = fovDegrees;\n        }\n        if (pivot) {\n            this.pivot = pivot;\n        }\n        if (rotation) {\n            this.orientation.decomposeRotation(rotation);\n            this.orientation.roll = 0;\n        }\n        if (distance) {\n            this.distance = distance;\n            if (!pivot && position && rotation) {\n                const tmp = vec3.fromValues(0, 0, -distance);\n                vec3.transformQuat(tmp, tmp, rotation);\n                this.pivot = vec3.add(tmp, tmp, position);\n            }\n        }\n        if (position && pivot) {\n            const { orientation } = this;\n            if (!distance) {\n                this.distance = vec3.distance(position, pivot);\n            }\n            if (!rotation) {\n                const [x, y, z] = vec3.sub(vec3.create(), position, pivot);\n                const pitch = Math.atan2(-y, vec2.len(vec2.fromValues(x, z)));\n                const yaw = Math.atan2(x, z);\n                orientation.yaw = yaw * 180 / Math.PI;\n                orientation.pitch = pitch * 180 / Math.PI;\n                orientation.roll = 0;\n            }\n        }\n        this.attach();\n        this.changed = true;\n    }\n\n    override autoFit(center: ReadonlyVec3, radius: number): void {\n        const { params } = this;\n        this.pivot = center;\n        this.distance = Math.min(params.maxDistance, radius / Math.tan(glMatrix.toRadian(this.fov) / 2));\n        this.changed = true;\n    }\n\n    override update() {\n        const { axes, multiplier, pivot, orientation, distance, fov, params, height } = this;\n        const tx = axes.keyboard_ad + axes.mouse_rmb_move_x - axes.touch_2_move_x;\n        const ty = -axes.keyboard_qe + axes.mouse_rmb_move_y - axes.touch_2_move_y;\n        const tz = axes.keyboard_ws * 2 + axes.mouse_mmb_move_y + axes.mouse_wheel / 2 + axes.touch_pinch2 * 2;\n        const rx = axes.keyboard_arrow_up_down / 5 + axes.mouse_lmb_move_y + axes.touch_1_move_y;\n        const ry = axes.keyboard_arrow_left_right / 5 + axes.mouse_lmb_move_x + axes.touch_1_move_x;\n\n        orientation.roll = 0;\n        const rotationalVelocity = 180 * params.rotationalVelocity / height;\n        if (rx || ry) {\n            orientation.pitch += -rx * rotationalVelocity;\n            orientation.yaw += -ry * rotationalVelocity;\n            this.changed = true;\n        }\n\n        const fovRatio = Math.tan(((Math.PI / 180) * fov) / 2) * 2;\n        const linearVelocity = distance * fovRatio * multiplier * params.linearVelocity / height;\n        if (tz) {\n            this.distance += tz * linearVelocity;\n            this.changed = true;\n        } else if (tx || ty) {\n            const worldPosDelta = vec3.transformQuat(vec3.create(), vec3.fromValues(tx * linearVelocity, -ty * linearVelocity, 0), orientation.rotation);\n            this.pivot = vec3.add(vec3.create(), pivot, worldPosDelta);\n            this.changed = true;\n        }\n    }\n\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\n        const { pivot, orientation, position, fov } = this;\n        const changes: MutableCameraState = {};\n        if (!state || !vec3.exactEquals(state.position, position)) {\n            changes.position = position;\n        }\n        if (!state || state.rotation !== orientation.rotation) {\n            changes.rotation = orientation.rotation;\n        }\n        if (!state || state.pivot !== pivot) {\n            changes.pivot = pivot;\n        }\n        if (!state || state.fov !== fov) {\n            changes.fov = fov;\n        }\n        if (!state) {\n            changes.kind = \"pinhole\";\n        }\n        return changes;\n    }\n}", "\nimport { type ReadonlyVec3, vec3, type ReadonlyQuat, glMatrix, quat } from \"gl-matrix\";\nimport { BaseController, type ControllerInitParams, type MutableCameraState } from \"./base\";\nimport { mergeRecursive, type BoundingSphere, type RecursivePartial, type RenderStateCamera } from \"core3d\";\nimport { PitchRollYawOrientation, decomposeRotation } from \"./orientation\";\nimport { ControllerInput } from \"./input\";\n\n/** Ortho type camera motion controller */\nexport interface OrthoControllerParams {\n    readonly position?: ReadonlyVec3;\n    readonly rotation?: ReadonlyQuat;\n    readonly fieldOfView?: number;\n    readonly stepInterval?: number;\n    readonly usePointerLock?: boolean\n}\n\nexport class OrthoController extends BaseController {\n    static readonly defaultParams = {\n        position: [0, 0, 0],\n        rotation: [0, 0, 0, 1],\n        fieldOfView: 45,\n        stepInterval: 1,\n        usePointerLock: false,\n    } as const;\n\n    override kind = \"ortho\" as const;\n    override projection = \"orthographic\" as const;\n    override changed = false;\n    private params;\n    private position: ReadonlyVec3;\n    private orientation = new PitchRollYawOrientation();\n    private fov: number;\n    private mouseOrTouchMoving = false;\n\n    constructor(input: ControllerInput, params?: OrthoControllerParams) {\n        super(input);\n        const { position, rotation, fieldOfView } = this.params = { ...OrthoController.defaultParams, ...params } as const;\n        this.position = position;\n        this.orientation.decomposeRotation(rotation);\n        this.fov = fieldOfView;\n    }\n\n    override serialize(): ControllerInitParams {\n        const { kind, position, orientation, fov } = this;\n        const { rotation } = orientation;\n        this.changed = false;\n        return { kind, position, rotation, fovMeters: fov };\n    }\n\n    override updateParams(params: RecursivePartial<OrthoControllerParams>) {\n        this.params = mergeRecursive(this.params, params);\n        if (this.input.callbacks == this) {\n            this.input.usePointerLock = this.params.usePointerLock;\n        }\n    }\n\n    override init(params: ControllerInitParams) {\n        const { kind, position, rotation, fovMeters, distance, fovDegrees } = params;\n        console.assert(kind == this.kind);\n        if (position) {\n            this.position = position;\n        }\n        if (rotation) {\n            this.orientation.decomposeRotation(rotation);\n        }\n        if (fovMeters) {\n            this.fov = fovMeters;\n        } else if (fovDegrees && distance) {\n            this.fov = OrthoController.fovFromPerspective(fovDegrees, distance);\n        }\n        this.changed = true;\n        this.input.usePointerLock = this.params.usePointerLock;\n        this.input.callbacks = this;\n    }\n\n    override autoFit(center: ReadonlyVec3, radius: number): void {\n        const { orientation } = this;\n        const dir = vec3.fromValues(0, 0, radius);\n        vec3.transformQuat(dir, dir, orientation.rotation);\n        this.position = vec3.add(vec3.create(), center, dir);\n        this.orientation.pitch = -90;\n        this.orientation.yaw = 0;\n        this.orientation.roll = 0;\n        this.fov = radius * 2;\n        this.changed = true;\n    }\n\n    get moving() {\n        return this.input.isAnyGestureKeyPressed() || this.input.isScrolling() || this.mouseOrTouchMoving;\n    }\n\n    async moveEnd(event: TouchEvent | MouseEvent): Promise<void> {\n        this.mouseOrTouchMoving = false;\n    }\n\n    override moveTo(targetPosition: ReadonlyVec3, flyTime: number = 1000, rotation?: quat): void {\n        const { orientation, position } = this;\n        if (flyTime) {\n            let targetPitch = orientation.pitch;\n            let targetYaw = orientation.yaw;\n            if (rotation) {\n                const { pitch, yaw } = decomposeRotation(rotation)\n                targetPitch = pitch / Math.PI * 180;\n                targetYaw = yaw / Math.PI * 180;\n            }\n\n            this.setFlyTo({\n                totalFlightTime: flyTime,\n                end: { pos: vec3.clone(targetPosition), pitch: targetPitch, yaw: targetYaw },\n                begin: { pos: vec3.clone(position), pitch: orientation.pitch, yaw: orientation.yaw }\n            });\n        }\n        else {\n            this.position = targetPosition;\n            if (rotation) {\n                this.orientation.decomposeRotation(rotation);\n            }\n            this.changed = true;\n        }\n    }\n\n    override zoomTo(boundingSphere: BoundingSphere, flyTime: number = 1000): void {\n        const { orientation, position, fov } = this;\n        if (flyTime) {\n            const dist = Math.max(boundingSphere.radius / Math.tan(glMatrix.toRadian(fov) / 2), boundingSphere.radius);\n            const targetPosition = vec3.create();\n            vec3.add(targetPosition, vec3.transformQuat(targetPosition, vec3.fromValues(0, 0, dist), orientation.rotation), boundingSphere.center);\n            this.setFlyTo({\n                totalFlightTime: flyTime,\n                end: { pos: vec3.clone(targetPosition), pitch: orientation.pitch, yaw: orientation.yaw + 0.05 },\n                begin: { pos: vec3.clone(position), pitch: orientation.pitch, yaw: orientation.yaw }\n            });\n        } else {\n            const dist = boundingSphere.radius / Math.tan(glMatrix.toRadian(fov) / 2);\n            this.position = vec3.add(vec3.create(), vec3.transformQuat(vec3.create(), vec3.fromValues(0, 0, dist), orientation.rotation), boundingSphere.center);\n            this.changed = true;\n        }\n    }\n\n    override update() {\n        const { axes, zoomPos, height, position, orientation, hasShift, currentFlyTo } = this;\n\n        if (currentFlyTo) {\n            this.position = vec3.clone(currentFlyTo.pos);\n            orientation.pitch = currentFlyTo.pitch;\n            orientation.yaw = currentFlyTo.yaw;\n            this.changed = true;\n            return;\n        }\n\n\n        let tx = -axes.keyboard_ad + axes.mouse_lmb_move_x + axes.mouse_rmb_move_x + axes.mouse_mmb_move_x + axes.touch_1_move_x;\n        let ty = -axes.keyboard_ws + axes.mouse_lmb_move_y + axes.mouse_rmb_move_y + axes.mouse_mmb_move_y + axes.touch_1_move_y;\n        const tz = (axes.mouse_navigate * this.params.stepInterval) + (axes.touch_pinch3 * 0.1) + (hasShift ? axes.mouse_wheel * 0.01 : 0);\n        const rz = axes.keyboard_qe;\n        const zoom = (hasShift ? 0 : axes.mouse_wheel) + axes.touch_pinch2;\n        const [zoomX, zoomY] = zoomPos;\n\n        if (!this.mouseOrTouchMoving) {\n            this.mouseOrTouchMoving = tx > 0.1 || ty > 0.1 || rz > 0.1;\n        }\n\n        if (rz) {\n            orientation.roll += rz * 0.2;\n            this.changed = true;\n        }\n        if (tx || ty || tz || zoom) {\n            if (zoom != 0) {\n                const dz = 1 + (zoom / height);\n                tx += zoomX * -zoom * 0.6;\n                ty += zoomY * zoom * 0.6;\n                this.fov *= dz;\n            }\n            const scale = this.fov / height;\n            const deltaPos = vec3.transformQuat(vec3.create(), vec3.fromValues(tx * scale * -1, ty * scale, tz), orientation.rotation);\n            this.position = vec3.add(vec3.create(), position, deltaPos);\n            this.changed = true;\n        }\n    }\n\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\n        const changes: MutableCameraState = {};\n        if (!state || state.position !== this.position) {\n            changes.position = this.position;\n        }\n        if (!state || state.rotation !== this.orientation.rotation) {\n            changes.rotation = this.orientation.rotation;\n        }\n        if (!state || state.fov !== this.fov) {\n            changes.fov = this.fov;\n        }\n        if (!state) {\n            changes.kind = \"orthographic\";\n        }\n        return changes;\n    }\n\n    //perspectiveDepth = BaseController.getDistanceFromViewPlane(pivot);\n    static fovFromPerspective(perspectiveFov: number, perspectiveDepth: number) {\n        return Math.max(0.1, perspectiveDepth) * Math.tan(((Math.PI / 180) * perspectiveFov) / 2) * 2;\n    }\n}", "\nimport { type ReadonlyVec3, vec3, glMatrix, quat, mat3 } from \"gl-matrix\";\nimport { BaseController, type ControllerInitParams, type MutableCameraState, type PickInterface } from \"./base\";\nimport { type RenderStateCamera, type RecursivePartial, mergeRecursive, type BoundingSphere } from \"core3d\";\nimport { PitchRollYawOrientation, clamp, decomposeRotation } from \"./orientation\";\nimport { ControllerInput, MouseButtons } from \"./input\";\n\nexport interface CameraTransformations {\n    tx: number,\n    ty: number,\n    tz: number,\n    rx: number,\n    ry: number,\n    shouldPivot: boolean\n}\n\n/** Ortho type camera motion controller */\nexport interface FlightControllerParams {\n    position?: ReadonlyVec3;\n    pitch?: number;\n    yaw?: number;\n    linearVelocity?: number;\n    rotationalVelocity?: number;\n    autoZoomSpeed?: boolean;\n    flightTime?: number;\n    fieldOfView?: number;\n    pickDelay: number;\n    proportionalCameraSpeed?: { min: number, max: number; };\n}\n\ninterface Pivot {\n    center: ReadonlyVec3;\n    offset: ReadonlyVec3;\n    distance: number;\n    active: boolean;\n}\n\nexport class FlightController extends BaseController {\n    static readonly defaultParams = {\n        position: [0, 0, 0],\n        pitch: -30,\n        yaw: 30,\n        linearVelocity: 1,\n        rotationalVelocity: 1,\n        autoZoomSpeed: false,\n        flightTime: 1,\n        fieldOfView: 60,\n        pickDelay: 200,\n        proportionalCameraSpeed: { min: 0.2, max: 1000 }\n    };\n\n    override kind: string = \"flight\" as const;\n    override projection = \"pinhole\" as const;\n    override changed = false;\n    protected pivotButton: MouseButtons = MouseButtons.right;\n    protected pivotFingers: number = 3;\n    private params;\n    private position: ReadonlyVec3 = vec3.create();\n    private readonly orientation = new PitchRollYawOrientation();\n    private pivot: Pivot | undefined;\n    private fov: number;\n\n    private readonly resetPickDelay = 3000;\n    private lastUpdatedMoveBegin: number = 0;\n    private lastUpdate: number = 0;\n    private recordedMoveBegin: ReadonlyVec3 | undefined = undefined;\n    private inMoveBegin = false;\n    private mouseOrTouchMoving = false;\n\n    constructor(readonly pickInterface: PickInterface, input: ControllerInput, params?: FlightControllerParams) {\n        super(input);\n        this.params = { ...FlightController.defaultParams, ...params } as const;\n        const { orientation } = this;\n        const { pitch, yaw, fieldOfView } = this.params;\n        orientation.pitch = pitch;\n        orientation.yaw = yaw;\n        this.fov = fieldOfView;\n    }\n\n    override serialize(): ControllerInitParams {\n        const { kind, position, orientation, fov } = this;\n        const { rotation } = orientation;\n        this.changed = false;\n        return { kind, position, rotation, fovDegrees: fov };\n    }\n\n    override init(params: ControllerInitParams) {\n        const { kind, position, rotation, fovDegrees } = params;\n        console.assert(kind == this.kind);\n        if (position) {\n            this.position = position;\n        }\n        if (rotation) {\n            this.orientation.decomposeRotation(rotation);\n            this.orientation.roll = 0;\n        }\n        if (fovDegrees != undefined) {\n            this.fov = fovDegrees;\n        }\n        this.changed = false;\n        this.input.callbacks = this;\n        this.input.usePointerLock = true;\n    }\n\n    override autoFit(center: ReadonlyVec3, radius: number): void {\n        const { orientation } = this;\n        const maxDistance = 1000;\n        const distance = Math.min(maxDistance, radius / Math.tan(glMatrix.toRadian(this.fov) / 2));\n        const dir = vec3.fromValues(0, 0, distance);\n        vec3.transformQuat(dir, dir, orientation.rotation);\n        this.position = vec3.add(vec3.create(), center, dir)\n    }\n\n    override updateParams(params: RecursivePartial<FlightControllerParams>) {\n        this.params = mergeRecursive(this.params, params);\n    }\n\n    override moveTo(targetPosition: ReadonlyVec3, flyTime: number = 1000, rotation?: quat): void {\n        const { orientation, position } = this;\n        if (flyTime) {\n            let targetPitch = orientation.pitch;\n            let targetYaw = orientation.yaw;\n            if (rotation) {\n                const { pitch, yaw } = decomposeRotation(rotation)\n                targetPitch = pitch / Math.PI * 180;\n                targetYaw = yaw / Math.PI * 180;\n            }\n\n            this.setFlyTo({\n                totalFlightTime: flyTime,\n                end: { pos: vec3.clone(targetPosition), pitch: targetPitch, yaw: targetYaw },\n                begin: { pos: vec3.clone(position), pitch: orientation.pitch, yaw: orientation.yaw }\n            });\n        }\n        else {\n            this.position = targetPosition;\n            if (rotation) {\n                this.orientation.decomposeRotation(rotation);\n            }\n            this.changed = true;\n        }\n    }\n\n    override zoomTo(boundingSphere: BoundingSphere, flyTime: number = 1000): void {\n        const { orientation, position, fov } = this;\n        if (flyTime) {\n            const dist = Math.max(boundingSphere.radius / Math.tan(glMatrix.toRadian(fov) / 2), boundingSphere.radius);\n            const targetPosition = vec3.create();\n            vec3.add(targetPosition, vec3.transformQuat(targetPosition, vec3.fromValues(0, 0, dist), orientation.rotation), boundingSphere.center);\n            this.setFlyTo({\n                totalFlightTime: flyTime,\n                end: { pos: vec3.clone(targetPosition), pitch: orientation.pitch, yaw: orientation.yaw + 0.05 },\n                begin: { pos: vec3.clone(position), pitch: orientation.pitch, yaw: orientation.yaw }\n            });\n        } else {\n            const dist = boundingSphere.radius / Math.tan(glMatrix.toRadian(fov) / 2);\n            this.position = vec3.add(vec3.create(), vec3.transformQuat(vec3.create(), vec3.fromValues(0, 0, dist), orientation.rotation), boundingSphere.center);\n            this.changed = true;\n        }\n    }\n\n    protected modifiers() {\n        const { params, recordedMoveBegin, position, fov } = this;\n        const { proportionalCameraSpeed } = params;\n        let scale = 20;\n        if (proportionalCameraSpeed && recordedMoveBegin) {\n            scale = vec3.dist(position, recordedMoveBegin) * Math.tan(((Math.PI / 180) * fov) / 2) * 2;\n            const mouseWheelModifier = this.input.hasShift ? 0 : clamp(scale / 3, proportionalCameraSpeed.min, proportionalCameraSpeed.max);\n            const mousePanModifier = clamp(scale, proportionalCameraSpeed.min, proportionalCameraSpeed.max);\n            const touchMovementModifier = clamp(scale, proportionalCameraSpeed.min, proportionalCameraSpeed.max);\n            const pinchModifier = clamp(scale, proportionalCameraSpeed.min, proportionalCameraSpeed.max);\n            return {\n                mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale: 20\n            }\n        }\n        return {\n            mouseWheelModifier: this.input.hasShift ? 0 : scale, mousePanModifier: scale, touchMovementModifier: scale, pinchModifier: scale, scale\n        }\n    }\n\n    protected getTransformations(): CameraTransformations {\n        const { axes } = this;\n        const rotX = -axes.keyboard_arrow_up_down / 5 - axes.mouse_lmb_move_y + axes.touch_1_move_y;\n        const rotY = -axes.keyboard_arrow_left_right / 5 - axes.mouse_lmb_move_x + axes.touch_1_move_x;\n        const pivotX = -axes.mouse_rmb_move_y + -axes.touch_3_move_y;\n        const pivotY = -axes.mouse_rmb_move_x + -axes.touch_3_move_x;\n        const shouldPivot = Math.abs(rotX) + Math.abs(rotY) < Math.abs(pivotX) + Math.abs(pivotY);\n\n        const { mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale } = this.modifiers();\n        const tx = (axes.keyboard_ad * scale) - (axes.mouse_mmb_move_x * mousePanModifier) - (axes.touch_2_move_x * touchMovementModifier);\n        const ty = (axes.keyboard_qe * scale) - (axes.mouse_mmb_move_y * mousePanModifier) - (axes.touch_2_move_y * touchMovementModifier);\n        const tz = (axes.keyboard_ws * scale) + (axes.mouse_wheel * mouseWheelModifier) + (axes.touch_pinch2 * pinchModifier);\n        const rx = shouldPivot ? pivotX : rotX;\n        const ry = shouldPivot ? pivotY : rotY;\n        return { tx, ty, tz, rx, ry, shouldPivot };\n    }\n\n    override update(): void {\n        const { multiplier, orientation, params, height, pivot, zoomPos, currentFlyTo } = this;\n        if (currentFlyTo) {\n            this.position = vec3.clone(currentFlyTo.pos);\n            orientation.pitch = currentFlyTo.pitch;\n            orientation.yaw = currentFlyTo.yaw;\n            this.changed = true;\n            return;\n        }\n        this.lastUpdate = performance.now();\n        let { tx, ty, tz, rx, ry, shouldPivot } = this.getTransformations();\n        if (!this.mouseOrTouchMoving) {\n            this.mouseOrTouchMoving = tx > 0.1 || ty > 0.1 || rx > 0.1 || ry > 0.1;\n        }\n        orientation.roll = 0;\n        const [zoomX, zoomY] = zoomPos;\n\n        if (rx || ry) {\n            const rotationalVelocity = (shouldPivot ? 180 : this.fov) * params.rotationalVelocity / height;\n            orientation.pitch += rx * rotationalVelocity;\n            orientation.yaw += ry * rotationalVelocity;\n            if (pivot && shouldPivot && pivot.active) {\n                const { center, offset, distance } = pivot;\n                const pos = vec3.fromValues(0, 0, distance);\n                vec3.add(pos, pos, offset);\n                vec3.transformQuat(pos, pos, orientation.rotation);\n                this.position = vec3.add(vec3.create(), center, pos);\n            }\n            this.changed = true;\n        }\n\n        if (tx || ty || tz) {\n            if (tz != 0) {\n                tx += zoomX * tz * 0.6;\n                ty += -zoomY * tz * 0.6;\n            }\n            const linearVelocity = multiplier * params.linearVelocity / height;\n            const worldPosDelta = vec3.transformQuat(vec3.create(), vec3.fromValues(tx * linearVelocity, -ty * linearVelocity, tz * linearVelocity), orientation.rotation);\n            this.position = vec3.add(vec3.create(), this.position, worldPosDelta);\n            if (pivot && pivot.active) {\n                this.setPivot(pivot.center, pivot.active);\n            }\n            this.changed = true;\n        }\n    }\n\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\n        const changes: MutableCameraState = {};\n        const { position, orientation, pivot, fov } = this;\n        if (!state || !vec3.exactEquals(state.position, position)) {\n            changes.position = position;\n        }\n        if (!state || !quat.exactEquals(state.rotation, orientation.rotation)) {\n            changes.rotation = orientation.rotation;\n        }\n        if (!state || (pivot && state.pivot && vec3.exactEquals(state.pivot, pivot?.center))) {\n            changes.pivot = pivot?.center;\n        }\n        if (!state || state.fov !== fov) {\n            changes.fov = fov;\n        }\n        if (!state) {\n            changes.kind = \"pinhole\";\n        }\n        return changes;\n    }\n\n    override async mouseButtonChanged(event: MouseEvent): Promise<void> {\n        const { pickInterface, pivotButton } = this;\n        if (pickInterface) {\n            const changes = event.buttons;\n            if (changes & pivotButton) {\n                const sample = await pickInterface.pick(event.offsetX, event.offsetY);\n                if (sample) {\n                    this.setPivot(sample.position, true);\n                } else {\n                    this.resetPivot(true);\n                }\n            } else {\n                this.resetPivot(false);\n            }\n        }\n    }\n\n    override async touchChanged(event: TouchEvent): Promise<void> {\n        const { pointerTable, pickInterface, pivotFingers } = this;\n        if (pointerTable.length == pivotFingers && pickInterface) {\n            const x = pointerTable.length > 1 ? Math.round((pointerTable[0].x + pointerTable[1].x) / 2) : pointerTable[0].x;\n            const y = pointerTable.length > 1 ? Math.round((pointerTable[0].y + pointerTable[1].y) / 2) : pointerTable[0].y;\n            const sample = await pickInterface.pick(x, y);\n            if (sample) {\n                this.setPivot(sample.position, true);\n            } else {\n                this.resetPivot(true);\n            }\n        } else {\n            this.resetPivot(false);\n        }\n    }\n\n    get moving() {\n        return this.input.isAnyGestureKeyPressed() || this.input.isScrolling() || this.mouseOrTouchMoving;\n    }\n\n    async moveEnd(event: TouchEvent | MouseEvent): Promise<void> {\n        this.mouseOrTouchMoving = false;\n    }\n\n    async moveBegin(event: TouchEvent | MouseEvent): Promise<void> {\n        const { pointerTable, pickInterface, resetPickDelay } = this;\n\n        const deltaTime = this.lastUpdate - this.lastUpdatedMoveBegin;\n\n        if (pickInterface == undefined || deltaTime < this.params.pickDelay || this.inMoveBegin) {\n            return;\n        }\n        this.inMoveBegin = true;\n        const setPickPosition = async (x: number, y: number) => {\n            const sample = await pickInterface.pick(x, y, { async: false });\n            if (sample) {\n                this.recordedMoveBegin = sample.position;\n                this.lastUpdatedMoveBegin = performance.now();\n            } else if (resetPickDelay < deltaTime) {\n                this.recordedMoveBegin = undefined;\n                this.lastUpdatedMoveBegin = performance.now();\n            }\n        }\n\n        if (isTouchEvent(event)) {\n            if (pointerTable.length > 1) {\n                await setPickPosition(Math.round((pointerTable[0].x + pointerTable[1].x) / 2), Math.round((pointerTable[0].y + pointerTable[1].y) / 2))\n            }\n        } else {\n            await setPickPosition(event.offsetX, event.offsetY)\n        }\n        this.inMoveBegin = false;\n\n    }\n\n    private resetPivot(active: boolean) {\n        const { pivot } = this;\n        if (pivot) {\n            this.setPivot(pivot.center, active);\n        }\n    }\n\n    private setPivot(center: ReadonlyVec3, active: boolean) {\n        const { position, orientation } = this;\n        const distance = vec3.distance(center, position);\n        const offset = vec3.fromValues(0, 0, distance);\n        vec3.transformQuat(offset, offset, orientation.rotation);\n        vec3.add(offset, center, offset);\n        vec3.sub(offset, position, offset);\n        const invRot = quat.invert(quat.create(), orientation.rotation);\n        vec3.transformQuat(offset, offset, invRot)\n        this.pivot = { center, offset, distance, active };\n    }\n}\n\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return \"TouchEvent\" in globalThis && event instanceof TouchEvent;\n}\n\nexport class CadMiddlePanController extends FlightController {\n    override kind = \"cadMiddlePan\" as const;\n\n    constructor(readonly pickInterface: PickInterface, input: ControllerInput, params?: FlightControllerParams) {\n        super(pickInterface, input);\n        this.pivotButton = MouseButtons.left;\n        this.pivotFingers = 1;\n    }\n\n    override getTransformations(): CameraTransformations {\n        const { axes } = this;\n        const rotX = -axes.keyboard_arrow_up_down / 5 - axes.mouse_rmb_move_y + axes.touch_3_move_y;\n        const rotY = -axes.keyboard_arrow_left_right / 5 - axes.mouse_rmb_move_x + axes.touch_3_move_x;\n        const pivotX = -axes.mouse_lmb_move_y + -axes.touch_1_move_y;\n        const pivotY = -axes.mouse_lmb_move_x + -axes.touch_1_move_x;\n        const shouldPivot = Math.abs(rotX) + Math.abs(rotY) < Math.abs(pivotX) + Math.abs(pivotY);\n\n        const { mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale } = this.modifiers();\n        const tx = (axes.keyboard_ad * scale) - (axes.mouse_mmb_move_x * mousePanModifier) - (axes.touch_2_move_x * touchMovementModifier);\n        const ty = (axes.keyboard_qe * scale) - (axes.mouse_mmb_move_y * mousePanModifier) - (axes.touch_2_move_y * touchMovementModifier);\n        const tz = (axes.keyboard_ws * scale) + (axes.mouse_wheel * mouseWheelModifier) + (axes.touch_pinch2 * pinchModifier);\n        const rx = shouldPivot ? pivotX : rotX;\n        const ry = shouldPivot ? pivotY : rotY;\n\n        return { tx, ty, tz, rx, ry, shouldPivot };\n    }\n}\n\nexport class CadRightPanController extends FlightController {\n    override kind = \"cadRightPan\" as const;\n\n    constructor(readonly pickInterface: PickInterface, input: ControllerInput, params?: FlightControllerParams) {\n        super(pickInterface, input);\n        this.pivotButton = MouseButtons.left;\n        this.pivotFingers = 1;\n    }\n\n    override getTransformations(): CameraTransformations {\n        const { axes } = this;\n        const rotX = -axes.keyboard_arrow_up_down / 5 - axes.mouse_mmb_move_y + axes.touch_3_move_y;\n        const rotY = -axes.keyboard_arrow_left_right / 5 - axes.mouse_mmb_move_x + axes.touch_3_move_x;\n        const pivotX = -axes.mouse_lmb_move_y + -axes.touch_1_move_y;\n        const pivotY = -axes.mouse_lmb_move_x + -axes.touch_1_move_x;\n        const shouldPivot = Math.abs(rotX) + Math.abs(rotY) < Math.abs(pivotX) + Math.abs(pivotY);\n\n        const { mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale } = this.modifiers();\n        const tx = (axes.keyboard_ad * scale) - (axes.mouse_rmb_move_x * mousePanModifier) - (axes.touch_2_move_x * touchMovementModifier);\n        const ty = (axes.keyboard_qe * scale) - (axes.mouse_rmb_move_y * mousePanModifier) - (axes.touch_2_move_y * touchMovementModifier);\n        const tz = (axes.keyboard_ws * scale) + (axes.mouse_wheel * mouseWheelModifier) + (axes.touch_pinch2 * pinchModifier);\n        const rx = shouldPivot ? pivotX : rotX;\n        const ry = shouldPivot ? pivotY : rotY;\n\n        return { tx, ty, tz, rx, ry, shouldPivot };\n    }\n}\n\nexport class SpecialFlightController extends FlightController {\n    override kind = \"special\" as const;\n\n    constructor(readonly pickInterface: PickInterface, input: ControllerInput, params?: FlightControllerParams) {\n        super(pickInterface, input);\n        this.pivotButton = MouseButtons.middle;\n        this.pivotFingers = 1;\n    }\n\n    override getTransformations(): CameraTransformations {\n        const { axes } = this;\n        const rotX = -axes.keyboard_arrow_up_down / 5 - axes.mouse_rmb_move_y + axes.touch_3_move_y;\n        const rotY = -axes.keyboard_arrow_left_right / 5 - axes.mouse_rmb_move_x + axes.touch_3_move_x;\n        const pivotX = -axes.mouse_mmb_move_y + -axes.touch_1_move_y;\n        const pivotY = -axes.mouse_mmb_move_x + -axes.touch_1_move_x;\n        const shouldPivot = Math.abs(rotX) + Math.abs(rotY) < Math.abs(pivotX) + Math.abs(pivotY);\n\n        const { mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale } = this.modifiers();\n        const tx = (axes.keyboard_ad * scale) - (axes.mouse_lmb_move_x * mousePanModifier) - (axes.touch_2_move_x * touchMovementModifier);\n        const ty = (axes.keyboard_qe * scale) - (axes.mouse_lmb_move_y * mousePanModifier) - (axes.touch_2_move_y * touchMovementModifier);\n        const tz = (axes.keyboard_ws * scale) + (axes.mouse_wheel * mouseWheelModifier) + (axes.touch_pinch2 * pinchModifier);\n        const rx = shouldPivot ? pivotX : rotX;\n        const ry = shouldPivot ? pivotY : rotY;\n\n        return { tx, ty, tz, rx, ry, shouldPivot };\n    }\n}", "\nimport { type ReadonlyVec3, vec3, type ReadonlyQuat, glMatrix, quat } from \"gl-matrix\";\nimport { BaseController, type ControllerInitParams, type MutableCameraState } from \"./base\";\nimport { type RenderStateScene, type RenderStateCamera, type RenderState, mergeRecursive, type RecursivePartial } from \"core3d\";\nimport { PitchRollYawOrientation, decomposeRotation } from \"./orientation\";\nimport { ControllerInput, MouseButtons } from \"./input\";\n\n/** Ortho type camera motion controller */\nexport interface PanoramaControllerParams {\n    position?: ReadonlyVec3;\n    pitch?: number;\n    yaw?: number;\n    rotationalVelocity?: number;\n    fieldOfView?: number;\n}\n\n\nexport class PanoramaController extends BaseController {\n    static readonly defaultParams = {\n        position: [0, 0, 0],\n        pitch: -30,\n        yaw: 30,\n        rotationalVelocity: 1,\n        fieldOfView: 60,\n    };\n\n    override kind = \"panorama\" as const;\n    override projection = \"pinhole\" as const;\n    override changed = false;\n    private params;\n    private position: ReadonlyVec3 = vec3.create();\n    private readonly orientation = new PitchRollYawOrientation();\n    private fov: number;\n\n    constructor(input: ControllerInput, params?: PanoramaControllerParams) {\n        super(input);\n        this.params = { ...PanoramaController.defaultParams, ...params } as const;\n        const { orientation } = this;\n        const { pitch, yaw, fieldOfView } = this.params;\n        orientation.pitch = pitch;\n        orientation.yaw = yaw;\n        this.fov = fieldOfView;\n    }\n\n    override serialize(): ControllerInitParams {\n        const { kind, position, orientation, fov } = this;\n        const { rotation } = orientation;\n        this.changed = false;\n        return { kind, position, rotation, fovDegrees: fov };\n    }\n\n    override updateParams(params: RecursivePartial<PanoramaControllerParams>) {\n        this.params = mergeRecursive(this.params, params);\n    }\n\n    override init(params: ControllerInitParams) {\n        const { kind, position, rotation, fovDegrees } = params;\n        console.assert(kind == this.kind);\n        if (position) {\n            this.position = position;\n        }\n        if (rotation) {\n            this.orientation.decomposeRotation(rotation);\n            this.orientation.roll = 0;\n        }\n        if (fovDegrees != undefined) {\n            this.fov = fovDegrees;\n        }\n        this.changed = false;\n        this.input.callbacks = this;\n        this.input.usePointerLock = true;\n        this.attach();\n    }\n\n    override autoFit(center: ReadonlyVec3, radius: number): void {\n        const { orientation } = this;\n        const maxDistance = 1000;\n        const distance = Math.min(maxDistance, radius / Math.tan(glMatrix.toRadian(this.fov) / 2));\n        const dir = vec3.fromValues(0, 0, distance);\n        vec3.transformQuat(dir, dir, orientation.rotation);\n        this.position = vec3.add(vec3.create(), center, dir)\n    }\n\n    override moveTo(targetPosition: ReadonlyVec3, flyTime: number = 1000, rotation?: quat): void {\n        const { orientation, position } = this;\n        if (flyTime) {\n            let targetPitch = orientation.pitch;\n            let targetYaw = orientation.yaw;\n            if (rotation) {\n                const { pitch, yaw } = decomposeRotation(rotation)\n                targetPitch = pitch / Math.PI * 180;\n                targetYaw = yaw / Math.PI * 180;\n            }\n\n            this.setFlyTo({\n                totalFlightTime: flyTime,\n                end: { pos: vec3.clone(targetPosition), pitch: targetPitch, yaw: targetYaw },\n                begin: { pos: vec3.clone(position), pitch: orientation.pitch, yaw: orientation.yaw }\n            });\n        }\n        else {\n            this.position = targetPosition;\n            if (rotation) {\n                this.orientation.decomposeRotation(rotation);\n            }\n            this.changed = true;\n        }\n    }\n\n    override update(): void {\n        const { axes, orientation, params, height, fov, currentFlyTo } = this;\n        if (currentFlyTo) {\n            this.position = vec3.clone(currentFlyTo.pos);\n            orientation.pitch = currentFlyTo.pitch;\n            orientation.yaw = currentFlyTo.yaw;\n            this.changed = true;\n            return;\n        }\n        const tz = axes.keyboard_ws + axes.mouse_wheel + axes.touch_pinch2;\n        const rx = -axes.keyboard_arrow_up_down / 5 - axes.mouse_lmb_move_y + axes.touch_1_move_y;\n        const ry = -axes.keyboard_arrow_left_right / 5 - axes.mouse_lmb_move_x + axes.touch_1_move_x;\n        orientation.roll = 0;\n\n        if (rx || ry) {\n            const rotationalVelocity = this.fov * params.rotationalVelocity / height;\n            orientation.pitch += rx * rotationalVelocity;\n            orientation.yaw += ry * rotationalVelocity;\n            this.changed = true;\n        }\n\n        if (tz) {\n            const dz = 1 + (tz / height);\n            this.fov = Math.max(Math.min(60, fov * dz), 0.1);\n            this.changed = true;\n        }\n    }\n\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\n        const changes: MutableCameraState = {};\n        const { position, orientation, fov } = this;\n        if (!state || state.position !== position) {\n            changes.position = position;\n        }\n        if (!state || state.rotation !== orientation.rotation) {\n            changes.rotation = orientation.rotation;\n        }\n        if (!state || state.fov !== fov) {\n            changes.fov = fov;\n        }\n        if (!state) {\n            changes.kind = \"pinhole\";\n        }\n        return changes;\n    }\n}", "import type { RenderStateClippingPlane, RenderStateDynamicInstance, RenderStateDynamicObject } from \"core3d\";\nimport { quat, vec3, vec4, type ReadonlyVec4 } from \"gl-matrix\";\n\nconst transforms = {\n    GLToCAD: flipFuncs(flipGLtoCadVec, flipGLtoCadQuat),\n    CADToGL: flipFuncs(flipCADToGLVec, flipCADToGLQuat),\n};\n\nexport function flipState(changes: any, transform: \"GLToCAD\" | \"CADToGL\") {\n    flipRecursive(changes, transforms[transform]);\n}\n\n\nfunction flipFuncs(swapVecFunc: (v: number[]) => number[], swapQuatFunc: (q: quat) => quat) {\n    const state = {\n        camera: {\n            position: swapVecFunc,\n            rotation: swapQuatFunc,\n            pivot: swapVecFunc,\n        },\n        grid: {\n            origin: swapVecFunc,\n            axisX: swapVecFunc,\n            axisY: swapVecFunc,\n        },\n        cube: {\n            position: swapVecFunc,\n        },\n\n        clipping: {\n            planes: flipArray(swapVecFunc),\n        },\n        outlines: {\n            plane: swapVecFunc\n        },\n        scene: {\n            config: {\n                center: swapVecFunc,\n                offset: swapVecFunc,\n                boundingSphere: {\n                    center: swapVecFunc\n                },\n                aabb: {\n                    min: swapVecFunc,\n                    max: swapVecFunc\n                }\n            }\n        },\n        dynamic: {\n            objects: flipDynaicObjects(swapVecFunc, swapQuatFunc)\n        }\n    } as const;\n    return state;\n}\n\nfunction flipCADToGLVec(v: number[]) {\n    const clone = [...v];\n    const tmp = clone[1];\n    clone[1] = clone[2];\n    clone[2] = -tmp;\n    return clone;\n}\n\n\nexport function flipGLtoCadVec(v: number[]) {\n    const clone = [...v];\n    const tmp = clone[1];\n    clone[1] = -clone[2];\n    clone[2] = tmp;\n    return clone;\n}\n\n// function flipCADToGLQuat2(q: quat) {\n//     const flipZY = quat.fromValues(-0.7071067811865475, 0, 0, 0.7071067811865476);\n//     return quat.mul(quat.create(), flipZY, q);\n// }\n\nexport function flipCADToGLQuat(b: quat) {\n    let ax = -0.7071067811865475,\n        aw = 0.7071067811865475;\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n    return quat.fromValues(\n        ax * bw + aw * bx,\n        aw * by + - ax * bz,\n        aw * bz + ax * by,\n        aw * bw - ax * bx);\n}\n\n// export function flipGLtoCadQuat(q: quat) {\n//     const flipZY = quat.fromValues(0.7071067811865475, 0, 0, 0.7071067811865476);\n//     return quat.mul(quat.create(), flipZY, q);\n// }\n\nexport function flipGLtoCadQuat(b: quat) {\n    let ax = 0.7071067811865475,\n        aw = 0.7071067811865475;\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n    return quat.fromValues(\n        ax * bw + aw * bx,\n        aw * by + - ax * bz,\n        aw * bz + ax * by,\n        aw * bw - ax * bx);\n}\n\nfunction flipDynaicObjects(swapVecFunc: (v: number[]) => number[], swapQuatFunc: (q: quat) => quat) {\n    return function (ar: RenderStateDynamicObject[]) {\n        const flippedObjects: RenderStateDynamicObject[] = [];\n        for (const obj of ar) {\n            const flippedInstances: RenderStateDynamicInstance[] = [];\n            for (const inst of obj.instances) {\n                flippedInstances.push({\n                    position: swapVecFunc(inst.position as any) as vec3, rotation: inst.rotation ? swapQuatFunc(inst.rotation as any) : undefined\n                });\n            }\n            flippedObjects.push({ mesh: obj.mesh, instances: flippedInstances, baseObjectId: obj.baseObjectId });\n        }\n        return flippedObjects;\n    }\n}\n\nfunction flipArray(swapFunc: (v: number[]) => number[]) {\n    return function (ar: RenderStateClippingPlane[]) {\n        const flippedPlanes: RenderStateClippingPlane[] = [];\n        for (const plane of ar) {\n            flippedPlanes.push({ color: plane.color, normalOffset: swapFunc(plane.normalOffset as any as number[]) as any as ReadonlyVec4 });\n        }\n        return flippedPlanes;\n    }\n}\n\nexport function flipRecursive(state: any, funcs: any) {\n    for (const key in state) {\n        const func = funcs ? funcs[key] : undefined;\n        const value = state[key];\n        if (func && value) {\n            if (typeof func == \"function\") {\n                state[key] = func(value);\n            } else {\n                flipRecursive(value, func);\n            }\n        }\n    }\n}\n", "import { type ReadonlyVec3, vec3, type ReadonlyQuat, mat3 } from \"gl-matrix\";\nimport { downloadScene, type RenderState, type RenderStateChanges, type RenderStateClippingPlane, defaultRenderState, initCore3D, mergeRecursive, RenderContext, type SceneConfig, modifyRenderState, type RenderStatistics, type DeviceProfile, type PickSample, type PickOptions } from \"core3d\";\nimport { ControllerInput, FlightController, OrbitController, OrthoController, PanoramaController, type BaseController, CadMiddlePanController, CadRightPanController, SpecialFlightController } from \"./controller\";\nimport { flipState } from \"./flip\";\n\nexport abstract class View {\n    readonly scriptUrl = (document.currentScript as HTMLScriptElement | null)?.src ?? import.meta.url;\n    readonly alternateUrl = new URL(\"https://blobs.novorender.com/\").toString();\n    abstract getSasKey(sceneId: string): string | undefined; // sas key, sans \"?\"\n    public renderContext: RenderContext | undefined;\n    private _deviceProfile: DeviceProfile;\n    private _setDeviceProfile: (value: DeviceProfile) => void;\n    protected renderStateGL: RenderState;\n    protected renderStateCad: RenderState;\n    protected prevRenderStateCad: RenderState | undefined;\n    private stateChanges: RenderStateChanges | undefined;\n    private screenshot: string | undefined | null = null;\n\n    //* @internal */\n    controllers;\n    //* @internal */\n    activeController: BaseController;\n    //* @internal */\n    clippingPlanes: RenderStateClippingPlane[] = [];\n    private _statistics: { readonly render: RenderStatistics, readonly view: ViewStatistics } | undefined = undefined;\n\n    // dynamic resolution scaling\n    private resolutionModifier = 1;\n    private drsHighInterval = 50;\n    private drsLowInterval = 100;\n    private lastQualityAdjustTime = 0;\n    private resolutionTier: 0 | 1 | 2 = 2;\n\n    private currentDetailBias: number = 1;\n\n    constructor(readonly canvas: HTMLCanvasElement, deviceProfile: DeviceProfile) {\n        this._deviceProfile = deviceProfile;\n        this._setDeviceProfile = initCore3D(deviceProfile, canvas, this.setRenderContext);\n        this.renderStateGL = defaultRenderState();\n        this.renderStateCad = this.createRenderState(this.renderStateGL);\n\n        const input = new ControllerInput(canvas);\n\n        this.controllers = {\n            flight: new FlightController(this, input),\n            orbit: new OrbitController(input),\n            ortho: new OrthoController(input),\n            panorama: new PanoramaController(input),\n            cadMiddlePan: new CadMiddlePanController(this, input),\n            cadRightPan: new CadRightPanController(this, input),\n            special: new SpecialFlightController(this, input),\n        } as const;\n        this.activeController = this.controllers[\"flight\"];\n        this.activeController.attach();\n\n        const resizeObserver = new ResizeObserver(() => { this.resize(); });\n        resizeObserver.observe(canvas);\n    }\n\n    dispose() {\n        this.renderContext?.dispose();\n        this.renderContext = undefined;\n    }\n\n    updateChanges(changes: RenderStateChanges) {\n        this.prevRenderStateCad = this.renderStateCad;\n        this.renderStateCad = mergeRecursive(this.renderStateCad, changes) as RenderState;\n        flipState(changes, \"CADToGL\");\n        this.renderStateGL = modifyRenderState(this.renderStateGL, changes);\n    }\n\n    createRenderState(state: RenderState) {\n        const clone = structuredClone(state);\n        flipState(clone, \"GLToCAD\");\n        return clone;\n    }\n\n    async getScreenshot(): Promise<string> {\n        this.screenshot = undefined;\n        function delay(ms: number) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n        while (this.screenshot === undefined) {\n            await delay(50);\n        }\n        return this.screenshot;\n    }\n\n    get renderState() {\n        return this.renderStateCad;\n    }\n\n    get prevRenderState() {\n        return this.prevRenderStateCad;\n    }\n\n    get statistics() {\n        return this._statistics;\n    }\n\n    // changing device profile will recreate the entire renderContext, so use with caution!\n    get deviceProfile() { return this._deviceProfile; }\n    set deviceProfile(value: DeviceProfile) {\n        this._deviceProfile = value;\n        this._setDeviceProfile?.(value); // this will in turn trigger this.useDeviceProfile\n    }\n\n    readonly setRenderContext = (context: RenderContext) => {\n        this.renderContext = context;\n        this.useDeviceProfile(this._deviceProfile);\n    }\n\n    private useDeviceProfile(deviceProfile: DeviceProfile) {\n        this.resolutionModifier = deviceProfile.renderResolution;\n        this.drsHighInterval = (1000 / deviceProfile.framerateTarget) * 1.2;\n        this.drsLowInterval = (1000 / deviceProfile.framerateTarget) * 0.9;\n    }\n\n    private resize() {\n        const scale = devicePixelRatio * this.resolutionModifier;\n        // const scale = 1.0;\n        let { width, height } = this.canvas.getBoundingClientRect();\n        width = Math.round(width * scale);\n        height = Math.round(height * scale);\n        const { output } = this.renderStateGL;\n        if (width != output.width || height != output.height) {\n            this.updateChanges({ output: { width, height } });\n        }\n    }\n\n    /**\n     * Retrieve list of available background/IBL environments.\n     * @public\n     * @param indexUrl\n     * The absolute or relative url of the index.json file.\n     * Relative url will be relative to the novorender api script url.\n     * If undefined, \"/assets/env/index.json\" will be used by default.\n     * @returns A promise of a list of environments.\n     */\n    async availableEnvironments(indexUrl?: string): Promise<EnvironmentDescription[]> {\n        let environments: EnvironmentDescription[] = [];\n        const url = new URL(indexUrl ?? \"/assets/env/index.json\", this.scriptUrl);\n        const response = await fetch(url.toString());\n        if (response.ok) {\n            const json = await response.json();\n            environments = (json as string[]).map(name => {\n                return { name, url: new URL(name, url).toString() + \"/\", thumnbnailURL: new URL(`thumbnails/${name}.png`, url).toString() } as EnvironmentDescription;\n            });\n        }\n        return environments;\n    }\n\n    /**\n     * Load a scene from a url.\n    * @public\n    * @param url The absolute url to the folder containing the scene.\n    * @remarks\n    * The url typically contains the scene id as the latter part of the path, i.e. `https://.../<scene_guid>/`.\n    */\n    async loadSceneFromURL(url: URL): Promise<SceneConfig> {\n        const scene = await downloadScene(url.toString());\n        const stateChanges = { scene };\n        flipState(stateChanges, \"GLToCAD\");\n        this.modifyRenderState(stateChanges);\n        return scene.config;\n    }\n\n    async pick(x: number, y: number, options?: PickOptions) {\n        const context = this.renderContext;\n        if (context) {\n            const samples = await context.pick(x, y, options);\n            if (samples.length) {\n                let isEdge = false;\n                const centerSample = samples.reduce((a, b) => {\n                    if (!isEdge && vec3.dot(a.normal, b.normal) < 0.8) {\n                        isEdge = true;\n                    }\n                    return a.depth < b.depth ? a : b\n                });\n                const { viewWorldMatrixNormal } = context.getViewMatrices();\n                const invNormalMatrix = mat3.invert(mat3.create(), viewWorldMatrixNormal);\n                const flippedSample = {\n                    ...centerSample,\n                    position: vec3.fromValues(centerSample.position[0], -centerSample.position[2], centerSample.position[1]),\n                    normal: vec3.fromValues(centerSample.normal[0], -centerSample.normal[2], centerSample.normal[1]),\n                    isEdge: samples.length > 1 ? isEdge : undefined,\n                    normalVS: vec3.transformMat3(vec3.create(), centerSample.normal, invNormalMatrix)\n                }\n                return flippedSample;\n            }\n        }\n        return undefined;\n    }\n\n    async switchCameraController(kind: string, initState?: { position?: ReadonlyVec3, rotation?: ReadonlyQuat, fov?: number }, options?: { autoInit?: boolean }) {\n        const autoInit = options?.autoInit ?? false;\n        function isControllerKind(kind: string, controllers: Object): kind is keyof View[\"controllers\"] {\n            return kind in controllers;\n        }\n        if (!isControllerKind(kind, this.controllers))\n            throw new Error(`Unknown controller kind: ${kind}!`);\n\n        const { controllers, renderContext } = this;\n        let { activeController } = this;\n\n        // find minimum renderered distance\n        let distance: number | undefined;\n        if (autoInit && renderContext && renderContext.prevState) {\n            renderContext.renderPickBuffers();\n            const pick = (await renderContext.buffers.pickBuffers()).pick;\n            const depths = await renderContext.getLinearDepths(pick);\n            distance = Number.MAX_VALUE;\n            for (const depth of depths) {\n                distance = Math.min(distance, depth);\n            }\n        }\n\n        // transfer what state we can from previous controller\n        const prevState = activeController.serialize(true /* include derived properties as well */);\n        activeController = this.activeController = controllers[kind];\n        const { position, rotation, pivot, fovDegrees, fovMeters } = prevState;\n\n        activeController.init({ kind, position: initState?.position ?? position, rotation: initState?.rotation ?? rotation, pivot, distance, fovDegrees, fovMeters: initState?.fov ?? fovMeters });\n        const changes = activeController.stateChanges();\n        this.modifyRenderState({ camera: changes });\n    }\n\n    /** @internal */\n    dynamicResolutionScaling(frameIntervals: number[]) {\n        const samples = 9;\n        if (frameIntervals.length == samples) {\n            const { deviceProfile } = this;\n            const highFrameInterval = this.drsHighInterval;\n            const lowFrameInterval = this.drsLowInterval;\n            const sortedIntervals = [...frameIntervals];\n            sortedIntervals.sort();\n            const medianInterval = sortedIntervals[Math.floor(samples / 2)];\n            frameIntervals.splice(0, 1);\n            const cooldown = 3000;\n            const now = performance.now();\n            if (now > this.lastQualityAdjustTime + cooldown) { // add a cooldown period before changing anything\n                const resolutionTiers = [0.4, 0.6, 1];\n                if (medianInterval > highFrameInterval) {\n                    if (this.resolutionTier != 0) {\n                        this.resolutionModifier = deviceProfile.renderResolution * resolutionTiers[--this.resolutionTier];\n                        this.resize();\n                    }\n                    this.lastQualityAdjustTime = now; // reset cooldown whenever we encounter a slow frame so we don't change back to high res too eagerly\n                    return;\n                } else if (medianInterval < lowFrameInterval) {\n                    if (this.resolutionTier != 2) {\n                        this.resolutionModifier = deviceProfile.renderResolution * resolutionTiers[++this.resolutionTier];\n                        this.lastQualityAdjustTime = now; // reset cooldown whenever we encounter a slow frame so we don't change back to high res too eagerly\n                        this.resize();\n                    }\n                    return;\n                }\n            }\n        }\n    }\n\n    // called before render state changes are applied, i.e. you can still call modifyRenderState() here.\n    animate?(time: number): void;\n\n    // called after all render state changes has been applied, i.e. this is a good time to do custom rendering, e.g. 2D content such as text and lines etc.\n    render?(isIdleFrame: boolean): void;\n\n    async run() {\n        let prevState: RenderState | undefined;\n        let pickRenderState: RenderState | undefined;\n        let prevRenderTime = performance.now();\n        let wasCameraMoving = false;\n        let idleFrameTime = 0;\n        let wasIdle = false;\n        const frameIntervals: number[] = [];\n        for (; ;) {\n            const { renderContext, activeController, deviceProfile } = this;\n            const renderTime = await RenderContext.nextFrame(renderContext);\n            const frameTime = renderTime - prevRenderTime;\n            const cameraChanges = activeController.renderStateChanges(this.renderStateCad.camera, renderTime - prevRenderTime);\n            if (cameraChanges) {\n                this.modifyRenderState(cameraChanges);\n            }\n\n            const isIdleFrame = idleFrameTime > 500;\n            if (renderContext && !renderContext.isContextLost()) {\n                renderContext.poll(); // poll for events, such as async reads and shader linking\n                renderContext.isIdleFrame = isIdleFrame;\n\n                if (isIdleFrame) { //increase resolution and detail bias on idleFrame\n                    if (!wasIdle) {\n                        this.resolutionModifier = Math.min(1, deviceProfile.renderResolution * 2);\n                        this.resize();\n                        this.modifyRenderState({ quality: { detail: 1 } });\n                        this.currentDetailBias = 1;\n                        wasIdle = true;\n                        if (pickRenderState && renderContext.isRendering()) {\n                            renderContext.renderPickBuffers();\n                            pickRenderState = undefined;\n                        }\n                    }\n                } else {\n                    if (wasIdle) {\n                        this.resolutionModifier = deviceProfile.renderResolution;\n                        this.resolutionTier = 2;\n                        wasIdle = false;\n                    } else {\n                        frameIntervals.push(frameTime);\n                        this.dynamicResolutionScaling(frameIntervals);\n                    }\n                    const activeDetailModifier = 0.5;\n                    if (this.renderStateGL.quality.detail != activeDetailModifier) {\n                        this.currentDetailBias = activeDetailModifier;\n                        this.modifyRenderState({ quality: { detail: activeDetailModifier } });\n                    }\n                }\n\n                this.animate?.(renderTime);\n\n                if (this.stateChanges) {\n                    this.updateChanges(this.stateChanges);\n                    this.stateChanges = undefined;\n                }\n\n                const { renderStateGL, screenshot } = this;\n                if (prevState !== renderStateGL || renderContext.changed || screenshot === undefined) {\n                    prevState = renderStateGL;\n                    this.render?.(isIdleFrame);\n                    const statsPromise = renderContext.render(renderStateGL);\n                    if (screenshot === undefined) {\n                        this.screenshot = this.canvas.toDataURL();\n                    }\n                    statsPromise.then((stats) => {\n                        this._statistics = { render: stats, view: { resolution: this.resolutionModifier, detailBias: deviceProfile.detailBias * this.currentDetailBias, fps: stats.frameInterval ? 1000 / stats.frameInterval : undefined } };\n                    });\n                    pickRenderState = renderStateGL;\n                }\n            }\n\n            if (this.activeController.moving) {\n                wasCameraMoving = true;\n                idleFrameTime = 0;\n            } else if (!wasCameraMoving) {\n                idleFrameTime += frameTime;\n            }\n            wasCameraMoving = this.activeController.moving;\n            prevRenderTime = renderTime;\n        }\n    }\n\n    /** @public */\n    modifyRenderState(changes: RenderStateChanges): void {\n        this.stateChanges = mergeRecursive(this.stateChanges, changes);\n    }\n}\n\n/** Background/IBL environment description\n  *  @public\n  */\nexport interface EnvironmentDescription {\n    /** Display name of environment */\n    readonly name: string;\n\n    /** Data URL. */\n    readonly url: string;\n\n    /** Thumbnail URL. */\n    readonly thumnbnailURL: string;\n}\n\nexport interface AppState {\n    readonly msaa: number,\n    readonly quit: boolean,\n    controllerState: string\n}\n\nexport interface ViewStatistics {\n    readonly resolution: number,\n    readonly detailBias: number,\n    readonly fps?: number,\n}\n\n", "import { PromiseBag, type ConnectRequest, type ReadRequest, type ReadResponse } from \".\";\n\n// this class helps handle the service worker tasks for offline caching and loading of a scene\nexport class ServiceWorkerHelper {\n    private _port: MessagePort | undefined;\n    private _reads = new PromiseBag<ArrayBuffer>();\n\n    constructor(readonly binaryAssetRegex: RegExp, readonly cache: Cache, readonly root?: FileSystemDirectoryHandle) {\n    }\n\n    handleConnectMessage(message: MessageEvent<ConnectRequest>) {\n        const { data } = message;\n        switch (data.kind) {\n            case \"connect\": {\n                const { port } = data;\n                this._port = port;\n                port.onmessage = this.handleIOMessage.bind(this);\n                console.log(\"sw connected!\");\n                break;\n            }\n        }\n    }\n\n    private handleIOMessage(message: MessageEvent<ReadResponse>) {\n        const { data } = message;\n        switch (data.kind) {\n            case \"read\": {\n                const { id, buffer, error } = data;\n                this._reads.resolve(id, buffer ?? new Error(error));\n                break;\n            }\n        }\n    }\n\n    isAsset(url: string) {\n        return this.binaryAssetRegex.test(new URL(url).pathname);\n    }\n\n    private getDirAndFile(url: URL) {\n        const m = this.binaryAssetRegex.exec(url.pathname);\n        if (!m)\n            throw new Error(`Invalid URL pathname: ${url.pathname}`);\n        const [_, dir, file] = m;\n        return { dir, file } as const;\n    }\n\n    async fetch(request: Request): Promise<Response> {\n        const url = new URL(request.url);\n        const { dir, file } = this.getDirAndFile(url);\n        const body = await this.readFile(dir, file);\n        if (body) {\n            return new Response(body, { status: 200, headers: { 'Content-Type': 'application/octet-stream' } }); // TODO: Add info from request, e.g. url\n        } else {\n            // const response = await this.cache.match(request);\n            // if (response) {\n            //     return response;\n            // }\n        }\n        // await this.cache.add(request);\n        console.log(`fetch ${url}`);\n        return await fetch(request);\n    }\n\n    async readFile(dir: string, filename: string) {\n        try {\n            if (this.root) {\n                // const root = await navigator.storage.getDirectory();\n                const folder = await this.root.getDirectoryHandle(dir, { create: false });\n                const fileHandle = await folder.getFileHandle(filename, { create: false });\n                const file = await fileHandle.getFile();\n                return file.stream();\n            } else {\n                const { _port, _reads } = this;\n                if (_port) {\n                    const id = _reads.newId();\n                    const msg: ReadRequest = { kind: \"read\", id, dir, file: filename };\n                    _port?.postMessage(msg);\n                    return await _reads.create(id);\n                }\n            }\n        } catch (ex: any) {\n            // console.error(ex.message);\n        }\n    }\n}\n\n\n", "export class PromiseBag<T = void> {\n    private readonly promises = new Map<number, PendingPromise<T>>();\n    private currentId = 0;\n\n    newId(): number {\n        const id = this.currentId++;\n        this.currentId &= 0xffff; // wrap around to avoid overflow\n        return id;\n    }\n\n    create(id: number): Promise<T> {\n        return new Promise<T>((resolve, reject) => {\n            this.promises.set(id, { resolve, reject });\n        });\n    }\n\n    resolve(id: number, result: T | Error) {\n        const { promises } = this;\n        const pendingPromise = promises.get(id);\n        if (pendingPromise) {\n            promises.delete(id);\n            const { resolve, reject } = pendingPromise;\n            if (!isError(result)) {\n                resolve(result);\n            } else {\n                reject(result);\n            }\n        }\n    }\n}\n\nfunction isError(result: any): result is Error {\n    return result && typeof result == \"object\" && result instanceof Error;\n}\n\ninterface PendingPromise<T> {\n    resolve(value: T): void;\n    reject(reason: any): void;\n}\n\n", "import { glMatrix } from \"gl-matrix\";\nimport { View } from \"./view\";\nimport { getDeviceProfile } from \"./device\";\nimport type { DeviceProfile } from \"core3d/device\";\nexport * from \"../core3d\";\nexport * from \"./view\";\nexport * from \"./controller\";\nexport * from \"./serviceWorker\";\nexport type { DeviceProfile } from \"core3d/device\";\nexport { getDeviceProfile };\nexport const packageVersion = import.meta.env.NPM_PACKAGE_VERSION ?? '';\n\nglMatrix.setMatrixArrayType(Array);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAI,UAAU;AACd,IAAI,aAAa,OAAO,iBAAiB,cAAc,eAAe;AACtE,IAAI,SAAS,KAAK;AAOlB,SAAS,mBAAmB,MAAM;AACvC,eAAa;AACf;AACA,IAAI,SAAS,KAAK,KAAK;AAOhB,SAAS,SAAS,GAAG;AAC1B,SAAO,IAAI;AACb;AAWO,SAAS,OAAO,GAAG,GAAG;AAC3B,SAAO,KAAK,IAAI,IAAI,CAAC,KAAK,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;AAC5E;AACA,IAAI,CAAC,KAAK;AAAO,OAAK,QAAQ,WAAY;AACxC,QAAI,IAAI,GACJ,IAAI,UAAU;AAElB,WAAO,KAAK;AACV,WAAK,UAAU,CAAC,IAAI,UAAU,CAAC;AAAA,IACjC;AAEA,WAAO,KAAK,KAAK,CAAC;AAAA,EACpB;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAAS,SAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,SAAS,KAAK,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,EAAE;AACb,SAAO;AACT;AAQO,SAAS,MAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AASO,SAAS,KAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAgBO,SAAS,WAAW,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACtE,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAiBO,SAAS,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACpE,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAAS,SAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAEhC,MAAI,QAAQ,GAAG;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX,OAAO;AACL,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AAAA,EACd;AAEA,SAAO;AACT;AASO,SAAS,OAAO,KAAK,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,CAAC,MAAM,MAAM,MAAM;AAC7B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAExC,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,SAAO;AACT;AASO,SAAS,QAAQ,KAAK,GAAG;AAC9B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,SAAO;AACT;AAQO,SAAS,YAAY,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,SAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,CAAC,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG;AAUO,SAAS,SAAS,KAAK,GAAG,GAAG;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,SAAO;AACT;AAUO,SAAS,UAAU,KAAK,GAAG,GAAG;AACnC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,SAAO;AACT;AAUO,SAAS,OAAO,KAAK,GAAG,KAAK;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,IAAI,KAAK,IAAI,GAAG,GAChB,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAAS,MAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAaO,SAAS,gBAAgB,KAAK,GAAG;AACtC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAaO,SAAS,aAAa,KAAK,KAAK;AACrC,MAAI,IAAI,KAAK,IAAI,GAAG,GAChB,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAaO,SAAS,YAAY,KAAK,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAAS,SAAS,KAAK,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG;AACrC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAE5E,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,SAAO;AACT;AAUO,SAAS,WAAW,KAAK,OAAO,QAAQ;AAC7C,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAAS,IAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AAC1I;AAQO,SAAS,KAAK,GAAG;AACtB,SAAO,KAAK,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AACxE;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,SAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG,GAAG;AACxC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAAS,qBAAqB,KAAK,GAAG,GAAGC,QAAO;AACrD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAAS,YAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AAC7J;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACjwB;AAMO,IAAI,MAAM;AAMV,IAAI,MAAM;;;ACzwBjB;AAAA;AAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA,sBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,qBAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,sBAAAC;AAAA,EAAA,4BAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA,mBAAAC;AAAA,EAAA,iBAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,EAAE;AAEpC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAAA,EACZ;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,EAAE;AACpC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AAuBO,SAASC,YAAW,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACzG,MAAI,MAAM,IAAa,WAAW,EAAE;AACpC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAwBO,SAASC,KAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACvG,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASC,UAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAEhC,MAAI,QAAQ,GAAG;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,EAAE;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAAA,EACZ,OAAO;AACL,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAEA,SAAO;AACT;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAE5E,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,SAAO;AACT;AAQO,SAASC,aAAY,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,SAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC3E;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AAEd,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,SAAO;AACT;AAUO,SAASC,WAAU,KAAK,GAAG,GAAG;AACnC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AAEnB,MAAI,MAAM,KAAK;AACb,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AAC/C,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AAC/C,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAChD,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAAA,EAClD,OAAO;AACL,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,EAAE;AACV,UAAM,EAAE,EAAE;AACV,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAAA,EAC9C;AAEA,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AAWO,SAASC,QAAO,KAAK,GAAG,KAAK,MAAM;AACxC,MAAI,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC;AACd,MAAIC,OAAM,KAAK,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAI,GAAG,GAAG;AACV,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AAEd,MAAIA,OAAe,SAAS;AAC1B,WAAO;AAAA,EACT;AAEA,EAAAA,OAAM,IAAIA;AACV,OAAKA;AACL,OAAKA;AACL,OAAKA;AACL,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,IAAI;AACR,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,EAAE;AACV,QAAM,EAAE,EAAE;AAEV,QAAM,IAAI,IAAI,IAAI;AAClB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI;AAClB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI;AAElB,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,MAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AAExC,MAAI,MAAM,KAAK;AAEb,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAEA,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE;AAEd,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE;AAEd,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AAEb,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,SAAO;AACT;AAaO,SAASC,iBAAgB,KAAK,GAAG;AACtC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAASC,aAAY,KAAK,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAcO,SAASC,cAAa,KAAK,KAAK,MAAM;AAC3C,MAAI,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC;AACd,MAAIH,OAAM,KAAK,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAI,GAAG,GAAG;AAEV,MAAIA,OAAe,SAAS;AAC1B,WAAO;AAAA,EACT;AAEA,EAAAA,OAAM,IAAIA;AACV,OAAKA;AACL,OAAKA;AACL,OAAKA;AACL,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,IAAI;AAER,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI;AACrB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI;AACrB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,EAAE,IAAI,IAAI,IAAI,IAAI;AACtB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAiBO,SAAS,wBAAwB,KAAK,GAAG,GAAG;AAEjD,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,KAAK,KAAK;AACnB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK,KAAK;AACnB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,EAAE,IAAI,KAAK,KAAK;AACpB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,cAAc,IAAa,WAAW,CAAC;AAC3C,MAAI,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,YAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAEnD,MAAI,YAAY,GAAG;AACjB,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACjE,OAAO;AACL,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC3D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC3D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAAA,EAC7D;AAEA,0BAAwB,KAAK,GAAG,WAAW;AAC3C,SAAO;AACT;AAWO,SAAS,eAAe,KAAK,KAAK;AACvC,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,SAAO;AACT;AAYO,SAAS,WAAW,KAAK,KAAK;AACnC,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,EAAE;AAChB,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,SAAO;AACT;AAWO,SAAS,YAAY,KAAK,KAAK;AACpC,MAAI,UAAU,IAAa,WAAW,CAAC;AACvC,aAAW,SAAS,GAAG;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,EAAE,IAAI;AACrB,MAAI,QAAQ,OAAO,OAAO;AAC1B,MAAI,IAAI;AAER,MAAI,QAAQ,GAAG;AACb,QAAI,KAAK,KAAK,QAAQ,CAAG,IAAI;AAC7B,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,WAAW,OAAO,QAAQ,OAAO,MAAM;AACrC,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,WAAW,OAAO,MAAM;AACtB,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,OAAO;AACL,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAAA,EAClB;AAEA,SAAO;AACT;AAmBO,SAAS,6BAA6B,KAAK,GAAG,GAAG,GAAG;AAEzD,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,KAAK,KAAK,KAAK,OAAO;AAC3B,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,KAAK,OAAO;AAC3B,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,EAAE,KAAK,KAAK,KAAK,OAAO;AAC5B,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAsBO,SAAS,mCAAmC,KAAK,GAAG,GAAG,GAAG,GAAG;AAElE,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,SAAS,KAAK,KAAK,OAAO;AAC9B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,QAAQ;AACvD,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAUO,SAASI,UAAS,KAAK,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,EAAE,IAAI,IAAI,KAAK;AACnB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAcO,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,QAAQ;AACtB,MAAI,KAAK,KAAK,MAAM;AACpB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,OAAO,IAAI;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,OAAO,IAAI;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,QAAQ,QAAQ;AAC1B,MAAI,CAAC,KAAK,MAAM,UAAU;AAC1B,MAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,MAAM,OAAO,IAAI;AAC3B,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAeO,SAAS,cAAc,KAAK,MAAM,QAAQ,MAAM,KAAK;AAC1D,MAAI,IAAI,IAAM,KAAK,IAAI,OAAO,CAAC,GAC3B;AACJ,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AAEV,MAAI,OAAO,QAAQ,QAAQ,UAAU;AACnC,SAAK,KAAK,OAAO;AACjB,QAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,QAAI,EAAE,IAAI,IAAI,MAAM,OAAO;AAAA,EAC7B,OAAO;AACL,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,KAAK;AAAA,EACjB;AAEA,SAAO;AACT;AAMO,IAAI,cAAc;AAelB,SAAS,cAAc,KAAK,MAAM,QAAQ,MAAM,KAAK;AAC1D,MAAI,IAAI,IAAM,KAAK,IAAI,OAAO,CAAC,GAC3B;AACJ,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AAEV,MAAI,OAAO,QAAQ,QAAQ,UAAU;AACnC,SAAK,KAAK,OAAO;AACjB,QAAI,EAAE,IAAI,MAAM;AAChB,QAAI,EAAE,IAAI,MAAM,OAAO;AAAA,EACzB,OAAO;AACL,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,CAAC;AAAA,EACb;AAEA,SAAO;AACT;AAaO,SAAS,2BAA2B,KAAK,KAAK,MAAM,KAAK;AAC9D,MAAI,QAAQ,KAAK,IAAI,IAAI,YAAY,KAAK,KAAK,GAAK;AACpD,MAAI,UAAU,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,GAAK;AACxD,MAAI,UAAU,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,GAAK;AACxD,MAAI,WAAW,KAAK,IAAI,IAAI,eAAe,KAAK,KAAK,GAAK;AAC1D,MAAI,SAAS,KAAO,UAAU;AAC9B,MAAI,SAAS,KAAO,QAAQ;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,GAAG,UAAU,YAAY,SAAS;AAC3C,MAAI,CAAC,KAAK,QAAQ,WAAW,SAAS;AACtC,MAAI,EAAE,IAAI,OAAO,OAAO;AACxB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,MAAM,QAAQ,OAAO;AAC/B,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAgBO,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK,SAAS;AACvB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI,IAAI;AACd,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,KAAK,OAAO,SAAS;AAC3B,MAAI,EAAE,KAAK,MAAM,UAAU;AAC3B,MAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAMO,IAAI,QAAQ;AAgBZ,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK,SAAS;AACvB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,KAAK,OAAO,SAAS;AAC3B,MAAI,EAAE,KAAK,MAAM,UAAU;AAC3B,MAAI,EAAE,IAAI,OAAO;AACjB,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAYO,SAAS,OAAO,KAAK,KAAK,QAAQ,IAAI;AAC3C,MAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAIJ;AACxC,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,UAAU,OAAO,CAAC;AACtB,MAAI,UAAU,OAAO,CAAC;AACtB,MAAI,UAAU,OAAO,CAAC;AAEtB,MAAI,KAAK,IAAI,OAAO,OAAO,IAAa,WAAW,KAAK,IAAI,OAAO,OAAO,IAAa,WAAW,KAAK,IAAI,OAAO,OAAO,IAAa,SAAS;AAC7I,WAAOT,UAAS,GAAG;AAAA,EACrB;AAEA,OAAK,OAAO;AACZ,OAAK,OAAO;AACZ,OAAK,OAAO;AACZ,EAAAS,OAAM,IAAI,KAAK,MAAM,IAAI,IAAI,EAAE;AAC/B,QAAMA;AACN,QAAMA;AACN,QAAMA;AACN,OAAK,MAAM,KAAK,MAAM;AACtB,OAAK,MAAM,KAAK,MAAM;AACtB,OAAK,MAAM,KAAK,MAAM;AACtB,EAAAA,OAAM,KAAK,MAAM,IAAI,IAAI,EAAE;AAE3B,MAAI,CAACA,MAAK;AACR,SAAK;AACL,SAAK;AACL,SAAK;AAAA,EACP,OAAO;AACL,IAAAA,OAAM,IAAIA;AACV,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,OAAK,KAAK,KAAK,KAAK;AACpB,OAAK,KAAK,KAAK,KAAK;AACpB,OAAK,KAAK,KAAK,KAAK;AACpB,EAAAA,OAAM,KAAK,MAAM,IAAI,IAAI,EAAE;AAE3B,MAAI,CAACA,MAAK;AACR,SAAK;AACL,SAAK;AACL,SAAK;AAAA,EACP,OAAO;AACL,IAAAA,OAAM,IAAIA;AACV,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAWO,SAAS,SAAS,KAAK,KAAK,QAAQ,IAAI;AAC7C,MAAI,OAAO,IAAI,CAAC,GACZ,OAAO,IAAI,CAAC,GACZ,OAAO,IAAI,CAAC,GACZ,MAAM,GAAG,CAAC,GACV,MAAM,GAAG,CAAC,GACV,MAAM,GAAG,CAAC;AACd,MAAI,KAAK,OAAO,OAAO,CAAC,GACpB,KAAK,OAAO,OAAO,CAAC,GACpB,KAAK,OAAO,OAAO,CAAC;AACxB,MAAIA,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAEnC,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AACvB,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,KAAK,MAAM,KAAK,MAAM,IACtB,KAAK,MAAM,KAAK,MAAM,IACtB,KAAK,MAAM,KAAK,MAAM;AAC1B,EAAAA,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAE/B,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AACvB,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASK,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI;AAClP;AAQO,SAASC,MAAK,GAAG;AACtB,SAAO,KAAK,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;AACxH;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,SAAO;AACT;AAUO,SAASC,gBAAe,KAAK,GAAG,GAAG;AACxC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,SAAO;AACT;AAWO,SAASC,sBAAqB,KAAK,GAAG,GAAGZ,QAAO;AACrD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,SAAO;AACT;AASO,SAASa,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE;AAChS;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC;AAC52C;AAMO,IAAIC,OAAMjB;AAMV,IAAIkB,OAAMN;;;ACr3DjB;AAAA;AAAA,aAAAO;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA;AAAA,cAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA;;;ACAA;AAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,eAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA;AAAA;AAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,iBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAQO,SAAS,OAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,GAAG,CAAC;AAC3B;AAUO,SAASC,YAAW,GAAG,GAAG,GAAG;AAClC,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAWO,SAASC,KAAI,KAAK,GAAG,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,OAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAAS,KAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAAS,MAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAAS,MAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAAS,YAAY,KAAK,GAAG,GAAGA,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAAS,SAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,GAAG,CAAC;AAC3B;AASO,SAAS,gBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B;AAQO,SAAS,cAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B;AASO,SAAS,OAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAAS,QAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI,IAAI,IAAI;AAE9B,MAAIA,OAAM,GAAG;AAEX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,SAAO;AACT;AASO,SAAS,IAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC/C;AAUO,SAAS,MAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAWO,SAAS,KAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AAaO,SAAS,QAAQ,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C,MAAI,eAAe,IAAI;AACvB,MAAI,UAAU,gBAAgB,IAAI,IAAI,KAAK;AAC3C,MAAI,UAAU,gBAAgB,IAAI,KAAK;AACvC,MAAI,UAAU,gBAAgB,IAAI;AAClC,MAAI,UAAU,gBAAgB,IAAI,IAAI;AACtC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,SAAO;AACT;AAaO,SAAS,OAAO,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AACzC,MAAI,gBAAgB,IAAI;AACxB,MAAI,wBAAwB,gBAAgB;AAC5C,MAAI,eAAe,IAAI;AACvB,MAAI,UAAU,wBAAwB;AACtC,MAAI,UAAU,IAAI,IAAI;AACtB,MAAI,UAAU,IAAI,eAAe;AACjC,MAAI,UAAU,eAAe;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,SAAO;AACT;AASO,SAAS,OAAO,KAAKD,QAAO;AACjC,EAAAA,SAAQA,UAAS;AACjB,MAAI,IAAa,OAAO,IAAI,IAAM,KAAK;AACvC,MAAI,IAAa,OAAO,IAAI,IAAM;AAClC,MAAI,SAAS,KAAK,KAAK,IAAM,IAAI,CAAC,IAAIA;AACtC,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;AACvB,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;AACvB,MAAI,CAAC,IAAI,IAAIA;AACb,SAAO;AACT;AAWO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAC9C,MAAI,KAAK;AACT,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK;AACpD,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK;AACpD,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,KAAK;AACrD,SAAO;AACT;AAUO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,SAAO;AACT;AAWO,SAAS,cAAc,KAAK,GAAG,GAAG;AAEvC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AAGX,MAAI,MAAM,KAAK,IAAI,KAAK,GACpB,MAAM,KAAK,IAAI,KAAK,GACpB,MAAM,KAAK,IAAI,KAAK;AAExB,MAAI,OAAO,KAAK,MAAM,KAAK,KACvB,OAAO,KAAK,MAAM,KAAK,KACvB,OAAO,KAAK,MAAM,KAAK;AAE3B,MAAI,KAAK,KAAK;AACd,SAAO;AACP,SAAO;AACP,SAAO;AAEP,UAAQ;AACR,UAAQ;AACR,UAAQ;AAER,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,SAAO;AACT;AAUO,SAASE,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC;AACV,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AAEjD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC;AACV,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AAEjD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC;AAEV,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAQO,SAAS,MAAM,GAAG,GAAG;AAC1B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAC5C,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAC5C,MAAM,OAAO,MACb,SAAS,OAAO,IAAI,GAAG,CAAC,IAAI;AAChC,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE,GAAG,CAAC,CAAC;AACpD;AAQO,SAAS,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACtD;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACvD;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACnQ;AAMO,IAAIC,OAAMV;AAMV,IAAIW,OAAMV;AAMV,IAAI,MAAM;AAMV,IAAI,OAAO;AAMX,IAAI,UAAU;AAMd,IAAI,MAAM;AAMV,IAAI,SAAS;AAcb,IAAI,UAAU,WAAY;AAC/B,MAAI,MAAMP,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AClxBF;AAAA;AAAA,aAAAkB;AAAA,EAAA,YAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAWO,SAASC,YAAW,GAAG,GAAG,GAAG,GAAG;AACrC,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAYO,SAASC,KAAI,KAAK,GAAG,GAAG,GAAG,GAAG;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAASC,aAAY,KAAK,GAAG,GAAGD,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAASE,UAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B;AASO,SAASC,iBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrC;AAQO,SAASC,QAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B;AAQO,SAASC,eAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrC;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAEtC,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,SAAO;AACT;AASO,SAASC,KAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC7D;AAWO,SAASC,OAAM,KAAK,GAAG,GAAG,GAAG;AAClC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B,MAAI,CAAC,IAAI,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI;AAChC,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B,MAAI,CAAC,IAAI,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI;AAChC,SAAO;AACT;AAWO,SAASC,MAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AASO,SAASC,QAAO,KAAKb,QAAO;AACjC,EAAAA,SAAQA,UAAS;AAIjB,MAAI,IAAI,IAAI,IAAI;AAChB,MAAI,IAAI;AAER,KAAG;AACD,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB,SAAS,MAAM;AAEf,KAAG;AACD,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB,SAAS,MAAM;AAEf,MAAI,IAAI,KAAK,MAAM,IAAI,MAAM,EAAE;AAC/B,MAAI,CAAC,IAAIA,SAAQ;AACjB,MAAI,CAAC,IAAIA,SAAQ;AACjB,MAAI,CAAC,IAAIA,SAAQ,KAAK;AACtB,MAAI,CAAC,IAAIA,SAAQ,KAAK;AACtB,SAAO;AACT;AAUO,SAASc,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI;AAClD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI;AAClD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI;AACnD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI;AACnD,SAAO;AACT;AAUO,SAASC,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AAEZ,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK;AAEjC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAQO,SAASC,MAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACpE;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACxE;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACxV;AAMO,IAAIC,OAAM5B;AAMV,IAAI6B,OAAM5B;AAMV,IAAI6B,OAAM5B;AAMV,IAAI6B,QAAOrB;AAMX,IAAIsB,WAAUrB;AAMd,IAAIM,OAAML;AAMV,IAAIqB,UAASpB;AAcb,IAAIqB,WAAU,WAAY;AAC/B,MAAI,MAAMxC,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AFvoBK,SAASyC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,UAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAWO,SAAS,aAAa,KAAK,MAAM,KAAK;AAC3C,QAAM,MAAM;AACZ,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AACrB,SAAO;AACT;AAeO,SAAS,aAAa,UAAU,GAAG;AACxC,MAAI,MAAM,KAAK,KAAK,EAAE,CAAC,CAAC,IAAI;AAC5B,MAAI,IAAI,KAAK,IAAI,MAAM,CAAG;AAE1B,MAAI,IAAa,SAAS;AACxB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AACrB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AACrB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AAAA,EACvB,OAAO;AAEL,aAAS,CAAC,IAAI;AACd,aAAS,CAAC,IAAI;AACd,aAAS,CAAC,IAAI;AAAA,EAChB;AAEA,SAAO;AACT;AASO,SAAS,SAAS,GAAG,GAAG;AAC7B,MAAI,aAAaC,KAAI,GAAG,CAAC;AACzB,SAAO,KAAK,KAAK,IAAI,aAAa,aAAa,CAAC;AAClD;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAWO,SAAS,WAAW,KAAK,GAAG;AACjC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,IAAI,IAAM,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC;AACxD,SAAO;AACT;AASO,SAAS,IAAI,KAAK,GAAG;AAC1B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACvC,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,IAAI,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,IAAI;AACvC,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC;AACxB,SAAO;AACT;AASO,SAAS,GAAG,KAAK,GAAG;AACzB,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACvC,MAAI,IAAI,IAAI,IAAI,KAAK,MAAM,GAAG,CAAC,IAAI,IAAI;AACvC,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACrD,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,KAAG,KAAK,CAAC;AACT,EAAAC,OAAM,KAAK,KAAK,CAAC;AACjB,MAAI,KAAK,GAAG;AACZ,SAAO;AACT;AAWO,SAAS,MAAM,KAAK,GAAG,GAAG,GAAG;AAGlC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,OAAO,OAAO,OAAO,QAAQ;AAEjC,UAAQ,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAE3C,MAAI,QAAQ,GAAK;AACf,YAAQ,CAAC;AACT,SAAK,CAAC;AACN,SAAK,CAAC;AACN,SAAK,CAAC;AACN,SAAK,CAAC;AAAA,EACR;AAGA,MAAI,IAAM,QAAiB,SAAS;AAElC,YAAQ,KAAK,KAAK,KAAK;AACvB,YAAQ,KAAK,IAAI,KAAK;AACtB,aAAS,KAAK,KAAK,IAAM,KAAK,KAAK,IAAI;AACvC,aAAS,KAAK,IAAI,IAAI,KAAK,IAAI;AAAA,EACjC,OAAO;AAGL,aAAS,IAAM;AACf,aAAS;AAAA,EACX;AAGA,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,SAAO;AACT;AAQO,SAASC,QAAO,KAAK;AAG1B,MAAI,KAAc,OAAO;AACzB,MAAI,KAAc,OAAO;AACzB,MAAI,KAAc,OAAO;AACzB,MAAI,eAAe,KAAK,KAAK,IAAI,EAAE;AACnC,MAAI,SAAS,KAAK,KAAK,EAAE;AACzB,MAAI,CAAC,IAAI,eAAe,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AACnD,MAAI,CAAC,IAAI,eAAe,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AACnD,MAAI,CAAC,IAAI,SAAS,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AAC7C,MAAI,CAAC,IAAI,SAAS,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AAC7C,SAAO;AACT;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAIP,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC7C,MAAI,SAASA,OAAM,IAAMA,OAAM;AAE/B,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,KAAK;AACd,SAAO;AACT;AAUO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAaO,SAAS,SAAS,KAAK,GAAG;AAG/B,MAAI,SAAS,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC9B,MAAI;AAEJ,MAAI,SAAS,GAAK;AAEhB,YAAQ,KAAK,KAAK,SAAS,CAAG;AAE9B,QAAI,CAAC,IAAI,MAAM;AACf,YAAQ,MAAM;AAEd,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AACzB,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AACzB,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AAAA,EAC3B,OAAO;AAEL,QAAI,IAAI;AACR,QAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAAG,UAAI;AACrB,QAAI,EAAE,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;AAAG,UAAI;AAC7B,QAAI,KAAK,IAAI,KAAK;AAClB,QAAI,KAAK,IAAI,KAAK;AAClB,YAAQ,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAG;AAClE,QAAI,CAAC,IAAI,MAAM;AACf,YAAQ,MAAM;AACd,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AACzC,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AACzC,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AAAA,EAC3C;AAEA,SAAO;AACT;AAYO,SAAS,UAAU,KAAK,GAAG,GAAG,GAAG;AACtC,MAAI,YAAY,MAAM,KAAK,KAAK;AAChC,OAAK;AACL,OAAK;AACL,OAAK;AACL,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,SAAO;AACT;AAQO,SAASQ,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACpE;AASO,IAAIC,SAAaA;AAYjB,IAAIC,cAAkBA;AAUtB,IAAIC,QAAYA;AAahB,IAAIC,OAAWA;AAWf,IAAIC,OAAWA;AAMf,IAAIC,OAAMb;AAWV,IAAII,SAAaA;AAUjB,IAAIL,OAAWA;AAYf,IAAIe,QAAYA;AAQhB,IAAIC,UAAcA;AAMlB,IAAIC,OAAMD;AASV,IAAIE,iBAAqBA;AAMzB,IAAIC,UAASD;AAUb,IAAIE,aAAiBA;AASrB,IAAIC,eAAmBA;AASvB,IAAIC,UAAcA;AAalB,IAAI,aAAa,WAAY;AAClC,MAAI,UAAexB,QAAO;AAC1B,MAAI,YAAiBY,YAAW,GAAG,GAAG,CAAC;AACvC,MAAI,YAAiBA,YAAW,GAAG,GAAG,CAAC;AACvC,SAAO,SAAU,KAAK,GAAG,GAAG;AAC1B,QAAIV,OAAW,IAAI,GAAG,CAAC;AAEvB,QAAIA,OAAM,WAAW;AACnB,MAAK,MAAM,SAAS,WAAW,CAAC;AAChC,UAAS,IAAI,OAAO,IAAI;AAAU,QAAK,MAAM,SAAS,WAAW,CAAC;AAClE,MAAK,UAAU,SAAS,OAAO;AAC/B,mBAAa,KAAK,SAAS,KAAK,EAAE;AAClC,aAAO;AAAA,IACT,WAAWA,OAAM,UAAU;AACzB,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,aAAO;AAAA,IACT,OAAO;AACL,MAAK,MAAM,SAAS,GAAG,CAAC;AACxB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,IAAIA;AACb,aAAOoB,WAAU,KAAK,GAAG;AAAA,IAC3B;AAAA,EACF;AACF,EAAE;AAaK,IAAI,SAAS,WAAY;AAC9B,MAAI,QAAQtB,QAAO;AACnB,MAAI,QAAQA,QAAO;AACnB,SAAO,SAAU,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AACnC,UAAM,OAAO,GAAG,GAAG,CAAC;AACpB,UAAM,OAAO,GAAG,GAAG,CAAC;AACpB,UAAM,KAAK,OAAO,OAAO,IAAI,KAAK,IAAI,EAAE;AACxC,WAAO;AAAA,EACT;AACF,EAAE;AAYK,IAAI,UAAU,WAAY;AAC/B,MAAI,OAAY,OAAO;AACvB,SAAO,SAAU,KAAK,MAAM,OAAO,IAAI;AACrC,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,WAAOsB,WAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AACF,EAAE;;;AGrsBF;AAAA;AAAA,aAAAG;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AASO,SAASC,YAAW,GAAG,GAAG;AAC/B,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAASC,aAAY,KAAK,GAAG,GAAGD,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAASE,UAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GACd,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,CAAC;AACxB;AASO,SAASC,iBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GACd,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI;AACrB;AAQO,SAASC,QAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,CAAC;AACxB;AAQO,SAASC,eAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI;AACrB;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI;AAEtB,MAAIA,OAAM,GAAG;AAEX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,SAAO;AACT;AASO,SAASC,KAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjC;AAWO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAChC,MAAI,CAAC,IAAI,IAAI,CAAC,IAAI;AAClB,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAWO,SAASC,MAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AASO,SAASC,QAAO,KAAKb,QAAO;AACjC,EAAAA,SAAQA,UAAS;AACjB,MAAI,IAAa,OAAO,IAAI,IAAM,KAAK;AACvC,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAIA;AACvB,SAAO;AACT;AAUO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI;AAC3B,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG,GAAG;AACxC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,SAAO;AACT;AAWO,SAASc,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,SAAO;AACT;AAYO,SAASC,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AACnC,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG,KAAK;AAErC,MAAI,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GACf,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GACf,OAAO,KAAK,IAAI,GAAG,GACnB,OAAO,KAAK,IAAI,GAAG;AAEvB,MAAI,CAAC,IAAI,KAAK,OAAO,KAAK,OAAO,EAAE,CAAC;AACpC,MAAI,CAAC,IAAI,KAAK,OAAO,KAAK,OAAO,EAAE,CAAC;AACpC,SAAO;AACT;AAQO,SAASC,OAAM,GAAG,GAAG;AAC1B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GAEZ,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAEhE,SAAS,QAAQ,KAAK,KAAK,KAAK,MAAM;AAEtC,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE,GAAG,CAAC,CAAC;AACpD;AAQO,SAASC,MAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACxC;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACtC;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAC9K;AAMO,IAAIZ,OAAML;AAMV,IAAIkB,OAAM9B;AAMV,IAAI+B,OAAM9B;AAMV,IAAI+B,OAAM9B;AAMV,IAAI+B,QAAOvB;AAMX,IAAIwB,WAAUvB;AAMd,IAAIwB,UAAStB;AAcb,IAAIuB,WAAU,WAAY;AAC/B,MAAI,MAAM1C,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;ACnmBK,SAAS,iBAAiB,MAAe,mBAA2C;AACvF,QAAM,UAAU,OAAO;AACvB,QAAM,cAAe,CAAC,KAAa,MAAa,KAAe,GAAa,EAAY,IAAI;AAC5F,QAAM,gBAAiB,CAAC,KAAY,KAAY,KAAY,GAAU,EAAY,IAAI;AACtF,QAAM,aAAc,CAAC,GAAG,GAAG,GAAG,EAAE,EAAY,IAAI;AAChD,QAAM,aAAc,CAAC,MAAM,KAAK,MAAK,CAAC,EAAY,IAAI;AACtD,MAAI,mBAAoB,CAAC,KAAK,MAAM,GAAG,CAAC,EAAY,IAAI;AACxD,MAAI,mBAAmB;AACnB,wBAAoB;AAAA,EACxB;AAEA,MAAI,YAAY;AAChB,MAAI,sBAAsB;AAE1B,QAAM,SAA4B,SAAS,cAAc,QAAQ;AACjE,SAAO,QAAQ;AACf,SAAO,SAAS;AAChB,WAAS,KAAK,YAAY,MAAM;AAChC,QAAM,KAAK,OAAO,WAAW,SAAS,EAAE,8BAA8B,KAAK,CAAC;AAC5E,SAAO,OAAO;AAEd,MAAI,IAAI;AACJ,UAAM,YAAY,GAAG,aAAa,2BAA2B;AAC7D,UAAM,WAAW,YACX,GAAG,aAAa,UAAU,uBAAuB,IACjD,GAAG,aAAa,IAAI,OAAO;AACjC,QAAI,OAAO,qBAAqB,EAAE,KAAK,QAAQ,GAAG;AAC9C,kBAAY;AAAA,IAChB,WACS,OAAO,UAAU,EAAE,KAAK,QAAQ,KAAK,OAAO,MAAM,EAAE,KAAK,QAAQ,GAAG;AACzE,4BAAsB;AAAA,IAC1B;AAAA,EACJ;AAGA,QAAM,cAAc;AAAA,IAChB,UAAU;AAAA,MACN;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACJ;AAAA,MACA;AAAA,IACJ;AAAA,IACA;AAAA,EACJ;AAEA,SAAO;AAAA,IACH,GAAG;AAAA,IACH;AAAA,IACA,iBAAiB;AAAA,EACrB;AACJ;;;ACnEO,SAAS,OAAO,IAA4B,QAAoB;AACnE,QAAM,IAAI,GAAG;AACb,QAAM,IAAI,GAAG;AACb,MAAI,OAAO;AACX,MAAI,OAAO;AACP,YAAQ,GAAG;AACf,MAAI,OAAO;AACP,YAAQ,GAAG;AACf,MAAI,OAAO;AACP,YAAQ,GAAG;AACf,QAAM,SAAS,GAAG,OAAO,UAAU,SAAS;AAC5C,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,MAAM,OAAO,UAAU,OAAO,OAAO,OAAO;AAClD,QAAM,MAAM,OAAO,eAAe,OAAO,OAAO,OAAO;AAEvD,KAAG,gBAAgB,GAAG,kBAAkB,GAAG;AAC3C,KAAG,gBAAgB,GAAG,kBAAkB,GAAG;AAC3C,KAAG,gBAAgB,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,MAAM;AACvF,KAAG,gBAAgB,GAAG,aAAa,IAAI;AAC3C;;;AC1BO,SAAS,eAAe,IAA4B,QAAmC;AAC1F,QAAM,SAAS,GAAG,OAAO,IAAI;AAC7B,QAAM,QAAQ,GAAG,OAAO,SAAS,aAAa;AAC9C,QAAM,SAAS,GAAG,aAAa;AAC/B,KAAG,WAAW,QAAQ,MAAM;AAC5B,MAAI,cAAc,QAAQ;AACtB,OAAG,WAAW,QAAQ,OAAO,UAAU,KAAK;AAAA,EAChD,OAAO;AACH,OAAG,WAAW,QAAQ,OAAO,SAAS,KAAK;AAAA,EAC/C;AACA,KAAG,WAAW,QAAQ,IAAI;AAC1B,SAAO;AACX;AAEO,SAAS,eAAe,IAA4B,QAAsB;AAC7E,QAAM,SAAS,GAAG,OAAO,IAAI;AAC7B,QAAM,YAAY,OAAO,oBAAoB;AAC7C,QAAM,eAAe,OAAO,iBAAiB;AAC7C,QAAM,MAAM,OAAO;AACnB,QAAM,UAAU,YAAY,OAAO,GAAG,IAAI,MAAM,IAAI,WAAW,GAAG;AAClE,KAAG,WAAW,QAAQ,OAAO,YAAY;AACzC,KAAG,cAAc,QAAQ,cAAc,SAAS,WAAW,OAAO,QAAQ;AAC1E,KAAG,WAAW,QAAQ,IAAI;AAC9B;;;ACxBO,SAAS,QAAQ,IAA4B,QAAqB;AACrE,QAAM,EAAE,KAAK,IAAI;AACjB,UAAQ,MAAM;AAAA,IACV,KAAK,eAAe;AAChB,UAAI,OAAO;AACX,UAAI,OAAO,SAAS,QAAW;AAC3B,WAAG,WAAW,GAAG,OAAO,KAAK;AAC7B,gBAAQ,GAAG;AAAA,MACf;AACA,UAAI,OAAO,SAAS,QAAW;AAC3B,WAAG,WAAW,OAAO,KAAK;AAC1B,gBAAQ,GAAG;AAAA,MACf;AACA,UAAI,OAAO,WAAW,QAAW;AAC7B,WAAG,aAAa,OAAO,OAAO;AAC9B,gBAAQ,GAAG;AAAA,MACf;AACA,UAAI,MAAM;AACN,WAAG,MAAM,IAAI;AAAA,MACjB;AACA;AAAA,IACJ;AAAA,IACA,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,iBAAiB;AAClB,YAAM,EAAE,WAAW,IAAI;AACvB,YAAM,QAAQ,WAAW,SAAS,OAAO,QAAQ;AACjD,YAAM,UAAU,aAAa,SAAS,OAAO,UAAU;AACvD,SAAG,cAAc,GAAG,IAAI,GAAG,cAAc,GAAG,OAAO,OAAO;AAC1D;AAAA,IACJ;AAAA,IACA,KAAK,SAAS;AACV,YAAM,EAAE,WAAW,IAAI;AACvB,YAAM,OAAO,OAAO,QAAQ;AAC5B,YAAM,SAAS,GAAG;AAClB,YAAM,QAAQ,OAAO,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC;AACzC,cAAQ,MAAM;AAAA,QACV,KAAK;AAAS,aAAG,cAAc,QAAQ,cAAc,GAAG,KAAK;AAAG;AAAA,QAChE,KAAK;AAAO,aAAG,cAAc,QAAQ,cAAc,GAAG,KAAK;AAAG;AAAA,QAC9D,KAAK;AAAQ,aAAG,eAAe,QAAQ,cAAc,GAAG,KAAK;AAAG;AAAA,QAChE;AAAS,+BAAqB,IAAI;AAAA,MACtC;AACA;AAAA,IACJ;AAAA,IACA;AAAS,4BAAsB,IAAI;AAAA,EACvC;AACJ;AAmCA,SAAS,sBAAsB,OAAc;AACzC,QAAM,IAAI,MAAM,wBAAwB,QAAQ;AACpD;AAEA,SAAS,qBAAqB,OAAc;AACxC,QAAM,IAAI,MAAM,6BAA6B,QAAQ;AACzD;;;ACvFO,SAAS,aAAa,IAA4B,UAAU,OAAO;AACtE,MAAI,MAAM,gBAAgB,IAAI,EAAE;AAChC,MAAI,CAAC,OAAO,SAAS;AACjB,UAAM,oBAAoB,EAAE;AAC5B,oBAAgB,IAAI,IAAI,GAAG;AAAA,EAC/B;AACA,SAAO;AACX;AAEA,SAAS,oBAAoB,IAA4B;AACrD,SAAO;AAAA,IACH,kBAAkB,GAAG,aAAa,wBAAwB;AAAA;AAAA,IAC1D,uBAAuB,GAAG,aAAa,6BAA6B;AAAA,IACpE,aAAa,GAAG,aAAa,oBAAoB;AAAA,IACjD,WAAW,GAAG,aAAa,kBAAkB;AAAA,IAC7C,oBAAoB,GAAG,aAAa,0BAA0B;AAAA,IAC9D,oBAAoB,GAAG,aAAa,iCAAiC;AAAA,IACrE,iBAAiB,GAAG,aAAa,wBAAwB;AAAA,EAC7D;AACJ;AAEA,IAAM,kBAAkB,oBAAI,QAA8C;;;ACnBnE,SAAS,OAAO,IAA4B,QAAoC;AACnF,MAAI,gBAAgB;AACpB,QAAM,OAAO,OAAO,QAAQ;AAC5B,QAAM,gBAAgB,GAAG,IAAI;AAC7B,MAAI,YAAY,MAAM,GAAG;AACrB,UAAM,EAAE,UAAU,IAAI,aAAa,EAAE;AACrC,QAAI,WAAW;AACX,YAAM,EAAE,WAAW,QAAQ,aAAa,IAAI;AAC5C,cAAQ,OAAO,MAAM;AAAA,QACjB,KAAK;AACD,gBAAM,EAAE,YAAY,aAAa,IAAI;AACrC,oBAAU,qBAAqB,eAAe,YAAY,gBAAgB,GAAG,QAAQ,gBAAgB,GAAG,SAAS;AACjH;AAAA,QACJ,KAAK;AACD,gBAAM,EAAE,aAAa,mBAAmB,UAAU,IAAI;AACtD,oBAAU,uBAAuB,eAAe,QAAQ,gBAAgB,GAAG,GAAG,SAAS,GAAG,aAAa,qBAAqB,GAAG,SAAS;AACxI;AAAA,MACR;AACA,YAAM,OAAO,gBAAgB;AAC7B,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,yBAAiB,kBAAkB,OAAO,IAAI,IAAI,GAAG,IAAI;AAAA,MAC7D;AAAA,IACJ,OAAO;AACH,cAAQ,KAAK,6BAA6B;AAAA,IAC9C;AAAA,EACJ,OAAO;AACH,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,YAAY,MAAM,GAAG;AACrB,YAAM,EAAE,cAAc,IAAI;AAC1B,sBAAgB,kBAAkB,OAAO,IAAI,IAAI;AACjD,UAAI,WAAW,MAAM,GAAG;AACpB,WAAG,sBAAsB,eAAe,OAAO,GAAG,OAAO,SAAS,GAAG,OAAO,cAAc,GAAG,aAAa;AAAA,MAC9G,OAAO;AACH,WAAG,oBAAoB,eAAe,OAAO,SAAS,GAAG,OAAO,aAAa;AAAA,MACjF;AAAA,IACJ,OAAO;AACH,sBAAgB,kBAAkB,OAAO,IAAI;AAC7C,UAAI,WAAW,MAAM,GAAG;AACpB,YAAI,QAAQ,MAAM,GAAG;AACjB,aAAG,kBAAkB,eAAe,OAAO,UAAU,OAAO,UAAU,OAAO,GAAG,OAAO,SAAS,GAAG,OAAO,cAAc,CAAC;AAAA,QAC7H,OAAO;AACH,aAAG,aAAa,eAAe,OAAO,GAAG,OAAO,SAAS,GAAG,OAAO,cAAc,CAAC;AAAA,QACtF;AAAA,MACJ,OAAO;AACH,WAAG,WAAW,eAAe,OAAO,SAAS,GAAG,KAAK;AAAA,MACzD;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,iBAAiB,GAAG,WAAW;AAC/B,WAAO,EAAE,QAAQ,GAAG,OAAO,GAAG,WAAW,cAAc;AAAA,EAC3D,WAAW,iBAAiB,GAAG,OAAO;AAClC,WAAO,EAAE,QAAQ,GAAG,OAAO,eAAe,WAAW,EAAE;AAAA,EAC3D,OAAO;AACH,WAAO,EAAE,QAAQ,eAAe,OAAO,GAAG,WAAW,EAAE;AAAA,EAC3D;AACJ;AAEA,SAAS,kBAAkB,aAAqB,eAAuB;AACnE,UAAQ,eAAe;AAAA,IACnB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AAAA,IACL,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB;AACI,aAAO;AAAA,EACf;AACJ;AAEA,SAAS,YAAY,QAAuF;AACxG,SAAO,mBAAmB,UAAU,OAAO,iBAAiB;AAChE;AAEA,SAAS,WAAW,QAAwI;AACxJ,SAAO,eAAe,UAAU,OAAO,aAAa;AACxD;AAEA,SAAS,QAAQ,QAAuD;AACpE,SAAO,WAAW,UAAU,SAAS,UAAU,OAAO,SAAS;AACnE;AAEA,SAAS,YAAY,QAAuF;AACxG,SAAO,eAAe,UAAU,OAAO,aAAa;AACxD;;;AC1FO,SAAS,SAAS,IAA4B;AACjD,MAAI,MAAM,YAAY,IAAI,EAAE;AAC5B,MAAI,CAAC,KAAK;AACN,UAAM,gBAAgB,EAAE;AACxB,gBAAY,IAAI,IAAI,GAAG;AAAA,EAC3B;AACA,SAAO;AACX;AAEA,IAAM,cAAc,oBAAI,QAA0C;AAElE,SAAS,gBAAgB,IAA4B;AACjD,QAAM,QAAQ;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAGA,QAAM,SAAS,CAAC;AAChB,aAAW,QAAQ,OAAO;AACtB,WAAO,IAAI,IAAI,GAAG,aAAa,GAAG,IAAI,CAAC;AAAA,EAC3C;AACA,SAAO;AACX;;;ACzDO,SAAS,oBAAoB,IAA4B,QAA6C;AACzG,QAAM,cAAc,GAAG,kBAAkB;AACzC,QAAM,SAAS,SAAS,EAAE;AAC1B,UAAQ,OAAO,OAAO,MAAM,UAAU,OAAO,qBAAqB;AAClE,KAAG,gBAAgB,GAAG,aAAa,WAAW;AAE9C,WAAS,KAAK,SAA6B,YAAoB;AAC3D,UAAM,SAAS,GAAG,QAAQ,IAAI;AAC9B,QAAI,oBAAoB,OAAO,GAAG;AAC9B,YAAM,EAAE,QAAQ,IAAI;AACpB,UAAI,QAAQ,UAAU,QAAW;AAC7B,cAAM,YAAY,GAAG,QAAQ,aAAa,YAAY;AACtD,WAAG,qBAAqB,QAAQ,YAAY,WAAW,SAAS,QAAQ,SAAS,CAAC;AAAA,MACtF,OAAO;AACH,WAAG,wBAAwB,QAAQ,YAAY,SAAS,QAAQ,SAAS,GAAG,QAAQ,KAAK;AAAA,MAC7F;AAAA,IACJ,OAAO;AACH,YAAM,EAAE,aAAa,IAAI;AACzB,SAAG,wBAAwB,QAAQ,YAAY,GAAG,cAAc,YAAY;AAAA,IAChF;AAAA,EACJ;AACA,MAAI,OAAO;AACP,SAAK,OAAO,OAAO,GAAG,gBAAgB;AAC1C,MAAI,OAAO;AACP,SAAK,OAAO,SAAS,GAAG,kBAAkB;AAC9C,MAAI,IAAI,GAAG;AACX,aAAW,SAAS,OAAO,OAAO;AAC9B,QAAI,OAAO;AACP,WAAK,OAAO,CAAC;AAAA,IACjB;AACA;AAAA,EACJ;AAEA,QAAM,QAAQ;AACd,MAAI,OAAO;AACP,UAAM,SAAS,GAAG,uBAAuB,GAAG,WAAW;AACvD,YAAQ,QAAQ;AAAA,MACZ,KAAK,GAAG;AACJ;AAAA,MACJ,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACrD,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,0BAA0B;AAAA,MAC9C,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACzD;AACI,cAAM,IAAI,MAAM,4BAA4B;AAAA,IACpD;AAAA,EACJ;AAEA,KAAG,gBAAgB,GAAG,aAAa,IAAI;AACvC,SAAO;AACX;AAEO,SAAS,wBAAwB,IAA4B,QAAqC;AACrG,MAAI,CAAC,OAAO,aAAa;AACrB;AAAA,EACJ;AACA,QAAM,cAAwB,CAAC;AAC/B,MAAI,OAAO,SAAS,OAAO,SAAS;AAChC,gBAAY,KAAK,GAAG,wBAAwB;AAAA,EAChD,WAAW,OAAO,OAAO;AACrB,gBAAY,KAAK,GAAG,gBAAgB;AAAA,EACxC,WAAW,OAAO,SAAS;AACvB,gBAAY,KAAK,GAAG,kBAAkB;AAAA,EAC1C;AACA,MAAI,IAAI;AACR,aAAW,cAAc,OAAO,OAAO;AACnC,QAAI,YAAY;AACZ,kBAAY,KAAK,GAAG,oBAAoB,CAAC;AAAA,IAC7C;AACA;AAAA,EACJ;AACA,QAAM,EAAE,aAAa,KAAK,IAAI;AAC9B,QAAM,SAAS,GAAG,IAAI;AACtB,KAAG,gBAAgB,QAAQ,WAAW;AACtC,KAAG,sBAAsB,QAAQ,WAAW;AAC5C,KAAG,gBAAgB,QAAQ,IAAI;AACnC;AAEA,SAAS,oBAAoB,YAAyE;AAClG,SAAO,OAAO,cAAc,YAAY,aAAa;AACzD;;;ACpBO,SAAS,kBAAkB,MAAc;AAC5C,UAAQ,MAAM;AAAA,IACV,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,EAGf;AACA,QAAM,IAAI,MAAM,wBAAwB,OAAO;AACnD;;;AC7FO,UAAU,mBAAmB,IAA+D;AAC/F,MAAI,aAAa,EAAE,EAAE,WAAW;AAC5B,UAAM;AAAA,MACF,MAAM;AAAA,MACN,WAAW;AAAA,IACf;AAAA,EACJ;AACJ;AAGO,SAAS,UAAU,IAA4B,QAAmC;AACrF,QAAM,SAAS,OAAO;AACtB,QAAM,SAAS,GAAG,aAAa,GAAG,OAAO,IAAI,CAAC;AAC9C,KAAG,aAAa,QAAQ,MAAM;AAC9B,KAAG,cAAc,MAAM;AACvB,SAAO;AACX;AAIO,SAAS,qBAAqB,IAA4B,QAA4B;AACzF,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,aAAa,aAAa,IAAI,MAAM;AAC1C,QAAM,SAAS,UAAU,IAAI,EAAE,MAAM,iBAAiB,QAAQ,aAAa,OAAO,aAAa,CAAC;AAChG,QAAM,WAAW,UAAU,IAAI,EAAE,MAAM,mBAAmB,QAAQ,cAAc,OAAO,kBAAkB,kBAAkB,CAAC;AAC5H,QAAM,UAAU,GAAG,cAAc;AACjC,KAAG,aAAa,SAAS,MAAM;AAC/B,KAAG,aAAa,SAAS,QAAQ;AACjC,SAAO,EAAE,SAAS,QAAQ,SAAS;AACvC;AAEO,SAAS,eAAe,IAA4B,QAAiD;AACxG,QAAM,EAAE,SAAS,QAAQ,SAAS,IAAI;AACtC,MAAI,GAAG,oBAAoB,SAAS,GAAG,WAAW,KAAK,GAAG,cAAc,GAAG;AACvE,YAAQ,OAAO,GAAG,oBAAoB,SAAS,GAAG,gBAAgB,KAAK,CAAC;AACxE,OAAG,aAAa,SAAS,MAAM;AAC/B,OAAG,aAAa,SAAS,QAAQ;AACjC,OAAG,aAAa,MAAM;AACtB,OAAG,aAAa,QAAQ;AAAA,EAC5B,OAAO;AACH,UAAM,SAAS,EAAE,MAAM,GAAG,kBAAkB,OAAO,GAAG,QAAQ,GAAG,iBAAiB,MAAM,GAAG,UAAU,GAAG,iBAAiB,QAAQ,EAAE;AACnI,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,gBAAgB,IAA4B,QAAuB;AAC/E,QAAM,EAAE,OAAO,mBAAmB,qBAAqB,iBAAiB,aAAa,YAAY,IAAI;AACrG,QAAM,aAAuB,CAAC;AAC9B,MAAI,aAAa,EAAE,EAAE,WAAW;AAC5B,eAAW,KAAK,4CAA4C;AAAA,EAChE;AACA,QAAM,gBAAgB;AAAA,EAAoB,WAAW,KAAK,EAAE;AAAA;AAAA;AAAA;AAC5D,QAAM,SAAS,eAAe;AAC9B,QAAM,UAAU,OAAO,IAAI,UAAQ,WAAW;AAAA,CAAQ,GAAG,KAAK,EAAE,KAAK;AACrE,QAAM,SAAS,eAAe;AAC9B,QAAM,KAAK,SAAS,UAAU,SAAS,OAAO;AAC9C,QAAM,KAAK,SAAS,UAAU,UAAU,OAAO,kBAAkB;AACjE,QAAM,eAAe,cAAc,IAAI,iBAAiB,EAAE;AAC1D,QAAM,iBAAiB,cAAc,IAAI,mBAAmB,EAAE;AAC9D,QAAM,UAAU,GAAG,cAAc;AAEjC,KAAG,aAAa,SAAS,YAAY;AACrC,KAAG,aAAa,SAAS,cAAc;AAEvC,MAAI,mBAAmB;AACnB,UAAM,EAAE,UAAU,WAAW,IAAI;AACjC,OAAG,0BAA0B,SAAS,UAAU,GAAG,UAAU,CAAC;AAAA,EAClE;AAGA,KAAG,YAAY,OAAO;AACtB,KAAG,gBAAgB,OAAO;AAE1B,KAAG,aAAa,SAAS,YAAY;AACrC,KAAG,aAAa,SAAS,cAAc;AACvC,KAAG,aAAa,YAAY;AAC5B,KAAG,aAAa,cAAc;AAE9B,MAAI,CAAC,GAAG,oBAAoB,SAAS,GAAG,WAAW,KAAK,CAAC,GAAG,cAAc;AACtE,UAAM,IAAI,MAAM;AAAA,EAAsC,GAAG,kBAAkB,OAAO,GAAG;AAEzF,KAAG,WAAW,OAAO;AAErB,MAAI,qBAAqB;AACrB,QAAI,MAAM;AACV,eAAW,QAAQ,qBAAqB;AACpC,UAAI,MAAM;AACN,cAAM,aAAa,GAAG,qBAAqB,SAAS,IAAI;AACxD,YAAI,cAAc,GAAG,eAAe;AAChC,aAAG,oBAAoB,SAAS,YAAY,GAAG;AAAA,QACnD,OAAO;AACH,kBAAQ,KAAK,sCAAsC,OAAO;AAAA,QAC9D;AAAA,MACJ;AACA;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,iBAAiB;AACjB,QAAI,IAAI;AACR,eAAW,QAAQ,iBAAiB;AAChC,YAAM,WAAW,GAAG,mBAAmB,SAAS,IAAI;AACpD,SAAG,UAAU,UAAU,GAAG;AAAA,IAC9B;AAAA,EACJ;AAEA,KAAG,WAAW,IAAI;AAClB,SAAO;AACX;AAEA,SAAS,cAAc,IAA4B,MAA2C,QAA6B;AACvH,QAAM,SAAS,GAAG,aAAa,GAAG,IAAI,CAAC;AACvC,KAAG,aAAa,QAAQ,MAAM;AAC9B,KAAG,cAAc,MAAM;AACvB,MAAI,CAAC,GAAG,mBAAmB,QAAQ,GAAG,cAAc,KAAK,CAAC,GAAG,cAAc,GAAG;AAC1E,UAAM,WAAW,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,kBAAkB;AACtD,UAAM,WAAW,GAAG,iBAAiB,MAAM;AAC3C,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAAuB,UAAU;AAAA,EACjF;AACA,SAAO;AACX;AAEA,SAAS,oBAAoB,IAAgD;AACzE,SAAO;AAAA,IACH,SAAS;AAAA,IACT,YAAY,CAAC,GAAG,mBAAmB,EAAE,CAAC;AAAA,IACtC,mBAAmB;AAAA,MACf,OAAO;AAAA,MACP,KAAK;AAAA,MACL,WAAW;AAAA,MACX,aAAa;AAAA,MACb,WAAW;AAAA,MACX,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,sBAAsB;AAAA,MACtB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,iBAAiB;AAAA,IACrB;AAAA,IACA,OAAO,CAAC;AAAA,IACR,SAAS,CAAC;AAAA,IACV,aAAa;AAAA,EACjB;AACJ;AAEA,SAAS,aAAa,IAA4B,QAAkE;AAChH,MAAI,CAAC;AACD,WAAO;AACX,MAAI,OAAO,UAAU;AACjB,WAAO;AACX,QAAM,IAAI,EAAE,GAAG,oBAAoB,EAAE,GAAG,GAAG,OAAO;AAClD,QAAM,UAAU,YAAY,EAAE;AAAA;AAC9B,QAAM,aAAa,EAAE,WAAW,IAAI,SAAO,cAAc,IAAI,UAAU,IAAI;AAAA,CAAa,EAAE,KAAK,EAAE;AACjG,QAAM,aAAa,OAAO,QAAQ,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC,MAAM,SAAS,MAAO,aAAa,cAAc;AAAA,CAAU,EAAE,KAAK,EAAE;AACjI,QAAM,QAAQ,EAAE,MAAM,IAAI,UAAQ,WAAW;AAAA,CAAQ,EAAE,KAAK,EAAE;AAC9D,QAAM,UAAU,EAAE,QAAQ,IAAI,SAAO,WAAW,IAAI,QAAQ,IAAI;AAAA,CAAS,EAAE,KAAK,EAAE;AAClF,QAAM,SAAS,EAAE;AACjB,QAAM,SAAS,UAAU,aAAa,aAAa,QAAQ,UAAU;AACrE,SAAO;AACX;;;ACzKO,SAAS,aAAa,IAA4B,QAA0B;AAC/E,QAAM,IAAI,OAAO,KAAK;AACtB,QAAM,IAAI,OAAO,KAAK;AACtB,QAAM,QAAQ,OAAO,SAAS,GAAG;AACjC,QAAM,SAAS,OAAO,UAAU,GAAG;AACnC,KAAG,gBAAgB,GAAG,aAAa,OAAO,WAAW;AACrD,aAAW,EAAE,QAAQ,YAAY,QAAQ,KAAK,KAAK,OAAO,SAAS;AAC/D,OAAG,WAAW,GAAG,mBAAmB,MAAM;AAC1C,OAAG,WAAW,GAAG,UAAU,CAAC;AAC5B,OAAG,WAAW,GAAG,GAAG,OAAO,QAAQ,GAAG,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC9D;AAEA,KAAG,gBAAgB,GAAG,aAAa,IAAI;AACvC,KAAG,WAAW,GAAG,mBAAmB,IAAI;AACxC,KAAG,WAAW,GAAG,IAAI;AACzB;;;ACbO,SAAS,qBAAqB,IAA4B,QAA+C;AAC5G,QAAM,SAAS,SAAS,EAAE;AAC1B,QAAM,SAAS,GAAG,mBAAmB;AACrC,QAAM,EAAE,gBAAgB,OAAO,OAAO,IAAI;AAC1C,QAAM,UAAU,OAAO,WAAW,SAAY,IAAI,OAAO,YAAY,QAAQ,OAAO,cAAc,OAAO;AACzG,UAAQ,OAAO,WAAW,OAAO,WAAW;AAC5C,KAAG,iBAAiB,GAAG,cAAc,MAAM;AAC3C,MAAI,OAAO,YAAY,QAAW;AAC9B,OAAG,oBAAoB,GAAG,cAAc,GAAG,cAAc,GAAG,OAAO,MAAM;AAAA,EAC7E,OAAO;AACH,OAAG,+BAA+B,GAAG,cAAc,SAAS,GAAG,cAAc,GAAG,OAAO,MAAM;AAAA,EACjG;AACA,KAAG,iBAAiB,GAAG,cAAc,IAAI;AACzC,SAAO;AACX;;;ACVO,SAAS,gBAAgB,IAA4B,QAAqC;AAC7F,QAAM,UAAU,GAAG,cAAc;AACjC,KAAG,YAAY,GAAG,OAAO;AACzB,QAAM,EAAE,oBAAoB,qBAAqB,QAAQ,QAAQ,MAAM,iBAAiB,YAAY,IAAI;AACxG,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,oBAAoB,GAAG,kBAAkB,CAAC;AAC/E,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,oBAAoB,GAAG,mBAAmB,CAAC;AAChF,MAAI,MAAM;AACN,UAAM,CAAC,GAAG,GAAG,CAAC,IAAI;AAClB,OAAG,kBAAkB,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAC;AACtD,OAAG,kBAAkB,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAC;AACtD,QAAI;AACA,SAAG,kBAAkB,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAC;AAAA,EAC9D;AACA,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,iBAAiB,MAAM;AAC5D,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,iBAAiB,MAAM;AAC5D,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,sBAAsB,GAAG,eAAe,CAAC;AAC9E,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,sBAAsB,GAAG,WAAW,CAAC;AAC1E,SAAO;AACX;;;AC3BO,SAAS,QAAQ,IAA4B,QAA4B;AAC5E,MAAI,CAAC,QAAQ;AACT,UAAM,SAAS,SAAS,EAAE;AAC1B,aAAS,eAAe,MAAM;AAAA,EAClC;AAEA,QAAM,EAAE,OAAO,MAAM,OAAO,SAAS,QAAQ,SAAS,SAAS,aAAa,mBAAmB,aAAa,mBAAmB,UAAU,UAAU,eAAe,IAAI;AAEtK,WAAS,QAAQ,KAAmD,OAA4B;AAC5F,QAAI,UAAU,QAAW;AACrB,UAAI,OAAO;AACP,WAAG,OAAO,GAAG,GAAG,CAAC;AAAA,MACrB,OAAO;AACH,WAAG,QAAQ,GAAG,GAAG,CAAC;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS2C,KAAO,QAA+D,QAAW,kBAAuB,MAA4B;AACzI,QAAI,KAAK,KAAK,SAAO,OAAQ,GAAG,MAAM,MAAS,GAAG;AAC9C,YAAM,OAAO,KAAK,IAAI,SAAO;AACzB,cAAM,IAAI,OAAQ,GAAG,KAAK,cAAc,GAAG;AAC3C,eAAO,OAAO,KAAK,WAAW,GAAG,CAAiC,IAAI;AAAA,MAC1E,CAAC;AACD,MAAW,OAAQ,MAAM,IAAI,IAAI;AAAA,IACrC;AAAA,EACJ;AAEA,UAAQ,UAAU,OAAO,YAAY;AACrC,UAAQ,sBAAsB,OAAO,iBAAiB;AACtD,EAAAA,KAAI,CAAC,SAAwD;AAAE,OAAG,UAAU,GAAG,IAAI;AAAA,EAAG,GAAG,QAAQ,WAAW;AAC5G,EAAAA,KAAI,UAAQ,GAAG,SAAS,KAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,MAAM,GAAG,QAAQ,kBAAkB,UAAU;AAEhH,MAAI,OAAO;AACP,UAAM,gBAAgB,iBAAiB;AACvC,UAAM,EAAE,mBAAmB,IAAI,aAAa,EAAE;AAC9C,QAAI,oBAAoB;AAEpB,UAAI,MAAM,QAAQ;AACd,2BAAmB,WAAW,GAAG,OAAO,CAAC;AAAA,MAC7C,OAAO;AACH,2BAAmB,YAAY,GAAG,OAAO,CAAC;AAAA,MAC9C;AACA,MAAAA,KAAI,CAAC,SAAS,cAAc,mBAAmB,0BAA0B,GAAG,SAAS,SAAS,GAAG,OAAO,eAAe,eAAe,eAAe;AACrJ,MAAAA,KAAI,CAAC,QAAQ,QAAQ,UAAU,aAAa,mBAAmB,sBAAsB,GAAG,QAAQ,QAAQ,UAAU,QAAQ,GAAG,OAAO,eAAe,UAAU,UAAU,YAAY,UAAU;AAAA,IACjM,OAAO;AACH,cAAQ,SAAS,MAAM,MAAM;AAC7B,MAAAA,KAAI,GAAG,uBAAuB,OAAO,eAAe,eAAe,eAAe;AAClF,MAAAA,KAAI,GAAG,mBAAmB,OAAO,eAAe,UAAU,UAAU,YAAY,UAAU;AAAA,IAC9F;AACA,IAAAA,KAAI,CAAC,SAAoD;AAAE,SAAG,WAAW,GAAG,IAAI;AAAA,IAAG,GAAG,OAAO,eAAe,OAAO;AAAA,EACvH;AAEA,MAAI,MAAM;AACN,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,aAAa,KAAK,MAAM;AAChC,IAAAA,KAAI,GAAG,UAAU,MAAM,eAAe,MAAM;AAC5C,IAAAA,KAAI,GAAG,WAAW,MAAM,eAAe,WAAW;AAAA,EACtD;AAEA,MAAI,OAAO;AACP,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,cAAc,MAAM,IAAI;AAChC,IAAAA,KAAI,GAAG,WAAW,OAAO,eAAe,MAAM;AAC9C,IAAAA,KAAI,GAAG,WAAW,OAAO,eAAe,WAAW;AACnD,IAAAA,KAAI,CAAC,UAAqC,GAAG,WAAW,GAAG,KAAK,GAAG,OAAO,eAAe,OAAO;AAAA,EACpG;AAEA,MAAI,SAAS;AACT,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,uBAAuB,QAAQ,UAAU;AACjD,IAAAA,KAAI,GAAG,eAAe,SAAS,eAAe,gBAAgB,aAAa;AAAA,EAC/E;AAEA,MAAI,QAAQ;AACR,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,4BAA4B,OAAO,eAAe;AAC1D,YAAQ,mBAAmB,OAAO,QAAQ;AAC1C,IAAAA,KAAI,GAAG,gBAAgB,QAAQ,eAAe,iBAAiB,gBAAgB;AAAA,EACnF;AAEA,MAAI,SAAS;AACT,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,gBAAgB,QAAQ,IAAI;AACpC,IAAAA,KAAI,UAAQ,GAAG,QAAQ,KAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,MAAM,GAAG,SAAS,eAAe,KAAK;AAAA,EAC5G;AAEA,MAAI,SAAS;AACT,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,gBAAgB,QAAQ,IAAI;AACpC,IAAAA,KAAI,CAAC,MAAM,KAAK,SAAS,GAAG,oBAAoB,GAAG,OAAO,MAAM,KAAK,IAAI,GAAG,SAAS,eAAe,QAAQ,OAAO,WAAW;AAC9H,IAAAA,KAAI,CAAC,MAAM,KAAK,SAAS,GAAG,oBAAoB,GAAG,MAAM,MAAM,KAAK,IAAI,GAAG,SAAS,eAAe,YAAY,WAAW,eAAe;AAAA,EAC7I;AAEA,MAAI,sBAAsB,QAAW;AACjC,OAAG,gBAAgB,iBAAiB;AAAA,EACxC;AAEA,MAAI,gBAAgB,QAAW;AAC3B,OAAG,gBAAgB,GAAG,aAAa,WAAW;AAAA,EAClD;AAEA,MAAI,aAAa;AACb,OAAG,YAAY,YAAY,IAAI,OAAK,GAAG,CAAE,CAAC,CAAC;AAAA,EAC/C;AAEA,QAAM,EAAE,QAAQ,IAAI;AACpB,MAAI,YAAY,QAAW;AACvB,OAAG,WAAW,OAAO;AAAA,EACzB;AAEA,MAAI,mBAAmB;AACnB,aAAS,IAAI,GAAG,IAAI,kBAAkB,QAAQ,KAAK;AAC/C,YAAM,WAAW,kBAAkB,CAAC;AACpC,UAAI,UAAU;AACV,cAAM,EAAE,MAAM,OAAO,IAAI;AACzB,WAAG,eAAe,OAAO,EAAE,GAAG,MAAM;AAAA,MACxC;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,UAAU;AACV,UAAM,WAAW,GAAG;AACpB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YAAM,UAAU,SAAS,CAAC;AAC1B,YAAM,UAAU,SAAS,WAAW;AACpC,SAAG,cAAc,WAAW,CAAC;AAC7B,SAAG,YAAY,GAAG,SAAS,QAAQ,YAAY,GAAG,OAAO;AACzD,YAAM,UAAU,SAAS,WAAW;AACpC,SAAG,YAAY,GAAG,OAAO;AACzB,SAAG,UAAU,SAAS,WAAW,MAAM,CAAC;AAAA,IAC5C;AACA,OAAG,cAAc,QAAQ;AAAA,EAC7B;AAEA,MAAI,UAAU;AACV,QAASC,YAAT,SAAkB,SAA0D;AACxE,aAAO,QAAQ,KAAK,WAAW,QAAQ;AAAA,IAC3C,GACSC,YAAT,SAAkB,SAA0D;AACxE,aAAO,QAAQ,KAAK,WAAW,GAAG;AAAA,IACtC;AALS,QAAAD,uBAGA,WAAAC;AAGT,eAAW,WAAW,UAAU;AAC5B,UAAID,UAAS,OAAO,GAAG;AACnB,cAAM,aAAa,UAAU,QAAQ;AACrC,WAAG,UAAU,EAAE,QAAQ,UAAU,QAAQ,aAAa,OAAO,QAAQ,KAAK;AAAA,MAC9E,WAAWC,UAAS,OAAO,GAAG;AAC1B,cAAM,aAAa,UAAU,QAAQ;AACrC,WAAG,UAAU,EAAE,QAAQ,UAAU,QAAQ,KAAK;AAAA,MAClD,OAAO;AACH,cAAM,aAAa,UAAU,QAAQ;AACrC,WAAG,UAAU,EAAE,QAAQ,UAAU,QAAQ,KAAK;AAAA,MAClD;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,gBAAgB;AAChB,QAAI,MAAM;AACV,eAAW,wBAAwB,gBAAgB;AAC/C,UAAI,yBAAyB;AACzB;AACJ,UAAI,4BAA4B,oBAAoB,GAAG;AACnD,cAAM,EAAE,QAAQ,YAAY,SAAS,IAAI;AACzC,WAAG,gBAAgB,GAAG,gBAAgB,KAAK,QAAQ,YAAY,QAAQ;AAAA,MAC3E,OAAO;AACH,WAAG,eAAe,GAAG,gBAAgB,KAAK,oBAAoB;AAAA,MAClE;AACA;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,SAAS,eAAe,QAAyB;AACpD,SAAO;AAAA,IACH,GAAG;AAAA,IACH,aAAa,CAAC,MAAM;AAAA,IACpB,mBAAmB,MAA+B,OAAO,kBAAkB,EAAE,KAAK,EAAE,MAAM,MAAM,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;AAAA,IACtH,UAAU,MAA6B,OAAO,gCAAgC,EAAE,KAAK,IAAI;AAAA,EAC7F;AACJ;AAwJA,SAAS,4BAA4B,QAA6F;AAC9H,SAAO,UAAU,QAAQ,gBAAgB,UAAU,cAAc;AACrE;AAEA,IAAM,mBAAmB;AAAA,EACrB,OAAO;AAAA,IACH,QAAQ;AAAA;AAAA,IACR,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA;AAAA,IAClB,UAAU;AAAA;AAAA,IACV,QAAQ;AAAA;AAAA,IACR,eAAe;AAAA;AAAA,IACf,aAAa;AAAA;AAAA,IACb,UAAU;AAAA;AAAA,IACV,QAAQ;AAAA;AAAA,EACZ;AAAA,EAEA,MAAM;AAAA,IACF,QAAQ;AAAA;AAAA,IACR,MAAM;AAAA;AAAA,IACN,WAAW;AAAA;AAAA,EACf;AAAA,EAEA,OAAO;AAAA,IACH,MAAM;AAAA;AAAA,IACN,MAAM;AAAA;AAAA,IACN,WAAW;AAAA;AAAA,IACX,OAAO,CAAC,GAAG,CAAC;AAAA;AAAA,EAChB;AAAA,EAEA,cAAc;AAAA;AAAA,EAEd,WAAW,CAAC,MAAM,MAAM,MAAM,IAAI;AAAA,EAElC,SAAS;AAAA,IACL,YAAY;AAAA;AAAA,IACZ,cAAc;AAAA;AAAA,IACd,aAAa;AAAA;AAAA,EACjB;AAAA,EAEA,QAAQ;AAAA,IACJ,iBAAiB;AAAA;AAAA,IACjB,UAAU;AAAA;AAAA,IACV,eAAe;AAAA;AAAA,IACf,gBAAgB;AAAA;AAAA,EACpB;AAAA,EAEA,SAAS;AAAA,IACL,MAAM;AAAA;AAAA,IACN,MAAM;AAAA;AAAA,IACN,WAAW;AAAA;AAAA,IACX,KAAK;AAAA;AAAA,IACL,UAAU;AAAA;AAAA,IACV,eAAe;AAAA;AAAA,IACf,SAAS;AAAA;AAAA,EACb;AAAA,EAEA,UAAU;AAAA;AAAA,IACN,GAAG;AAAA,IACH,GAAG;AAAA,IACH,OAAO;AAAA,IACP,QAAQ;AAAA,EACZ;AAAA,EAEA,SAAS;AAAA,IACL,MAAM;AAAA;AAAA,IACN,KAAK;AAAA;AAAA,MACD,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,mBAAmB;AAAA;AAAA,EAEnB,aAAa;AAAA,EACb,mBAAmB;AAAA,EAEnB,SAAS;AAAA,EACT,UAAU,CAAC;AAAA,EACX,gBAAgB,CAAC;AAAA;AACrB;;;AC5ZO,SAAS,gBAAgB,IAA4B,QAAuB;AAC/E,QAAM,UAAU,GAAG,cAAc;AACjC,QAAM,QAAQ,OAAO,SAAS,OAAO,MAAM;AAC3C,QAAM,SAAS,OAAO,UAAU,OAAO,MAAM;AAC7C,QAAM,SAAS,GAAG,OAAO,IAAI;AAC7B,QAAM,QAAQ,WAAW,SAAS,OAAO,QAAQ;AACjD,KAAG,cAAc,GAAG,QAAQ;AAC5B,KAAG,YAAY,QAAQ,OAAO;AAE9B,QAAM,EAAE,gBAAgB,QAAQ,MAAM,UAAU,IAAI,cAAc,IAAI,OAAO,gBAAgB,UAAU,SAAS,OAAO,OAAO,MAAS;AAIvI,WAAS,aAAa,WAAwB,MAA2B,OAAe,OAAe,OAAe,QAAQ,GAAG;AAC7H,QAAI,CAAC;AACD;AACJ,UAAM,SAAS;AACf,UAAM,OAAO,YAAY,OAAO,MAAM,IAAI,SAAS;AACnD,UAAM,SAAS,YAAY,OAAO,IAAI,IAAI,KAAK,SAAS;AACxD,UAAM,aAAa,MAAM,cAAc;AACvC,UAAM,aAAa,MAAM,cAAc,QAAQ;AAC/C,UAAM,SAAS,WAAW,OAAO,OAAO,IAAI,UAAU,QAAQ,YAAY,aAAa,UAAU,iBAAiB;AAClH,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,QAAI,MAAM;AACN,UAAI,OAAO;AACP,WAAG,cAAc,WAAW,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,OAAO,QAAkB,MAAM,MAAM;AAAA,MACrH,OAAO;AACH,WAAG,cAAc,WAAW,OAAO,SAAS,SAAS,OAAO,OAAO,QAAkB,MAAM,MAAM;AAAA,MACrG;AAAA,IACJ,OAAO;AACH,UAAI,OAAO;AACP,WAAG,wBAAwB,WAAW,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,OAAO,gBAAgB,MAAO;AAAA,MACxH,OAAO;AACH,WAAG,wBAAwB,WAAW,OAAO,SAAS,SAAS,OAAO,OAAO,gBAAgB,MAAO;AAAA,MACxG;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,gBAAgB,OAAe,OAAsD;AAC1F,aAAS,QAAQ,KAAmD;AAChE,aAAO,MAAM,QAAQ,GAAG;AAAA,IAC5B;AACA,UAAM,IAAI,KAAK;AACf,QAAI,QAAQ,KAAK,GAAG;AAChB,cAAQ,OAAO,UAAU,GAAG,gBAAgB;AAC5C,YAAM,aAAa,MAAM,KAAK;AAC9B,UAAI,YAAY;AACZ,YAAI,OAAO,GAAG;AACd,iBAAS,OAAO,OAAO;AACnB,uBAAc,QAAwB,KAAK,OAAO,QAAQ,GAAG,SAAS,CAAC;AAAA,QAC3E;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,UAAI,OAAO;AACP,YAAI,UAAU,GAAG,YAAY;AACzB,uBAAa,GAAG,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC;AAAA,QAC9E,OACK;AACD,kBAAQ,OAAO,UAAU,GAAG,gBAAgB;AAC5C,uBAAa,GAAG,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAS,GAAG,KAAK;AAAA,QAC1E;AAAA,MACJ,OAAO;AACH,gBAAQ,OAAO,UAAU,GAAG,UAAU;AACtC,qBAAa,GAAG,YAAY,OAAO,OAAO,OAAO,MAAM;AAAA,MAC3D;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,eAAe,SAAiB,GAAG;AACxC,QAAI,OAAO;AACP,SAAG,aAAa,QAAQ,QAAQ,gBAAgB,OAAO,QAAQ,KAAK;AAAA,IACxE,OAAO;AACH,SAAG,aAAa,QAAQ,QAAQ,gBAAgB,OAAO,MAAM;AAAA,IACjE;AAAA,EACJ;AAEA,MAAI,aAAa,QAAQ;AAErB,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,WAAW,OAAO,WAAW;AACnC,UAAM,SAAS,WAAW,UAAU,QAAQ;AAC5C,mBAAe,MAAM;AACrB,QAAI,CAAC,UAAU;AACX,eAAS,QAAQ,GAAG,QAAQ,QAAQ,SAAS;AACzC,cAAM,SAAS,QAAQ,KAAK;AAC5B,YAAI,QAAQ;AACR,0BAAgB,OAAO,MAAM;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,WAAW,eAAe,OAAO,KAAK,GAAG;AACrC,UAAM,kBAAkB,qBAAqB,UAAU,OAAO;AAC9D,QAAI,mBAAmB,EAAE,WAAW,KAAK,KAAK,WAAW,MAAM,KAAK,OAAO;AACvE,YAAM,IAAI,MAAM,oEAAoE,UAAU,UAAU;AAAA,IAC5G;AACA,UAAM,SAAS,kBAAkB,KAAK,KAAK,KAAK,IAAI,OAAO,MAAM,CAAC,IAAI;AACtE,mBAAe,MAAM;AACrB,oBAAgB,GAAG,OAAO,KAAK;AAC/B,QAAI,mBAAmB,OAAO,OAAO;AACjC,SAAG,eAAe,MAAM;AAAA,IAC5B;AAAA,EACJ,OAAO;AACH,UAAM,kBAAkB,qBAAqB,UAAU,OAAO;AAC9D,OAAG,WAAW,GAAG,YAAY,GAAG,gBAAgB,OAAO,QAAQ,GAAG,QAAS,MAAO,OAAO,KAA2B;AACpH,QAAI,mBAAmB,WAAW,KAAK,KAAK,WAAW,MAAM,GAAG;AAC5D,SAAG,eAAe,MAAM;AAAA,IAC5B;AAAA,EACJ;AACA,KAAG,YAAY,QAAQ,IAAI;AAC3B,SAAO;AACX;AAEO,SAAS,gBAAgB,IAA4B,eAA6B,QAAuB;AAC5G,QAAM,QAAQ,OAAO,SAAS,OAAO,MAAM;AAC3C,QAAM,SAAS,OAAO,UAAU,OAAO,MAAM;AAC7C,QAAM,SAAS,GAAG,OAAO,IAAI;AAC7B,QAAM,QAAQ,WAAW,SAAS,OAAO,QAAQ;AACjD,KAAG,cAAc,GAAG,QAAQ;AAC5B,KAAG,YAAY,QAAQ,aAAa;AAEpC,QAAM,EAAE,gBAAgB,QAAQ,MAAM,UAAU,IAAI,cAAc,IAAI,OAAO,gBAAgB,UAAU,SAAS,OAAO,OAAO,MAAS;AAIvI,WAAS,aAAa,WAAgD,MAA2B,OAAe,OAAe,OAAe,QAAQ,GAAG;AACrJ,QAAI,CAAC;AACD;AACJ,UAAM,SAAS;AACf,UAAM,OAAO,YAAY,OAAO,MAAM,IAAI,SAAS;AACnD,UAAM,SAAS,YAAY,OAAO,IAAI,IAAI,KAAK,SAAS;AACxD,UAAM,aAAa,MAAM,cAAc;AACvC,UAAM,aAAa,MAAM,cAAc,QAAQ;AAC/C,UAAM,SAAS,WAAW,OAAO,OAAO,IAAI,UAAU,QAAQ,YAAY,aAAa,UAAU,iBAAiB;AAClH,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,QAAI,MAAM;AACN,UAAI,OAAO;AACP,WAAG,cAAc,WAAW,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,OAAO,QAAkB,MAAM,MAAM;AAAA,MACrH,OAAO;AACH,WAAG,cAAc,WAAW,OAAO,SAAS,SAAS,OAAO,OAAO,QAAkB,MAAM,MAAM;AAAA,MACrG;AAAA,IACJ,OAAO;AACH,UAAI,OAAO;AACP,WAAG,wBAAwB,WAAW,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,OAAO,gBAAgB,MAAO;AAAA,MACxH,OAAO;AACH,WAAG,wBAAwB,WAAW,OAAO,SAAS,SAAS,OAAO,OAAO,gBAAgB,MAAO;AAAA,MACxG;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,gBAAgB,OAAe,OAAsD;AAC1F,aAAS,QAAQ,KAAmD;AAChE,aAAO,MAAM,QAAQ,GAAG;AAAA,IAC5B;AACA,UAAM,IAAI,KAAK;AACf,QAAI,QAAQ,KAAK,GAAG;AAChB,cAAQ,OAAO,UAAU,GAAG,gBAAgB;AAC5C,YAAM,aAAa,MAAM,KAAK;AAC9B,UAAI,YAAY;AACZ,YAAI,OAAO,GAAG;AACd,iBAAS,OAAO,OAAO;AACnB,uBAAc,QAAwB,KAAK,OAAO,QAAQ,GAAG,SAAS,CAAC;AAAA,QAC3E;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,UAAI,OAAO;AACP,YAAI,UAAU,GAAG,YAAY;AACzB,uBAAa,GAAG,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC;AAAA,QAC9E,OACK;AACD,kBAAQ,OAAO,UAAU,GAAG,gBAAgB;AAC5C,uBAAa,GAAG,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAS,GAAG,KAAK;AAAA,QAC1E;AAAA,MACJ,OAAO;AACH,gBAAQ,OAAO,UAAU,GAAG,UAAU;AACtC,qBAAa,GAAG,YAAY,OAAO,OAAO,OAAO,MAAM;AAAA,MAC3D;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,aAAa,QAAQ;AAErB,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,WAAW,OAAO,WAAW;AACnC,UAAM,SAAS,WAAW,UAAU,QAAQ;AAC5C,QAAI,CAAC,UAAU;AACX,eAAS,QAAQ,GAAG,QAAQ,QAAQ,SAAS;AACzC,cAAM,SAAS,QAAQ,KAAK;AAC5B,YAAI,QAAQ;AACR,0BAAgB,OAAO,MAAM;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,WAAW,eAAe,OAAO,KAAK,GAAG;AACrC,UAAM,kBAAkB,qBAAqB,UAAU,OAAO;AAC9D,QAAI,mBAAmB,EAAE,WAAW,KAAK,KAAK,WAAW,MAAM,KAAK,OAAO;AACvE,YAAM,IAAI,MAAM,oEAAoE,UAAU,UAAU;AAAA,IAC5G;AACA,UAAM,SAAS,kBAAkB,KAAK,KAAK,KAAK,IAAI,OAAO,MAAM,CAAC,IAAI;AACtE,oBAAgB,GAAG,OAAO,KAAK;AAC/B,QAAI,mBAAmB,OAAO,OAAO;AACjC,SAAG,eAAe,MAAM;AAAA,IAC5B;AAAA,EACJ,OAAO;AACH,UAAM,kBAAkB,qBAAqB,UAAU,OAAO;AAC9D,OAAG,YAAY,GAAG,oCAAoC,GAAG,IAAI;AAC7D,OAAG,WAAW,GAAG,YAAY,GAAG,gBAAgB,OAAO,QAAQ,GAAG,QAAS,MAAO,OAAO,KAA2B;AACpH,QAAI,mBAAmB,WAAW,KAAK,KAAK,WAAW,MAAM,GAAG;AAC5D,SAAG,eAAe,MAAM;AAAA,IAC5B;AAAA,EACJ;AACA,KAAG,YAAY,QAAQ,IAAI;AAC/B;AAEA,SAAS,WAAW,OAAe;AAC/B,UAAQ,QAAS,QAAQ,MAAO;AACpC;AAEA,SAAS,mBAAmB,QAAkH;AAC1I,SAAO,OAAO,WAAW,YAAY;AACzC;AAEA,SAAS,eAAe,OAAuC;AAC3D,SAAO,SAAS,UAAa,MAAM,QAAQ,KAAK,KAAK,iBAAiB,eAAe,YAAY,OAAO,KAAK;AACjH;AAEA,SAAS,cAAc,IAA4B,sBAAuF,YAA8B;AACpK,MAAI,mBAAmB,oBAAoB,GAAG;AAC1C,UAAM,iBAAiB,kBAAkB,oBAAoB;AAC7D,UAAM,SAAS;AACf,UAAM,OAAO;AACb,UAAM,YAAY;AAClB,WAAO,EAAE,gBAAgB,QAAQ,MAAM,UAAU;AAAA,EACrD,OAAO;AACH,UAAM,iBAAiB,GAAG,oBAAoB;AAC9C,UAAM,SAAS,4BAA4B,cAAc;AACzD,UAAM,OAAO,GAAG,UAAW;AAC3B,UAAM,YAAY,kBAAkB,UAAW;AAC/C,WAAO,EAAE,gBAAgB,QAAQ,MAAM,UAAU;AAAA,EACrD;AACJ;AAiOA,IAAM,8BAA8B;AAAA,EAChC,eAAO;AAAA,EACP,gBAAQ;AAAA,EACR,2BAAmB;AAAA,EACnB,qBAAa;AAAA,EACb,iBAAS;AAAA,EACT,eAAM;AAAA,EACN,qBAAY;AAAA,EACZ,gBAAO;AAAA,EACP,sBAAa;AAAA,EACb,iBAAQ;AAAA,EACR,uBAAc;AAAA,EACd,mBAAU;AAAA,EACV,kBAAS;AAAA,EACT,oBAAW;AAAA,EACX,kBAAS;AAAA,EACT,wBAAe;AAAA,EACf,qBAAY;AAAA,EACZ,uBAAc;AAAA,EACd,kBAAS;AAAA,EACT,yBAAgB;AAAA,EAChB,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,2BAAkB;AAAA,EAClB,oBAAW;AAAA,EACX,gBAAO;AAAA,EACP,iBAAQ;AAAA,EACR,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,oBAAW;AAAA,EACX,qBAAY;AAAA,EACZ,oBAAW;AAAA,EACX,qBAAY;AAAA,EACZ,8BAAqB;AAAA,EACrB,8BAAqB;AAAA,EACrB,+BAAsB;AAAA,EACtB,6BAAoB;AAAA,EACpB,8BAAqB;AACzB;AAGA,IAAM,oBAAoB;AAAA;AAAA,EAEttlBO,SAAS,cAAc,IAA4B,cAAc,OAAc;AAClF,QAAM,EAAE,mBAAmB,IAAI,aAAa,EAAE;AAC9C,MAAI,oBAAoB;AAEpB,OAAG,aAAa,mBAAmB,gBAAgB;AACnD,UAAM,gBAAgB,GAAG,SAAS,mBAAmB,eAAe,mBAAmB,sBAAsB,KAAK,IAAI;AACtH,QAAI;AACA,aAAO,IAAI,WAAW,IAAI,kBAAkB;AAAA;AAE5C,aAAO,IAAI,SAAS,IAAI,kBAAkB;AAAA,EAClD,OAAO;AACH,QAAI,aAAa;AACb,aAAO,IAAI,SAAS,EAAE;AAAA,IAC1B,OAAO;AACH,aAAO,IAAI,UAAU,EAAE;AAAA,IAC3B;AAAA,EACJ;AACJ;AAIA,IAAM,YAAN,MAAgB;AAAA,EAKZ,YAAqB,IAA4B;AAA5B;AACjB,SAAK,eAAe,YAAY,IAAI;AACpC,SAAK,UAAU,QAAQ,QAAQ,MAAS;AAAA,EAC5C;AAAA,EAPS,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EAOT,UAAU;AAAA,EAAE;AAAA,EACZ,QAAQ;AAAA,EAAE;AAAA,EACV,MAAM;AAAA,EAAE;AAAA,EACR,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,WAAN,MAAe;AAAA,EAQX,YAAqB,IAA4B;AAA5B;AACjB,SAAK,eAAe,YAAY,IAAI;AACpC,SAAK,UAAU,IAAI,QAA4B,aAAW;AAAE,WAAK,UAAU;AAAA,IAAS,CAAC;AAAA,EACzF;AAAA,EAVS,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACD,YAAY;AAAA,EACZ,UAAU;AAAA,EACV;AAAA,EAOR,UAAU;AACN,SAAK,UAAU,MAAS;AACxB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,QAAQ;AACJ,SAAK,GAAG,SAAS;AACjB,SAAK,YAAY,YAAY,IAAI;AAAA,EACrC;AAAA,EAEA,MAAM;AACF,SAAK,GAAG,SAAS;AACjB,SAAK,UAAU,YAAY,IAAI;AAAA,EACnC;AAAA,EAEA,OAAO;AACH,SAAK,UAAU,KAAK,UAAU,KAAK,SAAS;AAC5C,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,WAAN,MAAe;AAAA,EAOX,YAAqB,IAAqC,KAA0C;AAA/E;AAAqC;AACtD,SAAK,eAAe,YAAY,IAAI;AACpC,SAAK,QAAQ,GAAG,YAAY;AAC5B,SAAK,UAAU,IAAI,QAA4B,aAAW;AAAE,WAAK,UAAU;AAAA,IAAS,CAAC;AAAA,EACzF;AAAA,EAVS,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACQ;AAAA,EACT;AAAA,EAQR,UAAU;AACN,UAAM,EAAE,IAAI,OAAO,QAAQ,IAAI;AAC/B,OAAG,YAAY,KAAK;AACpB,cAAU,MAAS;AACnB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,QAAQ;AACJ,UAAM,EAAE,IAAI,KAAK,MAAM,IAAI;AAC3B,OAAG,WAAW,IAAI,kBAAkB,KAAK;AAAA,EAC7C;AAAA,EAEA,MAAM;AACF,UAAM,EAAE,IAAI,IAAI,IAAI;AACpB,OAAG,SAAS,IAAI,gBAAgB;AAAA,EACpC;AAAA,EAEA,OAAO;AACH,UAAM,EAAE,IAAI,KAAK,OAAO,QAAQ,IAAI;AACpC,QAAI,WAAW,GAAG,aAAa,IAAI,gBAAgB;AACnD,QAAI,CAAC,UAAU;AACX,YAAM,YAAY,GAAG,kBAAkB,OAAO,GAAG,sBAAsB;AACvE,UAAI,WAAW;AACX,cAAM,cAAc,GAAG,kBAAkB,OAAO,GAAG,YAAY;AAC/D,kBAAU,cAAc,GAAO;AAC/B,aAAK,UAAU;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,YAAY,IAAI,IAAI,KAAK,eAAe,KAAM;AAC9C,gBAAU,MAAS;AACnB,WAAK,UAAU;AACf,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;AAGA,IAAM,aAAN,MAAiB;AAAA,EAQb,YAAqB,IAAqC,KAA0C;AAA/E;AAAqC;AACtD,SAAK,eAAe,YAAY,IAAI;AACpC,SAAK,aAAa,GAAG,YAAY;AACjC,SAAK,WAAW,GAAG,YAAY;AAC/B,SAAK,UAAU,IAAI,QAA4B,CAAC,SAAS,WAAW;AAAE,WAAK,UAAU;AAAA,IAAS,CAAC;AAAA,EACnG;AAAA,EAZS,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACQ;AAAA,EACA;AAAA,EACT;AAAA,EASR,UAAU;AACN,UAAM,EAAE,IAAI,YAAY,UAAU,QAAQ,IAAI;AAC9C,OAAG,YAAY,UAAU;AACzB,OAAG,YAAY,QAAQ;AACvB,cAAU,MAAS;AACnB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,QAAQ;AACJ,UAAM,EAAE,KAAK,WAAW,IAAI;AAC5B,QAAI,gBAAgB,YAAY,IAAI,aAAa;AAAA,EACrD;AAAA,EAEA,MAAM;AACF,UAAM,EAAE,KAAK,SAAS,IAAI;AAC1B,QAAI,gBAAgB,UAAU,IAAI,aAAa;AAAA,EACnD;AAAA,EAEA,OAAO;AACH,UAAM,EAAE,IAAI,KAAK,YAAY,UAAU,QAAQ,IAAI;AACnD,QAAI,WAAW,GAAG,aAAa,IAAI,gBAAgB;AACnD,QAAI,CAAC,UAAU;AACX,YAAM,YAAY,GAAG,kBAAkB,UAAU,GAAG,sBAAsB;AAC1E,UAAI,WAAW;AACX,cAAM,YAAY,GAAG,kBAAkB,YAAY,GAAG,YAAY;AAClE,cAAM,UAAU,GAAG,kBAAkB,UAAU,GAAG,YAAY;AAC9D,cAAM,cAAc,UAAU;AAC9B,kBAAU,cAAc,GAAO;AAC/B,aAAK,UAAU;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,YAAY,IAAI,IAAI,KAAK,eAAe,KAAM;AAC9C,gBAAU,MAAS;AACnB,WAAK,UAAU;AACf,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;;;ACtLO,SAAS,oBAAoB,IAA4B,QAAiC;AAC7F,QAAM,EAAE,MAAM,mBAAmB,eAAe,OAAO,MAAM,IAAI;AACjE,QAAM,OAAO,GAAG,IAAI;AACpB,KAAG,sBAAsB,GAAG,oBAAoB,iBAAiB;AACjE,WAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,OAAG,eAAe,GAAG,2BAA2B,GAAG,cAAc,CAAC,CAAC;AAAA,EACvE;AACA,KAAG,uBAAuB,IAAI;AAC9B,KAAG,OAAO,GAAG,kBAAkB;AAC/B,KAAG,WAAW,MAAM,SAAS,GAAG,KAAK;AACrC,KAAG,QAAQ,GAAG,kBAAkB;AAChC,KAAG,qBAAqB;AACxB,KAAG,sBAAsB,GAAG,oBAAoB,IAAI;AACpD,WAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,OAAG,eAAe,GAAG,2BAA2B,GAAG,IAAI;AAAA,EAC3D;AACJ;;;AC4BO,SAAS,mBAAsD,IAA4B,SAAuB,OAAU,QAAiB;AAChJ,QAAM,YAAiB,CAAC;AACxB,aAAW,QAAQ,OAAO;AACtB,cAAU,IAAI,IAAI,GAAG,mBAAmB,SAAS,GAAG,UAAU,KAAK,MAAM;AAAA,EAC7E;AACA,SAAO;AACX;AAGO,SAAS,WAAyD,QAAW;AAEhF,QAAM,aAAgD,CAAC;AACvD,MAAI,SAAS;AACb,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC/C,UAAM,EAAE,WAAW,YAAY,KAAK,IAAI,aAAa,KAAK;AAC1D,UAAM,UAAW,YAAY,KAAO,SAAS,YAAY,KAAK;AAC9D,cAAU;AACV,UAAM,UAAoB,CAAC;AAC3B,aAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACjC,eAAS,YAAY,GAAG,YAAY,YAAY,aAAa;AACzD,gBAAQ,KAAK,QAAQ;AAAA,MACzB;AACA,UAAI,OAAO,GAAG;AACV,iBAAU,SAAS,IAAK,CAAC;AAAA,MAC7B;AAAA,IACJ;AACA,eAAW,GAAG,IAAI;AAAA,EACtB;AACA,QAAM,YAAa,SAAS,IAAK,CAAC,KAAK;AAEvC,QAAM,SAAS,IAAI,YAAY,QAAQ;AACvC,QAAM,QAAQ;AAAA,IACV,KAAK,IAAI,WAAW,MAAM;AAAA,IAC1B,KAAK,IAAI,YAAY,MAAM;AAAA,IAC3B,KAAK,IAAI,aAAa,MAAM;AAAA,EAChC;AACA,QAAM,aAAa;AAAA,IACf,KAAK,CAAC,UAAkB;AACpB,UAAI,CAAC,OAAO,UAAU,KAAK,GAAG;AAC1B,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AAAA,IACJ;AAAA,IACA,KAAK,CAAC,UAAkB;AACpB,UAAI,QAAQ,KAAK,CAAC,OAAO,UAAU,KAAK,GAAG;AACvC,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC5D;AAAA,IACJ;AAAA,IACA,KAAK,CAAC,UAAkB;AAAA,IAAE;AAAA,EAC9B;AAEA,QAAM,aAAa,IAAI,WAAW,QAAQ;AAE1C,QAAM,QAAQ;AAAA,IACV;AAAA,IACA;AAAA,IACA,QAAQ,CAAC;AAAA,EACb;AAEA,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC/C,UAAM,gBAAgB,aAAa,KAAK,EAAE;AAC1C,UAAM,OAAO,MAAM,aAAa;AAChC,UAAM,WAAW,WAAW,aAAa;AACzC,UAAM,UAAU,WAAW,GAAG;AAC9B,UAAM,QAAQ,QAAQ,CAAC,IAAI;AAC3B,UAAM,MAAM,QAAQ,QAAQ,SAAS,CAAC,IAAI,IAAI;AAC9C,UAAM,OAAO,OAAO,GAAG;AACvB,UAAM,MACF,QAAQ,SAAS,MAAM;AACnB,aAAO,KAAK,QAAQ,CAAC,CAAC,KAAK;AAAA,IAC/B,IAAI,QAAQ,SAAS,QAAQ,UAAU,QAAQ,UAAU,MAAM;AAC3D,aAAO,KAAK,QAAQ,CAAC,CAAC;AAAA,IAC1B,IAAI,MAAM;AACN,aAAO,QAAQ,IAAI,OAAK,KAAK,CAAC,CAAC;AAAA,IACnC;AAEJ,UAAMC,OACF,QAAQ,SAAS,CAACC,WAAmB;AACjC,WAAK,QAAQ,CAAC,CAAC,IAAIA,SAAQ,IAAI;AAC/B,iBAAW,OAAO,OAAO,GAAG;AAAA,IAChC,IAAI,QAAQ,SAAS,QAAQ,UAAU,QAAQ,UAAU,CAACA,WAAkB;AACxE,eAASA,MAAK;AACd,WAAK,QAAQ,CAAC,CAAC,IAAIA;AACnB,iBAAW,OAAO,OAAO,GAAG;AAAA,IAChC,IAAI,CAACC,YAA8B;AAC/B,cAAQ,OAAOA,QAAO,UAAU,QAAQ,MAAM;AAC9C,eAAS,IAAI,GAAG,IAAIA,QAAO,QAAQ,KAAK;AACpC,iBAASA,QAAO,CAAC,CAAC;AAClB,aAAK,QAAQ,CAAC,CAAC,IAAIA,QAAO,CAAC;AAAA,MAC/B;AACA,iBAAW,OAAO,OAAO,GAAG;AAAA,IAChC;AAEJ,YAAQ,eAAe,MAAM,QAAQ,KAAK;AAAA,MACtC,cAAc;AAAA,MACd,YAAY;AAAA,MACZ;AAAA,MACA,KAAAF;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,SAAO;AACX;AAEA,IAAM,aAAN,MAAiB;AAAA,EAIb,YAAqB,MAAc;AAAd;AACjB,SAAK,QAAQ;AACb,SAAK,MAAM;AAAA,EACf;AAAA,EANA;AAAA,EACA;AAAA,EAOA,IAAI,UAAU;AACV,WAAO,KAAK,SAAS,KAAK;AAAA,EAC9B;AAAA,EAEA,QAAQ;AACJ,SAAK,QAAQ,KAAK;AAClB,SAAK,MAAM;AAAA,EACf;AAAA,EAEA,QAAQ;AACJ,SAAK,QAAQ;AACb,SAAK,MAAM,KAAK;AAAA,EACpB;AAAA,EAEA,OAAO,OAAe,KAAa;AAC/B,QAAI,KAAK,QAAQ,OAAO;AACpB,WAAK,QAAQ;AAAA,IACjB;AACA,QAAI,KAAK,MAAM,KAAK;AAChB,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AACJ;AAQA,IAAM,eAAe;AAAA,EACjB,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC1D,KAAK,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EACzD,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC1D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAE3D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAE1D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAE1D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAE1D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC1D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAC9D;;;AC5MO,SAAS,oBAAoB,IAA4B,QAAmD;AAC/G,QAAM,MAAM,GAAG,kBAAkB;AACjC,QAAM,EAAE,mBAAmB,IAAI,SAAS,EAAE;AAC1C,KAAG,gBAAgB,GAAG;AACtB,QAAM,EAAE,WAAW,IAAI;AACvB,WAAS,IAAI,GAAG,IAAI,oBAAoB,KAAK;AACzC,UAAM,eAAe,WAAW,CAAC;AACjC,QAAI,cAAc;AACd,YAAM,EAAE,MAAM,WAAW,qBAAqB,IAAI,eAAe,aAAa,IAAI;AAClF,YAAM,gBAAgB,aAAa,iBAAiB;AACpD,YAAM,UAAU,aAAa,WAAW;AACxC,YAAM,aAAa,aAAa,cAAc;AAC9C,YAAM,aAAa,aAAa,cAAc;AAC9C,YAAM,iBAAiB,aAAa,mBAAmB,SAAS,IAAI,IAAI,KAAK,CAAC,IAAI;AAClF,YAAM,aAAa,aAAa,cAAc;AAC9C,SAAG,WAAW,GAAG,cAAc,aAAa,MAAM;AAClD,SAAG,wBAAwB,CAAC;AAC5B,UAAI,WAAW;AACX,WAAG,qBAAqB,GAAG,gBAAgB,GAAG,aAAa,GAAG,YAAY,UAAU;AAAA,MACxF,OAAO;AACH,WAAG,oBAAoB,GAAG,gBAAgB,GAAG,aAAa,GAAG,YAAY,YAAY,UAAU;AAAA,MACnG;AACA,SAAG,oBAAoB,GAAG,OAAO;AAAA,IACrC,OAAO;AACH,SAAG,yBAAyB,CAAC;AAAA,IACjC;AAAA,EACJ;AAAC;AACD,MAAI,OAAO,SAAS;AAChB,OAAG,WAAW,GAAG,sBAAsB,OAAO,OAAO;AAAA,EACzD;AACA,KAAG,gBAAgB,IAAI;AACvB,KAAG,WAAW,GAAG,cAAc,IAAI;AACnC,KAAG,WAAW,GAAG,sBAAsB,IAAI;AAC3C,SAAO;AACX;AAwDA,SAAS,SAAS,MAAwD;AACtE,SAAO,MAAM,QAAQ,IAAI;AAC7B;AAEA,IAAM,iBAAiB;AAAA,EACnB,OAAO,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,MAAM;AAAA,EAC/D,YAAY,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,MAAM;AAAA,EACpE,YAAY,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,MAAM;AAAA,EACpE,YAAY,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,MAAM;AAAA,EACpE,gBAAgB,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,eAAe;AAAA,EACjF,qBAAqB,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,eAAe;AAAA,EACtF,qBAAqB,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,eAAe;AAAA,EACtF,qBAAqB,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,eAAe;AAAA,EACtF,SAAS,EAAE,MAAM,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EACpE,cAAc,EAAE,MAAM,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EACzE,cAAc,EAAE,MAAM,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EACzE,cAAc,EAAE,MAAM,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EACzE,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAC9E,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAC9E,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAC9E,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AACpF;;;ACpHO,SAAS,qBAAkC;AAC9C,QAAM,QAAqB;AAAA,IACvB,QAAQ;AAAA,MACJ,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,aAAa;AAAA,IACjB;AAAA,IACA,YAAY,CACZ;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,UAAU,CAAC,GAAG,GAAG,CAAC;AAAA,MAClB,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MACrB,OAAO;AAAA,MACP,KAAK;AAAA,MACL,MAAM;AAAA,MACN,KAAK;AAAA,IACT;AAAA,IACA,SAAS;AAAA,MACL,QAAQ;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACH,gBAAgB;AAAA,IACpB;AAAA,IACA,MAAM;AAAA,MACF,SAAS;AAAA,MACT,QAAQ,CAAC,GAAG,GAAG,CAAC;AAAA,MAChB,QAAQ,CAAC,GAAG,GAAG,CAAC;AAAA,MAChB,QAAQ,CAAC,GAAG,GAAG,CAAC;AAAA,MAChB,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,MACf,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,MACf,OAAO;AAAA,MACP,OAAO;AAAA,MACP,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,SAAS;AAAA,MACT,UAAU,CAAC,GAAG,GAAG,CAAC;AAAA,MAClB,OAAO;AAAA,IACX;AAAA,IACA,OAAO;AAAA,IACP,SAAS;AAAA,MACL,mBAAmB;AAAA,QACf,OAAO;AAAA,UACH,EAAE,UAAU,KAAK,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE;AAAA,UACpC,EAAE,UAAU,GAAG,OAAO,CAAC,KAAK,KAAK,CAAC,EAAE;AAAA,UACpC,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,KAAK,CAAC,EAAE;AAAA,UAClC,EAAE,UAAU,IAAI,OAAO,CAAC,KAAK,GAAG,GAAG,EAAE;AAAA,QACzC;AAAA,MACJ;AAAA,MACA,cAAc;AAAA,IAClB;AAAA,IACA,SAAS;AAAA,MACL,SAAS,CAAC;AAAA,IACd;AAAA,IACA,UAAU;AAAA,MACN,SAAS;AAAA,MACT,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ,CAAC;AAAA,IACb;AAAA,IACA,YAAY;AAAA,MACR,eAAe;AAAA,MACf,QAAQ,CAAC;AAAA,IACb;AAAA,IACA,UAAU;AAAA,MACN,SAAS;AAAA,MACT,OAAO,CAAC,IAAI,IAAI,EAAE;AAAA;AAAA,MAClB,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,IACtB;AAAA,IACA,aAAa;AAAA,MACT,UAAU;AAAA,MACV;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,QACF,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,iBAAiB;AAAA,MACrB;AAAA,MACA,WAAW;AAAA,QACP,OAAO;AAAA,QACP,WAAW;AAAA,QACX,eAAe;AAAA,UACX,OAAO;AAAA,YACH,EAAE,UAAU,IAAI,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACpC,EAAE,UAAU,MAAM,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACtC,EAAE,UAAU,OAAO,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACvC,EAAE,UAAU,MAAM,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACtC,EAAE,UAAU,KAAK,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACrC,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,UACvC;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,sBAAsB;AAAA,IAC1B;AAAA,IACA,aAAa;AAAA,MACT,SAAS;AAAA,MACT,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,MACf,iBAAiB;AAAA,IACrB;AAAA,IACA,MAAM;AAAA,MACF,kBAAkB;AAAA,IACtB;AAAA,EACJ;AACA,SAAO;AACX;;;AClGO,SAAS,kBAAkB,OAAoB,SAA0C;AAC5F,QAAM,WAAW,eAAe,OAAO,OAAO;AAC9C,MAAI,QAAQ,QAAQ;AAChB,sBAAkB,SAAS,MAAM;AAAA,EACrC;AACA,MAAI,QAAQ,UAAU;AAClB,wBAAoB,SAAS,QAAQ;AAAA,EACzC;AACA,SAAO;AACX;AAEO,SAAS,eAAe,UAAe,SAAc;AACxD,QAAMG,SAAQ,EAAE,GAAG,SAAS;AAC5B,aAAW,OAAO,SAAS;AACvB,UAAM,gBAAgB,WAAW,SAAS,GAAG,IAAI;AACjD,UAAM,eAAe,QAAQ,GAAG;AAChC,QAAI,gBAAgB,UAAa,OAAO,gBAAgB,YAAY,CAAC,MAAM,QAAQ,YAAY,KAAK,CAAC,YAAY,OAAO,YAAY,KAAK,EAAE,wBAAwB,MAAM;AACrK,MAAAA,OAAM,GAAG,IAAI,eAAe,eAAe,YAAY;AAAA,IAC3D,OAAO;AACH,MAAAA,OAAM,GAAG,IAAI;AAAA,IACjB;AAAA,EACJ;AACA,SAAOA;AACX;AAEA,SAAS,kBAAkB,OAA0B;AACjD,QAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,MAAI,CAAC,OAAO,UAAU,KAAK,KAAK,CAAC,OAAO,UAAU,MAAM;AACpD,UAAM,IAAI,MAAM,iCAAiC,iBAAiB,2BAA2B;AACrG;AAEA,SAAS,oBAAoB,OAA4B;AACrD,QAAM,EAAE,OAAO,IAAI;AACnB,MAAI,OAAO,SAAS;AAChB,UAAM,IAAI,MAAM,gDAAgD;AACxE;;;ACIO,IAAK,aAAL,kBAAKC,gBAAL;AACH,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AACA,EAAAA,wBAAA;AAHQ,SAAAA;AAAA,GAAA;AAqDL,IAAM,SAAS;AA8Ef,IAAK,eAAL,kBAAKC,kBAAL;AACH,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AAFQ,SAAAA;AAAA,GAAA;AAKL,IAAK,aAAL,kBAAKC,gBAAL;AACH,EAAAA,wBAAA,YAAS,cAAT;AAAqB,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AADrD,SAAAA;AAAA,GAAA;AA4CL,IAAK,kBAAL,kBAAKC,qBAAL;AACH,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AACA,EAAAA,kCAAA;AANQ,SAAAA;AAAA,GAAA;;;ACnOZ,SAAS,MAAM,MAAkB,IAAwB;AACrD,SAAO,OAAO,IAAI;AACtB;AAEO,SAAS,wBAAwB,OAA4E;AAChH,QAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,QAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,QAAM,cAAc,QAAQ;AAC5B,QAAM,OAAO,OAAO,MAAM,KAAK,KAAK;AACpC,QAAM,YAAY,aAAK,wBAAwB,aAAK,OAAO,GAAG,OAAO,UAAU,OAAO,QAAQ;AAC9F,QAAM,WAAW,aAAK,OAAO;AAC7B,MAAI,OAAO,QAAQ,gBAAgB;AAC/B,UAAM,SAAS,OAAO,QAAQ,OAAO;AACrC,UAAM,aAAa,OAAO,MAAM;AAChC,UAAM,YAAY,aAAa;AAC/B,iBAAK,MAAM,UAAU,CAAC,WAAW,WAAW,CAAC,YAAY,YAAY,OAAO,MAAM,OAAO,GAAG;AAAA,EAChG,OACK;AACD,iBAAK,YAAY,UAAU,MAAM,aAAa,OAAO,MAAM,OAAO,GAAG;AAAA,EACzE;AACA,SAAO,IAAI,aAAa,WAAW,QAAQ;AAC/C;AAEA,IAAM,eAAN,MAAuC;AAAA,EAC3B,QAAQ,IAAI,MAAwB,IAAI,CAAC;AAAA,EACzC,QAAQ,IAAI,MAAwB,IAAI,CAAC;AAAA,EAEjD,YAAY,WAAiB,UAAgB;AACzC,SAAK,MAAM,iCAAuC,CAAC,IAAI;AACvD,SAAK,MAAM,gCAAsC,CAAC,IAAI;AACtD,UAAM,YAAY,KAAK,MAAM,iCAAuC,CAAC,IAAI,aAAK,OAAO;AACrF,UAAM,WAAW,KAAK,MAAM,gCAAsC,CAAC,IAAI,aAAK,OAAO;AACnF,iBAAK,OAAO,WAAW,SAAS;AAChC,iBAAK,OAAO,UAAU,QAAQ;AAAA,EAClC;AAAA,EAEA,UAAU,MAAkB,IAA8B;AACtD,YAAQ,OAAO,QAAQ,EAAE;AACzB,UAAM,MAAM,MAAM,MAAM,EAAE;AAC1B,QAAI,IAAI,KAAK,MAAM,GAAG;AACtB,QAAI,CAAC,GAAG;AACJ,WAAK,MAAM,GAAG,IAAI,IAAI,aAAK,OAAO;AAElC,UAAI,KAAK,MAAM;AACX,qBAAK,SAAS,GAAG,KAAK,UAAU,KAAK,GAAG,EAAE,GAAG,KAAK,UAAU,MAAM,KAAK,CAAC,CAAC;AAAA,MAC7E,OAAO;AACH,qBAAK,SAAS,GAAG,KAAK,UAAU,OAAO,GAAG,EAAE,GAAG,KAAK,UAAU,MAAM,OAAO,CAAC,CAAC;AAAA,MACjF;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,MAAkB,IAA8B;AAC5D,YAAQ,OAAO,QAAQ,EAAE;AACzB,UAAM,MAAM,MAAM,MAAM,EAAE;AAC1B,QAAI,IAAI,KAAK,MAAM,GAAG;AACtB,QAAI,CAAC,GAAG;AACJ,WAAK,MAAM,GAAG,IAAI,IAAI,aAAK,OAAO;AAClC,mBAAK,eAAe,GAAG,KAAK,UAAU,MAAM,EAAE,CAAC;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AACJ;;;AC9DO,SAAS,kBAAkB,OAAoB,UAAiC;AACnF,QAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,QAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,QAAM,SAAS,QAAQ;AACvB,QAAM,aAAa,OAAO,MAAM;AAChC,QAAM,YAAY,aAAa;AAE/B,QAAM,OAAO,aAAK,OAAO;AACzB,QAAM,QAAQ,aAAK,OAAO;AAC1B,QAAM,MAAM,aAAK,OAAO;AACxB,QAAM,SAAS,aAAK,OAAO;AAC3B,QAAM,OAAO,aAAK,OAAO;AACzB,QAAM,MAAM,aAAK,OAAO;AACxB,QAAM,QAAQ,aAAK,OAAO;AAE1B,eAAK,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,IAAI;AACpC,eAAK,IAAI,KAAK,GAAG,GAAG,IAAI,OAAO,GAAG;AAClC,eAAK,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC;AAE3B,MAAI,OAAO,QAAQ,gBAAgB;AAC/B,iBAAK,IAAI,MAAM,IAAI,GAAG,GAAG,SAAS;AAClC,iBAAK,IAAI,OAAO,GAAG,GAAG,GAAG,SAAS;AAClC,iBAAK,IAAI,KAAK,GAAG,GAAG,GAAG,UAAU;AACjC,iBAAK,IAAI,QAAQ,GAAG,IAAI,GAAG,UAAU;AAAA,EACzC,OAAO;AACH,UAAM,aAAa,eAAS,SAAS,OAAO,MAAM,CAAC;AACnD,UAAM,aAAa,KAAK,KAAK,KAAK,IAAI,UAAU,IAAI,MAAM;AAC1D,iBAAK,IAAI,MAAM,CAAC,KAAK,IAAI,UAAU,GAAG,GAAG,KAAK,IAAI,UAAU,GAAG,CAAC;AAChE,iBAAK,IAAI,OAAO,KAAK,IAAI,UAAU,GAAG,GAAG,KAAK,IAAI,UAAU,GAAG,CAAC;AAChE,iBAAK,IAAI,KAAK,GAAG,KAAK,IAAI,UAAU,GAAG,KAAK,IAAI,UAAU,GAAG,CAAC;AAC9D,iBAAK,IAAI,QAAQ,GAAG,CAAC,KAAK,IAAI,UAAU,GAAG,KAAK,IAAI,UAAU,GAAG,CAAC;AAAA,EACtE;AAGA,QAAM,SAAS,aAAK,OAAO;AAC3B,QAAM,WAAW,aAAK,OAAO;AAC7B,QAAM,SAAS,SAAS,qCAA2C;AACnE,QAAM,eAAe,SAAS,2CAAiD;AAC/E,eAAK,eAAe,UAAU,MAAM;AACpC,QAAM,SAAS,CAAC,MAAM,OAAO,KAAK,QAAQ,MAAM,KAAK,KAAK;AAC1D,aAAW,SAAS,QAAQ;AACxB,UAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI;AAC1B,iBAAK,IAAI,QAAQ,GAAG,GAAG,CAAC;AACxB,iBAAK,cAAc,QAAQ,QAAQ,YAAY;AAC/C,UAAMC,YAAW,SAAS,aAAK,IAAI,UAAU,MAAM;AACnD,iBAAK,IAAI,OAAO,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,CAACA,SAAQ;AAAA,EAC9D;AACA,SAAO,EAAE,MAAM,OAAO,KAAK,QAAQ,MAAM,KAAK,OAAO,QAAQ,CAAC,MAAM,OAAO,KAAK,QAAQ,MAAM,GAAG,EAAE;AACvG;;;ACjCO,IAAM,gBAAN,MAAoB;AAAA,EAYvB,YAAqB,IAAqC,OAAwB,QAAyB,SAA0B,aAA0B;AAA1I;AAAqC;AAAwB;AAAyB;AAA0B;AACjI,UAAM,WAAW,KAAK,WAAW;AAAA;AAAA,MAE7B,OAAO,YAAY,cAAc,EAAE,MAAM,cAAc,OAAO,QAAQ,gBAAgB,kBAAkB,MAAM,cAAc,OAAO,KAAK,CAAC;AAAA,MACzI,MAAM,YAAY,cAAc,EAAE,MAAM,cAAc,OAAO,QAAQ,gBAAgB,YAAY,MAAM,gBAAgB,OAAO,KAAK,CAAC;AAAA;AAAA,MACpI,OAAO,YAAY,cAAc,EAAE,MAAM,cAAc,OAAO,QAAQ,gBAAgB,sBAAsB,MAAM,SAAS,OAAO,KAAK,CAAC;AAAA,IAC5I;AAEA,UAAM,gBAAgB,KAAK,gBAAgB;AAAA,MACvC,WAAW,UAAU,IAAI,YAAY,mBAAmB,EAAE,gBAAgB,kBAAkB,OAAO,QAAQ,QAAQ,CAAC,IAAI;AAAA,MACxH,WAAW,UAAU,IAAI,YAAY,mBAAmB,EAAE,gBAAgB,sBAAsB,OAAO,QAAQ,QAAQ,CAAC,IAAI;AAAA,IAChI;AAEA,SAAK,eAAe;AAAA,MAChB,OAAO,YAAY,kBAAkB;AAAA,QACjC,OAAO;AAAA,UACH,EAAE,MAAM,eAAe,SAAS,SAAS,MAAM;AAAA,QACnD;AAAA,QACA,OAAO,EAAE,MAAM,oBAAoB,SAAS,SAAS,MAAM;AAAA,MAC/D,CAAC;AAAA,MACD,WAAW,UAAU,IAAI,YAAY,kBAAkB;AAAA,QACnD,OAAO;AAAA,UACH,EAAE,MAAM,oBAAoB,cAAc,cAAc,UAAU;AAAA,QACtE;AAAA,QACA,OAAO,EAAE,MAAM,oBAAoB,cAAc,cAAc,UAAU;AAAA,MAC7E,CAAC,IAAI;AAAA,MACL,MAAM,YAAY,kBAAkB;AAAA,QAChC,OAAO;AAAA,UACH;AAAA,UACA,EAAE,MAAM,oBAAoB,SAAS,SAAS,KAAK;AAAA,QACvD;AAAA,QACA,OAAO,EAAE,MAAM,oBAAoB,SAAS,SAAS,MAAM;AAAA,MAC/D,CAAC;AAAA,IACL;AAEA,SAAK,cAAc;AAAA,MACf,MAAM,YAAY,aAAa,EAAE,MAAM,qBAAqB,UAAU,QAAQ,SAAS,IAAI,OAAO,cAAc,CAAC;AAAA,IACrH;AAEA,SAAK,cAAc;AAAA,MACf,MAAM,IAAI,YAAY,QAAQ,SAAS,CAAC;AAAA,IAC5C;AAAA,EACJ;AAAA,EArDA,wBAAwB;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACD;AAAA,EACA;AAAA,EAiDR,cAAc;AACV,UAAM,EAAE,IAAI,cAAc,OAAO,OAAO,IAAI;AAC5C,UAAM,EAAE,WAAW,MAAM,IAAI;AAC7B,QAAI,WAAW;AACX,aAAO,IAAI,EAAE,QAAQ,WAAW,aAAa,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,CAAC;AAC3H,8BAAwB,IAAI,EAAE,MAAM,eAAe,aAAa,WAAW,OAAO,CAAC,IAAI,GAAG,OAAO,KAAK,CAAC;AAAA,IAC3G;AAAA,EACJ;AAAA,EAEA,WAAW,aAAkD,SAAsB;AAC/E,UAAM,EAAE,IAAI,aAAa,IAAI;AAC7B,QAAI,SAAS,UAAU,kBAAsB;AAC7C,QAAI,QAAQ,UAAU,iBAAqB;AAC3C,QAAI,SAAS,UAAU,kBAAsB;AAC7C,4BAAwB,IAAI,EAAE,MAAM,oBAAoB,aAAa,aAAa,WAAW,GAAG,OAAO,CAAC,OAAO,IAAI,GAAG,MAAM,CAAC;AAAA,EACjI;AAAA;AAAA,EAGQ,OAAO;AACX,UAAM,EAAE,IAAI,OAAO,QAAQ,cAAc,YAAY,IAAI;AACzD,iBAAa,IAAI;AAAA,MACb;AAAA,MAAO;AAAA,MAAQ,aAAa,aAAa;AAAA,MAAM,SAAS;AAAA,QACpD,EAAE,YAAY,qBAAqB,QAAQ,YAAY,MAAM,QAAQ,gBAAgB,MAAM,eAAe;AAAA,MAC9G;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,cAAc;AAChB,QAAI,KAAK,yBAAyB,CAAC,KAAK,WAAW;AAC/C,YAAM,EAAE,GAAG,IAAI;AACf,WAAK,KAAK;AACV,WAAK,wBAAwB;AAC7B,YAAM,OAAO,GAAG,UAAU,GAAG,4BAA4B,CAAC;AAC1D,WAAK,YAAY,EAAE,MAAM,UAAU,CAAC,EAAE;AAAA,IAC1C;AACA,QAAI,KAAK,WAAW;AAChB,YAAM,EAAE,SAAS,IAAI,KAAK;AAC1B,YAAM,UAAU,IAAI,QAAc,CAAC,SAAS,WAAW;AACnD,iBAAS,KAAK,EAAE,SAAS,OAAO,CAAC;AAAA,MACrC,CAAC;AACD,YAAM;AACN,aAAO,KAAK;AAAA,IAChB,OAAO;AACH,aAAO,QAAQ,QAAQ,KAAK,WAAW;AAAA,IAC3C;AAAA,EACJ;AAAA,EAEA,UAAU;AACN,SAAK,gBAAgB;AACrB,SAAK,YAAY,QAAQ;AAAA,EAC7B;AAAA,EAEA,gBAAgB;AACZ,UAAM,EAAE,IAAI,WAAW,aAAa,YAAY,IAAI;AACpD,QAAI,WAAW;AACX,YAAM,EAAE,MAAM,SAAS,IAAI;AAC3B,YAAM,SAAS,GAAG,eAAe,MAAM,GAAG,yBAAyB,CAAC;AACpE,UAAI,UAAU,GAAG,aAAa;AAC1B,mBAAW,WAAW,UAAU;AAC5B,kBAAQ,OAAO,cAAc;AAAA,QACjC;AACA,aAAK,gBAAgB;AAAA,MACzB,WAAW,UAAU,GAAG,iBAAiB;AAGrC,WAAG,WAAW,GAAG,mBAAmB,YAAY,IAAI;AACpD,WAAG,iBAAiB,GAAG,mBAAmB,GAAG,YAAY,IAAI;AAC7D,WAAG,WAAW,GAAG,mBAAmB,IAAI;AAExC,mBAAW,WAAW,UAAU;AAC5B,kBAAQ,QAAQ;AAAA,QACpB;AACA,aAAK,gBAAgB;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,kBAAkB;AACtB,SAAK,GAAG,WAAW,KAAK,WAAW,QAAQ,IAAI;AAC/C,SAAK,YAAY;AAAA,EACrB;AACJ;;;;;;ACzJO,IAAM,cAAN,MAAkB;AAAA,EAGb,YAAqB,IAAqC,MAA+B,YAA8B;AAAlG;AAAqC;AAA+B;AAC7F,SAAK,WAAW,IAAI,IAAI;AAAA,EAC5B;AAAA,EAJiB,cAAc,oBAAI,IAAmC;AAAA,EAMtE,OAAiB,OAAO,IAA4B,MAAc,YAA8B;AAC5F,WAAO,IAAI,YAAY,IAAI,MAAM,UAAU;AAAA,EAC/C;AAAA,EAEA,IAAI,eAA+C;AAC/C,UAAM,EAAE,YAAY,IAAI;AACxB,cAAU,UAAU;AAChB,iBAAW,SAAS,YAAY,OAAO,GAAG;AACtC,mBAAW,QAAQ,OAAO;AACtB,gBAAM,EAAE,GAAG,KAAK;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,QAAQ;AAAA,EACnB;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EAEA,aAAa,QAAsB;AAC/B,WAAO,KAAK,IAAI,eAAe,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,UAAU,QAAQ,OAAO,MAAM,UAAU,YAAY,MAAM,EAAE,CAAC;AAAA,EAC3H;AAAA,EAEA,kBAAkB,QAA2B;AACzC,WAAO,KAAK,IAAI,oBAAoB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,cAAc,CAAC;AAAA,EACjF;AAAA,EAEA,cAAc,QAAuB;AACjC,WAAO,KAAK,IAAI,gBAAgB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,UAAU,CAAC;AAAA,EACzE;AAAA,EAEA,mBAAmB,QAA4B;AAC3C,UAAM,MAAM,qBAAqB,KAAK,IAAI,MAAM;AAChD,SAAK,IAAI,IAAI,SAAS,EAAE,MAAM,UAAU,CAAC;AACzC,WAAO;AAAA,EACX;AAAA,EAEA,mBAAmB,QAA4B;AAC3C,WAAO,KAAK,IAAI,qBAAqB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,gBAAgB,UAAU,kBAAkB,KAAK,IAAI,MAAM,EAAE,CAAC;AAAA,EACjI;AAAA,EAEA,cAAc,QAAuB;AACjC,WAAO,KAAK,IAAI,gBAAgB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,UAAU,CAAC;AAAA,EACzE;AAAA,EAEA,cAAc,QAAuB;AACjC,WAAO,KAAK,IAAI,gBAAgB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,WAAW,QAAQ,OAAO,MAAM,UAAU,aAAa,MAAM,EAAE,CAAC;AAAA,EAC9H;AAAA,EAEA,0BAA0B;AACtB,WAAO,KAAK,IAAI,KAAK,GAAG,wBAAwB,GAAI,EAAE,MAAM,oBAAoB,CAAC;AAAA,EACrF;AAAA,EAEA,kBAAkB,QAAmD;AACjE,WAAO,KAAK,IAAI,oBAAoB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,cAAc,CAAC;AAAA,EACjF;AAAA,EAEQ,IAA6B,UAAa,MAAuB;AACrE,YAAQ,OAAO,SAAS,YAAY,KAAK,WAAW,OAAO,CAAC;AAC5D,QAAI,CAAC,KAAK,YAAY,IAAI,QAAQ,GAAG;AACjC,WAAK,YAAY,IAAI,UAAU,CAAC,IAAI,CAAC;AAAA,IACzC,OAAO;AACH,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,UAAqD,WAA8C;AAC3G,UAAM,eAA+B,CAAC;AACtC,YAAQ,OAAO,UAAU,SAAS,CAAC;AACnC,SAAK,IAAI,WAAW,YAAY;AAChC,UAAM,aAAa,KAAK,YAAY,IAAI,KAAK;AAC7C,QAAI,YAAY;AACZ,iBAAW,KAAK,GAAG,YAAY;AAAA,IACnC;AAAA,EACJ;AAAA,EAEA,UAAU,WAA8C;AACpD,SAAK,IAAI,SAAS;AAAA,EACtB;AAAA,EAEQ,IAAI,WAA8C,aAA8B;AACpF,UAAM,EAAE,IAAI,YAAY,IAAI;AAC5B,eAAW,YAAY,WAAW;AAC9B,UAAI,CAAC;AACD;AACJ,YAAM,QAAQ,KAAK,YAAY,IAAI,QAAQ;AAC3C,UAAI,SAAS,MAAM,SAAS,GAAG;AAC3B,mBAAW,QAAQ,OAAO;AACtB,uBAAa,KAAK,IAAI;AAAA,QAC1B;AACA,cAAM,CAAC,OAAO,IAAI;AAClB,WAAG,SAAS,QAAQ,MAAM,EAAE,QAAQ;AACpC,oBAAY,OAAO,QAAQ;AAAA,MAC/B,OAAO;AACH,cAAM,IAAI,MAAM,8BAA8B;AAAA,MAClD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,YAAY;AACR,SAAK,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC;AACtC,SAAK,YAAY,MAAM;AAAA,EAC3B;AAAA,EAEA,UAAU;AACN,QAAI,KAAK,IAAI;AACT,WAAK,UAAU;AACf,WAAK,WAAW,OAAO,IAAI;AAAA,IAC/B;AAAA,EACJ;AACJ;AAEA,SAAS,YAAY,QAAsB;AACvC,SAAO,cAAc,SAAS,OAAO,WAAW,OAAO,QAAQ;AACnE;AAEA,SAAS,kBAAkB,IAA4B,QAA4B;AAC/E,QAAM,EAAE,OAAO,QAAQ,eAAe,IAAI;AAC1C,QAAM,UAAU,OAAO,WAAW,QAAQ,SAAS,EAAE,EAAE,cAAc,OAAO,WAAW;AACvF,QAAM,gBAAgB,KAAK,KAAK,yBAAyB,cAAc,CAAC;AACxE,SAAO,QAAQ,SAAS,gBAAgB;AAC5C;AAEA,SAAS,aAAa,QAAuB;AACzC,QAAM,QAAQ,OAAO,SAAS,OAAO,MAAM;AAC3C,QAAM,SAAS,OAAO,UAAU,OAAO,MAAM;AAC7C,QAAM,QAAQ,WAAW,SAAS,OAAO,QAAQ;AACjD,QAAM,QAAQ,OAAO,QAAQ,qBAAqB,IAAI;AACtD,QAAM,iBAAiB,QAAQ,SAAS,QAAQ;AAChD,MAAI,cAAc;AAClB,MAAI,SAAS;AACb,MAAI,aAAa,QAAQ;AACrB,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,WAAW,OAAO,WAAW;AACnC,aAAS,WAAW,UAAU,QAAQ;AAAA,EAC1C;AACA,MAAI,qBAAqB,UAAU,OAAO,mBAAmBC,YAAW,KAAK,KAAKA,YAAW,MAAM,GAAG;AAClG,aAAS,KAAK,IAAI,KAAK,KAAK,KAAK,GAAG,KAAK,KAAK,MAAM,CAAC;AAAA,EACzD;AACA,WAAS,QAAQ,GAAG,QAAQ,QAAQ,SAAS;AACzC,mBAAe,kBAAkB;AAAA,EACrC;AACA,QAAM,gBAAgB,KAAK,KAAK,yBAAyB,OAAO,cAAc,CAAC;AAC/E,SAAO,KAAK,KAAK,cAAc,aAAa;AAChD;AAyBA,SAASC,YAAW,OAAe;AAC/B,UAAQ,QAAS,QAAQ,MAAO;AACpC;AAgBA,IAAM,2BAA2B;AAAA,EAC7B,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,mBAAmB;AAAA,EACnB,aAAa;AAAA,EACb,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,OAAO;AAAA,EACP,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,SAAS;AAAA,EACT,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,SAAS;AAAA,EACT,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,kBAAkB;AAAA,EAClB,WAAW;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,qBAAqB;AAAA,EACrB,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,qBAAqB;AAAA;AAAA,EAErB,gCAAgC;AAAA,EAChC,iCAAiC;AAAA,EACjC,iCAAiC;AAAA,EACjC,iCAAiC;AAAA;AAAA,EAEjC,iCAAiC;AAAA,EACjC,uCAAuC;AAAA,EACvC,uCAAuC;AAAA,EACvC,uCAAuC;AAAA;AAAA,EAEvC,sBAAsB;AAAA,EACtB,6BAA6B;AAAA,EAC7B,uBAAuB;AAAA,EACvB,8BAA8B;AAAA,EAC9B,wBAAwB;AAAA,EACxB,6BAA6B;AAAA,EAC7B,yBAAyB;AAAA,EACzB,oCAAoC;AAAA,EACpC,4CAA4C;AAAA,EAC5C,6CAA6C;AAAA;AAAA,EAE7C,mCAAmC;AAAA,EACnC,oCAAoC;AAAA,EACpC,mCAAmC;AAAA,EACnC,oCAAoC;AAAA;AAAA,EAEpC,6BAA6B;AAAA;AAAA,EAE7B,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,iCAAiC,MAAM,KAAK;AAAA,EAC5C,yCAAyC,MAAM,KAAK;AAAA,EACpD,iCAAiC,MAAM,KAAK;AAAA,EAC5C,yCAAyC,MAAM,KAAK;AAAA,EACpD,kCAAkC,MAAM,KAAK;AAAA,EAC7C,0CAA0C,MAAM,KAAK;AAAA,EACrD,kCAAkC,MAAM,KAAK;AAAA,EAC7C,0CAA0C,MAAM,KAAK;AAAA,EACrD,kCAAkC,MAAM,KAAK;AAAA,EAC7C,0CAA0C,MAAM,KAAK;AAAA;AAAA,EAErD,kCAAkC;AAAA,EAClC,wCAAwC;AAAA,EACxC,wCAAwC;AAAA,EACxC,0CAA0C;AAAA;AAAA,EAE1C,4BAA4B;AAAA,EAC5B,mCAAmC;AAAA,EACnC,kCAAkC;AAAA,EAClC,yCAAyC;AAC7C;;;ACjUO,SAAS,aAAa,QAA4B,OAA6D,YAAY;AAC9H,MAAI,QAAQ;AACR,QAAI,eAAe,KAAK,MAAM;AAC9B,QAAIC,OAAM,aAAa;AACvB,UAAM,QAAQ,IAAI,KAAKA,IAAG;AAC1B,aAAS,IAAI,GAAG,IAAIA,MAAK,KAAK;AAC1B,YAAM,CAAC,IAAI,aAAa,WAAW,CAAC;AAAA,IACxC;AACA,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,+BAA+B,OAAmC;AAC9E,QAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AAC3B,QAAM,QAAQ,aAAK,WAAW,IAAI,IAAI,EAAE;AACxC,QAAM,OAAO,KAAK,MAAM,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI;AACpD,QAAM,QAAQ,aAAK,WAAW,GAAG,GAAG,CAAC;AACrC,QAAM,IAAI,IAAI;AACd,QAAM,QAAQ,aAAK,MAAM,aAAK,OAAO,GAAG,OAAO,KAAK;AACpD,eAAK,MAAM,OAAO,OAAO,KAAK;AAC9B,eAAK,UAAU,OAAO,KAAK;AAC3B,eAAK,MAAM,OAAO,OAAO,KAAK;AAC9B,eAAK,UAAU,OAAO,KAAK;AAC3B,QAAM,CAAC,IAAI,IAAI,EAAE,IAAI;AACrB,QAAM,CAAC,IAAI,IAAI,EAAE,IAAI;AACrB,SAAO,aAAK;AAAA,IACR;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACZ;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACZ;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACZ,KAAK,CAAC;AAAA,IAAM,KAAK,CAAC;AAAA,IAAM,KAAK,CAAC;AAAA,IAAM;AAAA,EACxC;AACJ;;;ACrBO,IAAM,iBAAN,MAAoB;AAAA,EA4DvB,YAAqB,eAAuC,QAAoC,MAAoB,SAA6B,SAAkC;AAA9J;AAAuC;AAAoC;AAE5F,UAAM,KAAK,OAAO,WAAW,UAAU,OAAO;AAC9C,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,mCAAmC;AACvD,SAAK,KAAK;AACV,UAAM,aAAa,aAAa,IAAI,IAAI;AACxC,UAAM,aAAa,KAAK,qBAAqB,KAAK,YAAY,SAAS;AACvE,UAAM,SAAS,KAAK,iBAAiB,KAAK,YAAY,KAAK;AAC3D,YAAQ,OAAO,WAAW,eAAe,MAAM,WAAW,aAAa,MAAM,WAAW,oBAAoB,IAAI;AAChH,UAAM,EAAE,gBAAgB,IAAI;AAC5B,QAAI,iBAAiB;AACjB,sBAAgB,qBAAqB,gBAAgB,6BAA6B;AAAA,IACtF;AACA,SAAK,cAAc;AAGnB,OAAG,YAAY,GAAG,oCAAoC,GAAG,IAAI;AAC7D,UAAM,YAAY,EAAE,MAAM,cAAc,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,QAAQ;AACvG,SAAK,UAAU,WAAW,cAAc,SAAS;AACjD,SAAK,gBAAgB,WAAW,cAAc,EAAE,oBAAoB,UAAU,qBAAqB,UAAU,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AACvJ,SAAK,aAAa,WAAW,cAAc,EAAE,oBAAoB,wBAAwB,qBAAqB,UAAU,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AAGlK,UAAM,MAAM,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC;AAC/C,UAAM,OAAO,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC;AAChD,UAAM,SAAS,IAAI,WAAW,CAAC,IAAI,IAAI,IAAI,GAAG,CAAC;AAC/C,UAAM,QAAQ,CAAC,MAAM,MAAM,KAAK,QAAQ,MAAM,IAAI;AAClD,UAAM,gBAAgB,KAAK,0BAA0B,EAAE,MAAM,oBAAoB,OAAO,GAAG,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,MAAa;AACnK,SAAK,cAAc;AAAA,MACf,SAAS,OAAO,cAAc,aAAa;AAAA,MAC3C,UAAU,OAAO,cAAc,aAAa;AAAA,MAC5C,YAAY;AAAA,MACZ,SAAS;AAAA,IACb;AAGA,SAAK,qBAAqB,WAAW;AAAA,MACjC,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,uBAAuB;AAAA,MACvB,uBAAuB;AAAA,MACvB,YAAY;AAAA,MACZ,MAAM;AAAA,IACV,CAAC;AACD,SAAK,iBAAiB,eAAe,IAAI,EAAE,MAAM,kBAAkB,UAAU,KAAK,mBAAmB,OAAO,WAAW,CAAC;AAGxH,SAAK,uBAAuB,WAAW;AAAA,MACnC,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,MAAM;AAAA,IACV,CAAC;AACD,SAAK,mBAAmB,eAAe,IAAI,EAAE,MAAM,kBAAkB,UAAU,KAAK,qBAAqB,OAAO,WAAW,CAAC;AAG5H,SAAK,uBAAuB,WAAW;AAAA,MACnC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,OAAO;AAAA,IACX,CAAC;AACD,SAAK,kBAAkB,eAAe,IAAI,EAAE,MAAM,kBAAkB,UAAU,KAAK,qBAAqB,OAAO,WAAW,CAAC;AAAA,EAC/H;AAAA,EA/HQ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACE,wBAAwB,aAAK,OAAO;AAAA,EAC7B,gBAAoC,CAAC;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AAAA,EACQ,eAAe,oBAAI,IAAiB;AAAA,EACpC;AAAA,EACA;AAAA,EACT,mBAAmB;AAAA,EACnB;AAAA,EACA,eAAe,oBAAI,IAAW;AAAA,EAC9B,mBAAmB;AAAA,EACnB,aAAa;AAAA,IACjB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,WAAW;AAAA,IACX,WAAW;AAAA,EACf;AAAA,EACQ;AAAA;AAAA;AAAA,EAOC,aAAa;AAAA;AAAA,EAGd,UAAU;AAAA,EACV,iBAAiB,aAAK,OAAO;AAAA,EAC7B,kBAAkB,aAAK,OAAO;AAAA,EAC9B,wBAAwB,aAAK,OAAO;AAAA;AAAA,EAGnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA;AAAA,EAGT;AAAA,EACA,UAAU;AAAA;AAAA,EACV,QAAQ;AAAA;AAAA,EACR,UAAyB;AAAA;AAAA,EACzB;AAAA,EAMA,cAAc;AAAA,EAyEd,MAAM,KAAK,SAAmC;AAE1C,QAAI,CAAC,SAAS;AACV,qBAAc,mBAAmB,qBAAqB;AACtD,gBAAU,eAAc;AAAA,IAC5B;AACA,UAAM,iBAAiB,QAAQ,IAAI,CAAC,GAAG,MAAM;AACzC,YAAM,MAAM,EAAE,YAAY,IAAI;AAC9B,aAAO,UAAU,GAAG,IAAI,MAAM,QAAQ,QAAQ,GAAG;AAAA,IACrD,CAAC;AACD,SAAK,kBAAkB;AACvB,SAAK,UAAU,MAAM,QAAQ,IAAI,cAAc;AAAA,EACnD;AAAA,EAEQ,oBAAoB;AAExB,UAAM,EAAE,IAAI,cAAc,IAAI;AAC9B,eAAW,EAAE,QAAQ,KAAK,KAAK,eAAe;AAC1C,SAAG,YAAY,OAAO;AAAA,IAC1B;AACA,OAAG,WAAW,IAAI;AAGlB,UAAM,MAAM,aAAa,EAAE,EAAE;AAC7B,aAAS,oBAAoB;AACzB,eAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,cAAM,EAAE,SAAS,SAAS,OAAO,IAAI,cAAc,CAAC;AACpD,YAAI,KAAK;AACL,cAAI,CAAC,GAAG,oBAAoB,SAAS,IAAI,qBAAqB;AAC1D;AAAA,QACR;AACA,cAAM,CAAC,IAAI,IAAI,cAAc,OAAO,KAAK,CAAC;AAC1C,cAAM,QAAQ,eAAe,IAAI,IAAI;AACrC,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,OAAO;AACH,kBAAQ;AAAA,QACZ;AAAA,MACJ;AACA,UAAI,cAAc,SAAS,GAAG;AAC1B,mBAAW,iBAAiB;AAAA,MAChC;AAAA,IACJ;AACA,sBAAkB;AAAA,EACtB;AAAA,EAEA,UAAU;AACN,UAAM,EAAE,SAAS,SAAS,cAAc,oBAAoB,eAAe,IAAI;AAC/E,SAAK,KAAK;AACV,eAAW,SAAS,cAAc;AAC9B,YAAM,QAAQ;AAAA,IAClB;AACA,iBAAa,MAAM;AACnB,QAAI,SAAS;AACT,iBAAW,UAAU,SAAS;AAC1B,gBAAQ,QAAQ;AAAA,MACpB;AACA,WAAK,UAAU;AAAA,IACnB;AACA,aAAS,QAAQ;AACjB,mBAAe,QAAQ;AACvB,uBAAmB,QAAQ;AAC3B,YAAQ,OAAO,KAAK,aAAa,QAAQ,CAAC;AAAA,EAC9C;AAAA,EAEA,IAAI,QAAQ;AACR,WAAO,KAAK,GAAG;AAAA,EACnB;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK,GAAG;AAAA,EACnB;AAAA,EAEA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,cAAc;AACV,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EAEA,gBAAgB;AACZ,WAAO,KAAK,GAAG,cAAc;AAAA,EACjC;AAAA,EAEA,kBAAkB;AACd,WAAO,EAAE,gBAAgB,KAAK,gBAAgB,iBAAiB,KAAK,iBAAiB,uBAAuB,KAAK,sBAAsB;AAAA,EAC3I;AAAA;AAAA,EAGA,YAAY,uBAAiF;AACzF,UAAM,gBAAgB;AACtB,WAAO;AAAA,MACH,gCAAoC,sBAAsB;AAAA,MAC1D,+BAAmC,sBAAsB;AAAA,IAC7D;AAAA,EACJ;AAAA;AAAA,EAGA,oBAAoB,eAA4B,OAAsB;AAClE,QAAI,CAAC,MAAM,WAAW,SAAS;AAC3B,YAAM,EAAE,OAAO,IAAI,IAAI,MAAM;AAC7B,qBAAe,KAAK,IAAI,EAAE,MAAM,kBAAkB,SAAS,MAAM,QAAQ,cAAc,eAAe,kBAAkB,OAAO,eAAe,OAAO,UAAU,MAAM,MAAM,CAAC;AAC5K,YAAM,WAAW,MAAM;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA,EAGA,kBAAkB,QAA+H;AAC7I,UAAM,EAAE,eAAe,IAAI;AAC3B,mBAAe,UAAU;AACzB,QAAI,QAAQ;AACR,YAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,WAAK,cAAc;AAAA,QACf,SAAS,eAAe,cAAc,OAAO;AAAA,QAC7C,UAAU,eAAe,cAAc,QAAQ;AAAA,QAC/C,YAAY,OAAO,SAAS,WAAW,WAAW,SAAS,UAAU,SAAS,QAAQ;AAAA,QACtF,SAAS;AAAA,MACb;AAAA,IACJ,OAAO;AACH,WAAK,cAAc;AAAA,QACf,SAAS,eAAe,cAAc,KAAK,uBAAuB;AAAA,QAClE,UAAU,eAAe,cAAc,KAAK,uBAAuB;AAAA,QACnE,YAAY;AAAA,QACZ,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGA,gBAAgB,OAAoC;AAChD,UAAM,EAAE,UAAU,IAAI;AACtB,QAAI,UAAU;AAEd,eAAW,QAAQ,OAAO;AACtB,YAAM,IAAI;AACV,UAAI,CAAC,aAAa,UAAU,CAAC,MAAM,MAAM,CAAC,GAAG;AACzC,kBAAU;AACV;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAGA,YAAY,MAAc;AACtB,WAAO,YAAY,QAAQ,EAAE,KAAK,IAAI,MAAM,KAAK,YAAY;AAAA,EACjE;AAAA;AAAA,EAGA,iBAAiB,aAA0B,QAA4B;AACnE,UAAM,EAAE,IAAI,YAAY,IAAI;AAC5B,UAAM,EAAE,cAAc,eAAe,IAAI;AACzC,UAAM,SAAS,EAAE,aAAa,GAAG,OAAO,OAAO;AAC/C,UAAM,eAAe,YAAY,mBAAmB,EAAE,QAAQ,cAAc,eAAe,CAAC;AAC5F,UAAM,EAAE,QAAQ,IAAI;AAGpB,UAAM,EAAE,YAAY,mBAAmB,qBAAqB,gBAAgB,IAAI;AAChF,QAAI,YAAY;AACZ,UAAI,IAAI;AACR,iBAAW,QAAQ,YAAY;AAC3B,WAAG,mBAAmB,SAAS,KAAK,IAAI;AAAA,MAC5C;AAAA,IACJ;AACA,QAAI,mBAAmB;AACnB,YAAM,EAAE,UAAU,WAAW,IAAI;AACjC,SAAG,0BAA0B,SAAS,UAAU,GAAG,UAAU,CAAC;AAAA,IAClE;AAEA,WAAO,IAAI,QAAsB,CAAC,SAAS,WAAW;AAElD,eAAS,WAAW;AAChB,WAAG,WAAW,OAAO;AAErB,YAAI,qBAAqB;AACrB,cAAI,MAAM;AACV,qBAAW,QAAQ,qBAAqB;AACpC,gBAAI,MAAM;AACN,oBAAM,aAAa,GAAG,qBAAqB,SAAS,IAAI;AACxD,kBAAI,cAAc,GAAG,eAAe;AAChC,mBAAG,oBAAoB,SAAS,YAAY,GAAG;AAAA,cACnD,OAAO;AACH,wBAAQ,KAAK,sCAAsC,OAAO;AAAA,cAC9D;AAAA,YACJ;AACA;AAAA,UACJ;AAAA,QACJ;AAEA,YAAI,iBAAiB;AACjB,cAAI,IAAI;AACR,qBAAW,QAAQ,iBAAiB;AAChC,kBAAM,WAAW,GAAG,mBAAmB,SAAS,IAAI;AACpD,eAAG,UAAU,UAAU,GAAG;AAAA,UAC9B;AAAA,QACJ;AAEA,WAAG,WAAW,IAAI;AAClB,gBAAQ,OAAO;AAAA,MACnB;AACA,WAAK,cAAc,KAAK,EAAE,GAAG,cAAc,SAAS,UAAU,OAAO,CAAC;AAAA,IAC1E,CAAC;AAAA,EACL;AAAA,EAEQ,wBAAwB;AAC5B,UAAM,EAAE,WAAW,IAAI;AACvB,eAAW,SAAS;AACpB,eAAW,QAAQ;AACnB,eAAW,YAAY;AACvB,eAAW,YAAY;AAAA,EAC3B;AAAA;AAAA,EAGU,oBAAoB,OAAuB,YAAY,GAAG;AAChE,UAAM,EAAE,WAAW,IAAI;AACvB,eAAW,UAAU,MAAM;AAC3B,eAAW,SAAS,MAAM;AAC1B,eAAW,aAAa,MAAM;AAC9B,eAAW,aAAa;AAAA,EAC5B;AAAA;AAAA,EAGU,cAAc;AACpB,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,SAAS;AACT,iBAAW,UAAU,SAAS;AAC1B,gBAAQ,YAAY;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGA,mBAAmB,OAA2B;AAC1C,UAAM,MAAM,aAAa,KAAK,EAAE,EAAE;AAClC,QAAI,KAAK;AACL,UAAI,SAAS,QAAQ;AACjB,YAAI,YAAY;AAAA,MACpB,OAAO;AACH,YAAI,eAAe;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,OAAO;AACV,SAAK,SAAS,cAAc;AAC5B,SAAK,WAAW;AAAA,EACpB;AAAA,EAEQ,aAAoB;AACxB,UAAM,QAAQ,cAAc,KAAK,IAAI,KAAK;AAC1C,SAAK,aAAa,IAAI,KAAK;AAC3B,UAAM,MAAM;AACZ,WAAO;AAAA,EACX;AAAA,EAEQ,aAAa;AACjB,UAAM,EAAE,aAAa,IAAI;AACzB,eAAW,SAAS,CAAC,GAAG,YAAY,GAAG;AACnC,UAAI,MAAM,KAAK,GAAG;AACd,qBAAa,OAAO,KAAK;AACzB,cAAM,QAAQ;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAc,UAAU,SAAqD;AACzE,WAAO,IAAI,QAAgB,CAAC,YAAY;AACpC,4BAAsB,CAAC,SAAS;AAC5B,YAAI,SAAS;AACT,gBAAM,EAAE,UAAU,IAAI;AACtB,cAAI,WAAW;AACX,sBAAU,QAAQ,OAAO,UAAU,IAAI;AACvC,oBAAQ,YAAY;AAAA,UACxB;AACA,kBAAQ,mBAAmB;AAAA,QAC/B;AACA,gBAAQ,IAAI;AAAA,MAChB,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEA,MAAa,OAAO,OAAoB;AACpC,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AACA,UAAM,YAAY,YAAY,IAAI;AAClC,UAAM,EAAE,IAAI,QAAQ,UAAU,IAAI;AAClC,SAAK,UAAU;AACf,SAAK,mBAAmB;AAExB,SAAK,sBAAsB;AAE3B,UAAM,YAAY,KAAK,WAAW;AAElC,UAAM,EAAE,YAAY,IAAI,SAAS,EAAE;AACnC,UAAM,uBAAuB,KAAK,IAAI,GAAG,KAAK,IAAI,aAAa,KAAK,IAAI,KAAK,cAAc,OAAO,YAAY,MAAM,OAAO,WAAW,CAAC,CAAC;AAGxI,QAAI,UAAU;AACd,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,KAAK,gBAAgB,EAAE,OAAO,CAAC,GAAG;AAClC,YAAM,EAAE,OAAAC,QAAO,QAAAC,QAAO,IAAI;AAC1B,cAAQ,OAAO,OAAO,UAAUD,MAAK,KAAK,OAAO,UAAUC,OAAM,CAAC;AAClE,aAAO,QAAQD;AACf,aAAO,SAASC;AAChB,gBAAU;AACV,WAAK,UAAU;AACf,WAAK,SAAS,QAAQ;AACtB,WAAK,UAAU,IAAI,cAAc,IAAID,QAAOC,SAAQ,sBAAsB,KAAK,YAAY,cAAc,CAAC;AAAA,IAC9G;AAGA,UAAM,eAAe;AACrB,iBAAa,uBAAuB;AACpC,QAAI,WAAW,MAAM,WAAW,WAAW,QAAQ;AAC/C,YAAM,WAAW;AACjB,YAAMC,QAAO,KAAK,IAAI,GAAG,aAAK,IAAI,aAAK,OAAO,GAAG,MAAM,OAAO,UAAU,KAAK,qBAAqB,EAAE,IAAI,OAAK,KAAK,IAAI,CAAC,CAAC,CAAC;AAEzH,UAAIA,SAAQ,UAAU;AAClB,YAASC,QAAT,SAAc,GAAW;AACrB,iBAAO,KAAK,MAAM,IAAI,QAAQ,IAAI;AAAA,QACtC;AAFS,mBAAAA;AAGT,aAAK,wBAAwB,aAAK,WAAW,GAAI,MAAM,OAAO,SAAS,IAAI,OAAKA,MAAK,CAAC,CAAC,CAA8B;AAAA,MACzH;AAEA,mBAAa,wBAAwB,KAAK;AAC1C,mBAAa,WAAW,wBAAwB,KAAK;AACrD,mBAAa,cAAc,kBAAkB,OAAO,aAAa,QAAQ;AAAA,IAC7E;AACA,SAAK,qBAAqB,YAAY;AACtC,SAAK,uBAAuB,YAAY;AACxC,SAAK,uBAAuB,YAAY;AAGxC,SAAK,UAAU,aAAa,OAAO,QAAQ;AAC3C,iBAAK,KAAK,KAAK,gBAAgB,aAAa,SAAS,oCAA0C,CAAC;AAChG,iBAAK,KAAK,KAAK,iBAAiB,aAAa,SAAS,qCAA2C,CAAC;AAClG,iBAAK,KAAK,KAAK,uBAAuB,aAAa,SAAS,2CAAiD,CAAC;AAG9G,QAAI,CAAC,KAAK,OAAO;AACb,iBAAW,UAAU,KAAK,SAAS;AAC/B,gBAAQ,OAAO,YAAY;AAAA,MAC/B;AAAA,IACJ;AAGA,SAAK,kBAAkB;AAGvB,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,EAAE,QAAQ,IAAI;AACpB,YAAQ,wBAAwB;AAChC,UAAM,kBAAkB,uBAAuB,IAAI,cAAc;AACjE,UAAM,cAAc,QAAQ,aAAa,eAAe;AACxD,YAAQ,WAAW,4BAAgC;AACnD,YAAQ,IAAI,EAAE,UAAU,EAAE,OAAO,OAAO,GAAG,YAAY,CAAC;AACxD,YAAQ,IAAI,EAAE,MAAM,iBAAiB,OAAO,GAAK,SAAS,EAAE,CAAC;AAG7D,QAAI,KAAK,YAAY;AACjB,iBAAW,UAAU,KAAK,SAAS;AAC/B,YAAI,UAAU,OAAO,SAAS;AAC1B,kBAAQ,IAAI;AAAA,YACR,UAAU,EAAE,OAAO,OAAO;AAAA,YAC1B;AAAA,YACA,aAAa,CAAC;AAAA;AAAA,UAElB,CAAC;AACD,iBAAO,QAAQ,YAAY;AAE3B,kBAAQ,IAAI,IAAI;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ;AAGA,eAAW,UAAU,KAAK,SAAS;AAC/B,UAAI,QAAQ;AACR,gBAAQ,IAAI;AAAA,UACR,UAAU,EAAE,OAAO,OAAO;AAAA,UAC1B;AAAA,UACA,aAAa,KAAK,yBAA6B;AAAA,UAC/C,QAAQ,EAAE,iBAAiB,uBAAuB,EAAE;AAAA,QACxD,CAAC;AACD,eAAO,OAAO,YAAY;AAE1B,gBAAQ,IAAI,IAAI;AAAA,MACpB;AAAA,IACJ;AAEA,cAAU,IAAI;AAGd,SAAK,QAAQ,WAAW,0CAAkD;AAC1E,SAAK,QAAQ,WAAW,sCAA8C;AACtE,SAAK,YAAY;AACjB,UAAM,UAAU,YAAY,IAAI;AAEhC,UAAM,kBAAkB,IAAI,QAAgB,CAAC,YAAY;AACrD,WAAK,YAAY,EAAE,MAAM,KAAK,kBAAkB,QAAQ;AAAA,IAC5D,CAAC;AAED,UAAM,QAAQ,EAAE,GAAG,KAAK,YAAY,aAAa,GAAG,cAAc,EAAE;AACpE,eAAW,OAAO,KAAK,cAAc;AACjC,iBAAW,EAAE,MAAM,SAAS,KAAK,IAAI,cAAc;AAC/C,YAAI,QAAQ,YAAY,QAAQ,gBAAgB;AAC5C,gBAAM,eAAe;AAAA,QACzB;AACA,YAAI,QAAQ,WAAW;AACnB,gBAAM,gBAAgB;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,CAAC,aAAa,aAAa,IAAI,MAAM,QAAQ,IAAI,CAAC,UAAU,SAAS,eAAe,CAAC;AAE3F,WAAO;AAAA,MACH,SAAS;AAAA,QACL,MAAM,UAAU;AAAA,MACpB;AAAA,MACA,SAAS;AAAA,QACL,MAAM;AAAA,MACV;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACP;AAAA,EACJ;AAAA;AAAA,EAGA,oBAAoB;AAChB,QAAI,CAAC,KAAK,kBAAkB;AACxB,UAAI,CAAC,KAAK,SAAS;AACf,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACvD;AACA,YAAM,EAAE,IAAI,OAAO,QAAQ,SAAS,UAAU,IAAI;AAClD,UAAI,CAAC,WAAW;AACZ,cAAM,IAAI,MAAM,0BAA0B;AAAA,MAC9C;AAEA,YAAM,cAA2B;AAAA,QAC7B,UAAU,EAAE,OAAO,OAAO;AAAA,QAC1B,aAAa,QAAQ,aAAa;AAAA,QAClC,aAAa,KAAK,wBAA4B;AAAA,QAC9C,OAAO,EAAE,MAAM,MAAM,WAAW,KAAK;AAAA,MACzC;AACA,cAAQ,IAAI,WAAW;AACvB,cAAQ,IAAI,EAAE,MAAM,iBAAiB,OAAO,GAAK,SAAS,EAAE,CAAC;AAE7D,cAAQ,IAAI,EAAE,MAAM,SAAS,YAAY,GAAG,MAAM,QAAQ,OAAO,CAAC,YAAY,GAAa,GAAa,UAAW,EAAE,CAAC;AAEtH,iBAAW,UAAU,KAAK,SAAS;AAC/B,YAAI,QAAQ;AACR,kBAAQ,IAAI,WAAW;AACvB,iBAAO,OAAO,SAAS;AAEvB,kBAAQ,IAAI,IAAI;AAAA,QACpB;AAAA,MACJ;AAEA,UAAI,UAAU,YAAY,uBAA+B;AAErD,cAAM,gBAAgB,KAAK,SAAS,KAAK,OAAK,EAAE,OAAO,QAAQ,SAAS;AACxE,gBAAQ,IAAI,EAAE,UAAU,EAAE,OAAO,OAAO,EAAE,CAAC;AAC3C,uBAAe,OAAO,SAAS;AAE/B,gBAAQ,IAAI,IAAI;AAAA,MACpB;AACA,WAAK,mBAAmB;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA,EAGA,CAAC,gBAAgB,MAA6C;AAC1D,UAAM,SAAS,IAAI,aAAa,KAAK,MAAM;AAC3C,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AACrC,YAAM,OAAO,CAAC;AAAA,IAClB;AAAA,EACJ;AAAA,EAEQ,qBAAqB,OAA2B;AACpD,UAAM,EAAE,oBAAoB,sBAAsB,IAAI;AACtD,UAAM,EAAE,QAAQ,QAAQ,SAAS,IAAI;AACrC,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,kBAAkB,SAAS,qCAA2C;AAC5E,UAAM,kBAAkB,SAAS,qCAA2C;AAC5E,UAAM,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAK,OAAO,aAAK,OAAO,GAAG,qBAAqB,CAAC;AAC9G,UAAM,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,qBAAqB;AAClF,WAAO,iBAAiB,SAAS,oCAA0C;AAC3E,WAAO,iBAAiB,SAAS,oCAA0C;AAC3E,WAAO,iBAAiB,SAAS,oCAA0C;AAC3E,WAAO,kBAAkB,aAAK,SAAS,aAAK,OAAO,GAAG,iBAAiB,gBAAgB;AACvF,WAAO,kBAAkB,aAAK,SAAS,aAAK,OAAO,GAAG,kBAAkB,eAAgB;AACxF,WAAO,wBAAwB,SAAS,2CAAiD;AACzF,WAAO,wBAAwB,SAAS,2CAAiD;AACzF,WAAO,aAAa,CAAC,OAAO,OAAO,OAAO,MAAM;AAChD,WAAO,OAAO,OAAO;AACrB,SAAK,oBAAoB,KAAK,gBAAgB,KAAK,kBAAkB;AAAA,EACzE;AAAA,EAEQ,uBAAuB,OAA2B;AACtD,UAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,QAAI,KAAK,gBAAgB,EAAE,UAAU,SAAS,CAAC,GAAG;AAC9C,YAAM,EAAE,kBAAkB,qBAAqB,IAAI;AACnD,YAAM,EAAE,OAAO,IAAI;AACnB,YAAM,EAAE,SAAS,MAAM,OAAO,IAAI;AAElC,YAAM,SAAS,aAAK,OAAO;AAC3B,YAAM,WAAW,aAAK,OAAO;AAC7B,YAAM,SAAS,SAAS,qCAA2C;AACnE,YAAM,eAAe,SAAS,2CAAiD;AAC/E,mBAAK,eAAe,UAAU,MAAM;AACpC,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,cAAM,EAAE,aAAa,IAAI,OAAO,CAAC;AACjC,cAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI;AAC1B,qBAAK,IAAI,QAAQ,GAAG,GAAG,CAAC;AACxB,qBAAK,cAAc,QAAQ,QAAQ,YAAY;AAC/C,cAAMC,YAAW,SAAS,aAAK,IAAI,UAAU,MAAM;AACnD,cAAM,QAAQ,aAAK,WAAW,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,CAACA,SAAQ;AACxE,cAAM,MAAM;AACZ,eAAO,UAAU,KAAc,IAAI;AAAA,MACvC;AACA,aAAO,WAAW,IAAI,UAAU,OAAO,SAAS;AAChD,aAAO,MAAM,IAAI;AACjB,WAAK,oBAAoB,kBAAkB,oBAAoB;AAAA,IACnE;AAAA,EACJ;AAAA,EAEQ,uBAAuB,OAA2B;AACtD,UAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,QAAI,KAAK,gBAAgB,EAAE,UAAU,SAAS,CAAC,GAAG;AAC9C,YAAM,EAAE,iBAAiB,qBAAqB,IAAI;AAClD,YAAM,EAAE,OAAO,MAAM,IAAI;AAEzB,YAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI;AAC1B,YAAM,SAAS,aAAK,WAAW,GAAG,GAAG,CAAC;AACtC,YAAMA,YAAW,SAAS,aAAK,IAAI,KAAK,uBAAuB,MAAM;AAErE,YAAM,UAAU,aAAK,WAAW,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,CAACA,SAAQ;AAI1E,YAAM,mBAAmB,+BAA+B,OAAO;AAC/D,YAAM,mBAAmB,aAAK,OAAO,aAAK,OAAO,GAAG,gBAAgB;AAEpE,YAAM,EAAE,OAAO,IAAI;AACnB,aAAO,mBAAmB;AAC1B,aAAO,mBAAmB;AAC1B,aAAO,QAAQ;AACf,WAAK,oBAAoB,iBAAiB,oBAAoB;AAAA,IAClE;AAAA,EACJ;AAAA,EAEQ,YAAY,YAAyB,GAAW,GAAW,kBAA0B,iBAA0B;AACnH,UAAM,EAAE,QAAQ,MAAM,OAAO,OAAO,IAAI;AACxC,UAAM,OAAO,OAAO,sBAAsB;AAC1C,UAAM,WAAW,KAAK;AACtB,UAAM,YAAY,KAAK;AAEvB,UAAM,KAAK,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,WAAW,KAAK,CAAC,GAAG,KAAK;AACxE,UAAM,KAAK,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,OAAO,KAAK,IAAI,OAAO,aAAa,MAAM,CAAC,GAAG,MAAM;AAEzF,UAAM,SAAS,IAAI,aAAa,WAAW,MAAM;AAGjD,UAAM,IAAI,KAAK,KAAK,gBAAgB;AACpC,UAAM,KAAK,mBAAmB;AAC9B,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,KAAK,IAAI;AAClB,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,KAAK,IAAI;AAClB,QAAI,KAAK;AAAG,WAAK;AACjB,QAAI,KAAK;AAAO,WAAK;AACrB,QAAI,KAAK;AAAG,WAAK;AACjB,QAAI,KAAK;AAAQ,WAAK;AACtB,UAAM,UAAwB,CAAC;AAC/B,UAAM,EAAE,SAAS,gBAAgB,iBAAiB,sBAAsB,IAAI;AAC5E,UAAM,SAAS;AAEf,aAAS,KAAK,IAAI,KAAK,IAAI,MAAM;AAC7B,YAAM,KAAK,KAAK;AAChB,eAAS,KAAK,IAAI,KAAK,IAAI,MAAM;AAC7B,cAAM,KAAK,KAAK;AAChB,YAAI,KAAK,KAAK,KAAK,KAAK;AACpB;AACJ,cAAM,WAAW,KAAK,KAAK;AAC3B,cAAM,WAAW,WAAW,WAAW,CAAC;AACxC,YAAI,YAAY,YAAY;AACxB,gBAAM,QAAQ,kBAAkB,IAAI,OAAO,WAAW,IAAI,CAAC;AAC3D,gBAAM,CAAC,MAAM,MAAM,MAAM,WAAW,IAAI,IAAI,YAAY,WAAW,QAAQ,WAAW,KAAK,GAAG,CAAC;AAC/F,gBAAM,KAAK,KAAK,QAAQ,IAAI;AAC5B,gBAAM,KAAK,KAAK,QAAQ,IAAI;AAC5B,gBAAM,KAAK,KAAK,QAAQ,IAAI;AAC5B,gBAAM,QAAQ,KAAK,QAAQ,WAAW;AACtC,gBAAM,YAAY,KAAK,IAAI,KAAK,IAAI,SAAS,QAAQ;AAIrD,gBAAM,OAAQ,KAAK,OAAO,QAAS,IAAI;AACvC,gBAAM,OAAQ,KAAK,OAAO,SAAU,IAAI;AAGxC,gBAAMC,SAAQ,UAAU,IAAI;AAC5B,gBAAM,QAAQ,aAAK,WAAY,MAAM,eAAe,CAAC,IAAKA,QAAQ,MAAM,eAAe,CAAC,IAAKA,QAAO,CAAC,KAAK;AAG1G,gBAAM,WAAW,aAAK,cAAc,aAAK,OAAO,GAAG,OAAO,eAAe;AACzE,gBAAM,SAAS,aAAK,WAAW,IAAI,IAAI,EAAE;AACzC,uBAAK,UAAU,QAAQ,MAAM;AAE7B,gBAAM,SAAS,EAAE,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,UAAU,QAAQ,UAAU,WAAW,MAAM;AACtF,kBAAQ,KAAK,MAAM;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,KAAK,GAAW,GAAW,SAA8C;AAC3E,UAAM,mBAAmB,SAAS,oBAAoB;AACtD,UAAM,YAAY,SAAS,SAAS;AACpC,UAAM,kBAAkB,SAAS,mBAAmB;AACpD,QAAI,mBAAmB;AACnB,aAAO,CAAC;AACZ,SAAK,kBAAkB;AACvB,UAAM,oBAAoB,KAAK,QAAQ,YAAY;AACnD,QAAI,WAAW;AACX,WAAK,eAAe,MAAM,mBAAmB;AAAA,IACjD,OAAO;AACH,wBAAkB,KAAK,CAAC,EAAE,KAAK,MAAM;AAAE,aAAK,cAAc;AAAA,MAAK,CAAC;AAAA,IACpE;AACA,UAAM,EAAE,aAAa,OAAO,OAAO,IAAI;AACvC,QAAI,gBAAgB,UAAa,QAAQ,SAAS,KAAK,YAAY,QAAQ;AACvE,aAAO,CAAC;AAAA,IACZ;AACA,WAAO,KAAK,YAAY,aAAa,GAAG,GAAG,kBAAkB,eAAe;AAAA,EAChF;AACJ;AAjwBO,IAAM,gBAAN;AACH,cADS,eACM;AAkwBnB,SAAS,UAAa,SAAgD;AAClE,SAAO,CAAC,CAAC,WAAW,OAAO,QAAQ,IAAI,SAAS,MAAM,MAAM;AAChE;;;;;;;;;;AC7wBA,eAAsB,kBAAkB;AACpC,QAAM,EAAE,SAAS,IAAI,MAAM,YAAY,YAAY,eAAQ;AAC3D,SAAO,SAAS;AACpB;;;ACTA,eAAsB,eAAe;AACjC,QAAM,UAAU,MAAM,gBAAgB;AAEtC,QAAM,WAAW,EAAE,GAAG,QAAQ;AAC9B,SAAO;AACX;;;;;;;;;;ACJA,IAAM,aAAa,IAAI,WAAW,CAAC,KAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAAM,IAAM,IAAM,IAAM,EAAI,CAAC;AAC1G,IAAM,aAAa,KAAM,KAAK;AAE9B,IAAM,kBAAkB;AAAA,EACpB,yBAAiB,GAAG;AAAA,EACpB,iCAAwB,GAAG;AAAA,EAC3B,mCAA0B,GAAG;AAAA,EAC7B,mCAA0B,GAAG;AAAA,EAC7B,sBAAc,GAAG;AAAA;AAAA,EAEjB,iBAAS,GAAG;AAAA,EACZ,0BAAkB,GAAG;AAAA,EACrB,wBAAgB,GAAG;AAAA,EACnB,8BAAqB,GAAG;AAAA,EACxB,gBAAQ,GAAG;AAAA,EACX,iBAAS,GAAG;AAAA,EACZ,eAAO,GAAG;AAAA;AAAA,EAEV,qCAA4B,GAAG;AAAA,EAC/B,wCAA+B,GAAG;AAAA,EAClC,yCAAgC,GAAG;AACvC;AAGA,IAAM,oBAAoB;AAAA,EACtB,eAAO,GAAG;AAAA,EACV,gBAAQ,GAAG;AAAA,EACX,iBAAS,GAAG;AAAA,EACZ,qBAAa,GAAG;AAAA,EAChB,2BAAmB,GAAG;AAAA,EACtB,2BAAmB,GAAG;AAAA,EACtB,0BAAiB,GAAG;AAAA,EACpB,qBAAY,GAAG;AAAA,EACf,2BAAkB,GAAG;AAAA,EACrB,eAAO,GAAG;AAAA,EACV,eAAM,GAAG;AAAA,EACT,wBAAe,GAAG;AAAA,EAClB,uBAAc,GAAG;AAAA,EACjB,wBAAe,GAAG;AAAA,EAClB,yBAAgB,GAAG;AACvB;AAGA,IAAM,4BAA4B;AAAA,EAC9B,eAAM,GAAG;AAAA,EACT,qBAAY,GAAG;AAAA,EACf,gBAAO,GAAG;AAAA,EACV,sBAAa,GAAG;AAAA,EAChB,iBAAQ,GAAG;AAAA,EACX,uBAAc,GAAG;AAAA,EACjB,mBAAU,GAAG;AAAA,EACb,kBAAS,GAAG;AAAA,EACZ,oBAAW,GAAG;AAAA,EACd,kBAAS,GAAG;AAAA,EACZ,wBAAe,GAAG;AAAA,EAClB,qBAAY,GAAG;AAAA,EACf,uBAAc,GAAG;AAAA,EACjB,kBAAS,GAAG;AAAA,EACZ,yBAAgB,GAAG;AAAA,EACnB,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,2BAAkB,GAAG;AAAA,EACrB,oBAAW,GAAG;AAAA,EACd,gBAAO,GAAG;AAAA,EACV,iBAAQ,GAAG;AAAA,EACX,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,oBAAW,GAAG;AAAA,EACd,qBAAY,GAAG;AAAA,EACf,oBAAW,GAAG;AAAA,EACd,qBAAY,GAAG;AAAA;AAEnB;AAIA,IAAM,0BAA0B;AAAA,EAC5B,yCAAgC,GAAG;AAAA,EACnC,0CAAiC,GAAG;AAAA,EACpC,0CAAiC,GAAG;AAAA,EACpC,0CAAiC,GAAG;AAAA,EACpC,+BAAsB,GAAG;AAAA,EACzB,sCAA6B,GAAG;AAAA,EAChC,gCAAuB,GAAG;AAAA,EAC1B,uCAA8B,GAAG;AAAA,EACjC,iCAAwB,GAAG;AAAA,EAC3B,sCAA6B,GAAG;AAAA,EAChC,kCAAyB,GAAG;AAAA,EAC5B,6CAAoC,GAAG;AAAA,EACvC,qDAA4C,GAAG;AAAA,EAC/C,sDAA6C,GAAG;AAAA,EAChD,4CAAmC,GAAG;AAAA,EACtC,6CAAoC,GAAG;AAAA,EACvC,4CAAmC,GAAG;AAAA,EACtC,6CAAoC,GAAG;AAAA,EACvC,sCAA6B,GAAG;AAAA;AAAA;AAAA;AAIpC;AAGA,IAAM,wBAAwB;AAAA,EAC1B,GAAG;AAAA,EACH,GAAG;AAAA;AAAA;AAAA;AAAA;AAKP;AAGA,SAAS,YAAY,KAAiB;AAClC,QAAM,aAAa,IAAI,SAAS,IAAI,QAAQ,IAAI,YAAY,EAAE;AAC9D,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACxC,QAAI,WAAW,SAAS,CAAC,KAAK,WAAW,CAAC,GAAG;AACzC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AAAA,EACJ;AAGA,QAAM,WAAW,YAAY;AAC7B,QAAM,iBAAiB,IAAI,SAAS,IAAI,QAAQ,KAAK,IAAI,YAAY,KAAK,QAAQ;AAClF,QAAM,aAAa,eAAe,UAAU,GAAG,IAAI;AACnD,QAAM,eAAe,eAAe;AAEpC,SAAO;AAAA,IACH,QAAQ,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC3D,YAAY,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC/D,UAAU,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC7D,kBAAkB,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IACrE,sBAAsB,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IACzE,YAAY,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC/D,aAAa,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAChE,YAAY,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC/D,uBAAuB,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC1E,eAAe,eAAe,UAAU,KAAK,UAAU,YAAY;AAAA;AAAA,IACnE,sBAAsB,eAAe,UAAU,KAAK,UAAU,YAAY;AAAA;AAAA,IAC1E,qBAAqB,eAAe,UAAU,KAAK,UAAU,YAAY;AAAA;AAAA,IACzE;AAAA,EACJ;AACJ;AAIA,UAAU,UAAU,QAAgB,KAAiB,cAAuB;AACxE,QAAM,OAAO,KAAK,IAAI,GAAG,OAAO,oBAAoB;AACpD,QAAM,WAAW,KAAK,IAAI,GAAG,OAAO,qBAAqB;AACzD,QAAM,QAAQ,OAAO;AACrB,QAAM,QAAQ,KAAK,IAAI,GAAG,OAAO,UAAU;AAC3C,MAAI,aAAa,aAAa,OAAO;AACrC,QAAM,iBAAkB,SAAS,KAAK,OAAO,yBAAyB,IAAK,IAAI,WAAW,QAAQ;AAClG,QAAM,WAAW,IAAI,SAAS,IAAI,QAAQ,IAAI,UAAU;AAExD,WAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACjC,UAAM,QAAQ,OAAO,cAAc;AACnC,UAAM,SAAS,OAAO,eAAe;AACrC,UAAM,YAAY,SAAS,SAAS,YAAY,YAAY;AAC5D,kBAAc;AACd,UAAM,cAAc,YAAY;AAChC,YAAQ,OAAO,cAAc,KAAK,CAAC;AACnC,aAAS,UAAU,GAAG,UAAU,UAAU,WAAW;AACjD,eAAS,OAAO,GAAG,OAAO,OAAO,QAAQ;AACrC,iBAAS,UAAU,GAAG,UAAU,OAAO,WAAW;AAE9C,gBAAM,QAAQ;AACd,wBAAc;AACd,gBAAM,MAAM;AACZ,gBAAM,QAAQ,EAAE,KAAK,SAAS,MAAM,OAAO,QAAQ,WAAW,CAAC,OAAO,GAAG,GAAG,QAAQ,IAAI,SAAS,OAAO,GAAG,EAAE;AAC7G,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,UAAQ,OAAO,cAAc,IAAI,UAAU;AAC/C;AAEO,SAAS,SAAS,KAAgC;AACrD,QAAM,SAAS,YAAY,GAAG;AAC9B,QAAM,EAAE,aAAa,IAAI;AACzB,QAAM,aAAa,kBAAkB,OAAO,oBAAoB;AAChE,QAAM,UAAU,OAAO,wBAAwB;AAC/C,QAAM,SAAS,OAAO,iBAAiB;AACvC,QAAM,OAAO,OAAO,aAAa;AACjC,QAAM,UAAU,OAAO,uBAAuB;AAC9C,QAAM,UAAU,KAAK,IAAI,GAAG,OAAO,oBAAoB;AACvD,QAAM,iBAAiB,sBAAsB,OAAO,gBAAgB;AACpE,QAAM,OAAO,UAAU,kBAAkB,SAAS,qBAAqB,OAAO,eAAe;AAC7F,QAAM,OAAO,OAAO,SAAS,gBAAgB,OAAO,MAAM,IAAI;AAC9D,QAAM,MAAM,EAAE,OAAO,OAAO,YAAY,QAAQ,OAAO,aAAa,GAAI,OAAO,EAAE,OAAO,OAAO,WAAW,IAAI,OAAW;AACzH,MAAI,OAAsC;AAC1C,MAAI,QAAQ;AACR,UAAM,SAAS,IAAI,MAAM,OAAO,EAAE,KAAK,IAAI,EAAE,IAAI,OAAM,CAAC,CAAW;AACnE,eAAW,SAAS,UAAU,QAAQ,KAAK,YAAY,GAAG;AACtD,aAAO,MAAM,GAAG,EAAE,MAAM,IAAI,IAAI,MAAM;AAAA,IAC1C;AACA,WAAO;AAAA,EACX,OAAO;AACH,WAAO,IAAI,MAAoB,OAAO;AACtC,eAAW,SAAS,UAAU,QAAQ,KAAK,YAAY,GAAG;AACtD,WAAK,MAAM,GAAG,IAAI,MAAM;AAAA,IAC5B;AAAA,EACJ;AACA,QAAM,YAAY,UAAU,EAAE,SAAS,KAAK,IAAa,EAAE,OAAO,KAAK,CAAC,EAAE;AAC1E,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,IACH,GAAG;AAAA,EACP;AAEJ;;;;;;;;;ACrOO,IAAM,mBAAN,MAA+C;AAAA,EACzC,OAAO;AAAA,EACR;AAAA,EACR;AAAA,EACA;AAAA;AAAA,EAMS,WAAW;AAAA,IAChB,mBAAmB;AAAA,IACnB,UAAU;AAAA,EACd;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,wBAAwB,SAAS,MAAM,UAAU,SAAS;AAAA,EACzE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,MAAM,QAAQ,YAAY,YAAY;AAC5C,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,UAAU,cAAc,OAAO,WAAW,CAAC;AACvG,UAAM,sBAAsB,CAAC,UAAU,YAAY;AACnD,UAAM,kBAAkB,CAAC,mBAAmB,uBAAuB;AACnE,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,8BAAc,gBAAAC,iBAAgB,qBAAqB,gBAAgB,CAAC;AAC1H,WAAO,EAAE,KAAK,UAAU,QAAQ;AAAA,EACpC;AAAA,EAEA,MAAM,iBAAiB,QAAgB;AACnC,QAAI,KAAK,iBAAiB;AACtB,WAAK,gBAAgB,MAAM;AAAA,IAC/B;AACA,UAAM,kBAAkB,KAAK,kBAAkB,IAAI,gBAAgB;AACnE,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI;AACA,YAAM,YAAa,SAAS,eAA4C,OAAO,YAAY;AAC3F,YAAM,UAAU,IAAI,IAAI,QAAQ,SAAS;AACzC,YAAM,WAAW;AAAA,QACbC,UAAiD,IAAI,IAAI,gBAAgB,OAAO,CAAC;AAAA,QACjFA,UAAwC,IAAI,IAAI,kBAAkB,OAAO,CAAC;AAAA,QAC1EA,UAAwC,IAAI,IAAI,kBAAkB,OAAO,CAAC;AAAA,MAC9E;AACA,YAAM,CAAC,UAAU,SAAS,MAAM,IAAI,MAAM,QAAQ,IAAI,QAAQ;AAC9D,WAAK,gBAAgB,EAAE,SAAS,UAAU,OAAO;AAAA,IACrD,UAAE;AACE,WAAK,kBAAkB;AAAA,IAC3B;AAEA,mBAAeA,UAAkC,KAAU;AACvD,YAAM,WAAW,MAAM,MAAM,KAAK,EAAE,MAAM,QAAQ,OAAO,CAAC;AAC1D,UAAI,SAAS,IAAI;AACb,YAAI,UAAU,MAAM,SAAS,YAAY;AACzC,YAAI,SAAS,SAAS,IAAI,WAAW,OAAO,CAAC;AAC7C,eAAO;AAAA,MACX,OAAO;AACH,cAAM,IAAI,MAAM,cAAc,SAAS,UAAU,SAAS,QAAQ;AAAA,MACtE;AAAA,IACJ;AAAA,EACJ;AACJ;AAKA,IAAM,0BAAN,MAA6D;AAAA,EAGzD,YAAqB,SAAiC,QAAmC,UAA6B,WAAsB;AAAvH;AAAiC;AAAmC;AAA6B;AAClH,SAAK,SAAS,UAAU,IAAI,cAAc,QAAQ,uBAAuB;AAAA,EAC7E;AAAA,EAJA;AAAA,EAMA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,WAAW,QAAQ,UAAU,OAAO,IAAI;AACzD,UAAM,EAAE,IAAI,IAAI;AAChB,UAAM,EAAE,WAAW,IAAI;AAEvB,QAAI,QAAQ,gBAAgB,EAAE,WAAW,CAAC,GAAG;AACzC,eAAS,OAAO,oBAAoB,WAAW,QAAQ;AACvD,cAAQ,oBAAoB,UAAU,UAAU,KAAK,QAAQ;AAC7D,YAAM,EAAE,IAAI,IAAI,MAAM;AACtB,UAAI,KAAK;AACL,YAAI,OAAO,OAAO,KAAK;AACnB,iBAAO,iBAAiB,GAAG,EAAE,KAAK,MAAM;AAAE,oBAAQ,UAAU;AAAA,UAAM,CAAC;AAAA,QACvE;AAAA,MACJ,OAAO;AACH,gBAAQ,kBAAkB,IAAI;AAC9B,YAAI,OAAO,MAAM;AACjB,aAAK,SAAS,IAAI,cAAc,QAAQ,uBAAuB;AAAA,MACnE;AACA,aAAO,MAAM;AAAA,IACjB;AAEA,QAAI,OAAO,eAAe;AACtB,cAAQ,kBAAkB,OAAO,aAAa;AAC9C,UAAI,OAAO,MAAM;AACjB,WAAK,SAAS,IAAI,cAAc,OAAO,cAAc,MAAM;AAC3D,eAAS,OAAO,WAAW,QAAQ,YAAY;AAC/C,cAAQ,oBAAoB,UAAU,UAAU,KAAK,QAAQ;AAC7D,aAAO,gBAAgB;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,WAAW,OAAO,IAAI;AACvC,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,UAAM,EAAE,IAAI,gBAAgB,eAAe,WAAW,IAAI;AAE1D,UAAM,aAAa,MAAM,WAAW,SAAS,CAAC,MAAM,MAAM,MAAM,CAAC;AACjE,SAAK,CAAC,MAAM,WAAW,SAAS,MAAM,WAAW,QAAQ,MAAM,OAAO,QAAQ,gBAAgB;AAC1F,YAAM,EAAE,SAAS,IAAI,QAAQ;AAC7B,cAAQ,IAAI;AAAA,QACR;AAAA,QACA,gBAAgB,CAAC,gBAAgB,QAAQ;AAAA,QACzC,UAAU;AAAA,UACN,EAAE,MAAM,oBAAoB,SAAS,QAAQ,SAAS,cAAc;AAAA,UACpE,EAAE,MAAM,oBAAoB,SAAS,UAAU,SAAS,WAAW;AAAA,QACvE;AAAA,QACA,OAAO;AAAA,UACH,MAAM;AAAA,UACN,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,cAAQ,qBAAqB,EAAE,KAAK;AAAA,IACxC,OAAO;AACH,cAAQ,IAAI,EAAE,MAAM,SAAS,YAAY,GAAG,OAAO,WAAW,CAAC;AAAA,IACnE;AAAA,EACJ;AAAA,EAEA,cAAc;AACV,UAAM,EAAE,OAAO,IAAI;AACnB,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;;;;;;;ACjJO,IAAM,aAAN,MAAyC;AAAA,EACnC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,UAAU;AAAA,EACd;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,kBAAkB,SAAS,MAAM,UAAU,SAAS;AAAA,EACnE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,MAAM,QAAQ,YAAY,MAAM;AACtC,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,cAAc,OAAO,CAAC;AAC3F,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAAC,iBAAc,gBAAAA,iBAAgB,qBAAqB,CAAC,UAAU,MAAM,EAAE,CAAC;AAC7H,WAAO,EAAE,KAAK,UAAU,QAAQ;AAAA,EACpC;AACJ;AAKA,IAAM,oBAAN,MAAuD;AAAA,EACnD,YAAqB,SAAiC,QAA6B,UAA6B,WAAsB;AAAjH;AAAiC;AAA6B;AAA6B;AAAA,EAAwB;AAAA,EAExI,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,MAAM,sBAAsB,IAAI;AACxC,QAAI,QAAQ,gBAAgB,EAAE,MAAM,sBAAsB,CAAC,GAAG;AAC1D,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,YAAM,EAAE,OAAO,OAAO,OAAO,IAAI;AACjC,YAAM,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAK,OAAO,aAAK,OAAO,GAAG,qBAAqB,CAAC;AAC9G,aAAO,SAAS,aAAK,cAAc,aAAK,OAAO,GAAG,QAAQ,gBAAgB;AAC1E,aAAO,QAAQ;AACf,aAAO,QAAQ;AACf,aAAO,SAAS,KAAK;AACrB,aAAO,SAAS,KAAK;AACrB,aAAO,QAAQ,KAAK;AACpB,aAAO,QAAQ,KAAK;AACpB,aAAO,WAAW,KAAK;AACvB,cAAQ,oBAAoB,UAAU,KAAK,QAAQ;AAAA,IACvD;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,UAAM,EAAE,IAAI,eAAe,IAAI;AAE/B,QAAI,MAAM,KAAK,SAAS;AACpB,cAAQ,IAAI;AAAA,QACR;AAAA,QACA,gBAAgB,CAAC,gBAAgB,QAAQ;AAAA,QACzC,OAAO;AAAA,UACH,MAAM;AAAA,UACN,WAAW;AAAA,QACf;AAAA,QACA,QAAQ;AAAA,UACJ,iBAAiB;AAAA,QACrB;AAAA,QACA,OAAO;AAAA,UACH,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACd;AAAA,MACJ,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,cAAQ,qBAAqB,EAAE,KAAK;AAAA,IACxC;AAAA,EACJ;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;;;;;;;;;;;;;;;;;;;;;;AC1FO,IAAM,UAAU;AAAA,EACnB,QAAQ;AAAA,IACJ,cAAc;AAAA,IACd,gBAAgBC;AAAA,EACpB;AAAA,EACA,MAAM;AAAA,IACF,cAAc;AAAA,IACd,gBAAgBC;AAAA,EACpB;AAAA,EACA,WAAW;AAAA,IACP,cAAc;AAAA,EAClB;AAAA,EACA,OAAO;AAAA,IACH,cAAc;AAAA,IACd,gBAAgBC;AAAA,EACpB;AACJ;;;ACRO,UAAU,aAAa,aAA0B,UAAwB;AAC5E,QAAM,WAAW,SAAS,SAAS,IAAI,QAAM;AACzC,QAAI,IAAI;AACJ,aAAO,YAAY,cAAc,GAAG,MAAM;AAAA,IAC9C;AAAA,EACJ,CAAC;AAED,aAAW,WAAW,SAAS,WAAW;AAWtC,QAASC,iBAAT,SAAuB,GAA+B;AAClD,aAAO,IAAI,EAAE,GAAG,GAAG,QAAQ,QAAQ,EAAE,MAAM,EAAE,IAAuB;AAAA,IACxE;AAFS,wBAAAA;AART,UAAM,EAAE,kBAAkB,eAAe,SAAS,aAAa,cAAc,YAAY,cAAc,aAAa,IAAI;AACxH,UAAM,UAAU,cAAc,IAAI,QAAM;AACpC,aAAO,YAAY,aAAa,EAAE,MAAM,gBAAgB,SAAS,GAAG,CAAC;AAAA,IACzE,CAAC;AACD,UAAM,KAAK,OAAO,WAAW,WAAW,YAAY,aAAa,EAAE,MAAM,wBAAwB,SAAS,QAAQ,CAAC,IAAI;AACvH,UAAM,QAAQ,OAAO,WAAW,WAAW,UAAU,QAAQ;AAC7D,UAAM,YAAY,mBAAmB,cAAc,mBAAmB;AACtE,UAAM,EAAE,WAAW,UAAU,QAAQ,UAAU,UAAU,UAAU,OAAO,cAAc,YAAY,UAAU,IAAI;AAIlH,UAAM,aAAa,CAAC,UAAU,QAAQ,UAAU,UAAU,UAAU,OAAO,cAAc,YAAY,SAAS,EAAE,IAAIA,cAAa;AACjI,UAAM,qBAAqB,YAAY,UAAU,IAAIA,cAAa,IAAI;AAKtE,UAAM,cAAc,QAAQ,UAAW,MAAM;AAE7C,UAAM,MAAM,YAAY,kBAAkB,EAAE,YAAY,SAAS,GAAG,CAAC;AACrE,UAAM,aAAa,SAAS,UAAU,IAAI,YAAY,kBAAkB,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,IAAI;AACxH,UAAM,eAAe,qBAAqB,YAAY,kBAAkB,EAAE,YAAY,mBAAmB,CAAC,IAAI;AAC9G,gBAAY,YAAY,KAAK,GAAG,QAAQ,OAAO,SAAO,OAAO,WAAW,CAAC;AACzE,QAAI,IAAI;AACJ,kBAAY,YAAY,KAAK,EAAE;AAAA,IACnC;AAEA,UAAM,aAAyB,KAC3B,EAAE,MAAM,YAAY,MAAM,QAAQ,eAAe,WAAW,MAAM,IAClE,EAAE,MAAM,UAAU,MAAM,QAAQ,eAAe,MAAM;AACzD,UAAM,wBAAwB,QAAQ;AACtC,UAAM,mBAAmB,SAAS,qBAAqB,KAAK;AAC5D,UAAM,EAAE,KAAK,YAAY,cAAc,aAAa,YAAY,YAAY,aAAa,cAAc,cAAc,cAAc,iBAAiB;AAAA,EACxJ;AACJ;AAEO,SAAS,qBAAqB,IAA4B,MAAY,YAAoC;AAC7G,QAAM,EAAE,YAAY,IAAI;AACxB,MAAI,aAAa;AACb,UAAM,kBAAkB,IAAI,WAAW,KAAK,WAAW;AACvD,QAAI,YAAY;AACZ,iBAAW,EAAE,UAAU,aAAa,UAAU,KAAK,KAAK,cAAc;AAClE,cAAM,YAAY,WAAW,QAAQ;AACrC,YAAI,WAAW;AACX,0BAAgB,KAAK,WAAW,aAAa,SAAS;AAAA,QAC1D;AAAA,MACJ;AAAA,IACJ;AACA,mBAAe,IAAI,EAAE,MAAM,gBAAgB,SAAS,iBAAiB,cAAc,YAAY,CAAC;AAAA,EACpG;AACJ;AAEO,SAAS,WAAW,aAA0B,MAAY;AAC7D,QAAM,EAAE,KAAK,YAAY,cAAc,aAAa,iBAAiB,IAAI;AACzE,cAAY,OAAO,KAAK,YAAY,cAAc,aAAa,gBAAgB;AACnF;AAEO,SAAS,mBAAmB,MAAY,WAAwF;AAEnI,QAAM,aAAa,KAAK,WAAW,OAAO,QAAO,KAAK,EAAE,aAAc,cAAc,CAAC;AACrF,MAAI,WAAW,UAAU,GAAG;AACxB;AAAA,EACJ;AACA,QAAM,cAAc,IAAI,WAAW,WAAW,IAAI,OAAK,EAAE,UAAU,CAAC;AACpE,QAAM,aAAa,IAAI,WAAW,WAAW,IAAI,OAAK,EAAE,KAAK,CAAC;AAC9D,QAAM,YAAY,YAAY;AAC9B,QAAM,EAAE,WAAW,IAAI;AACvB,QAAM,EAAE,KAAK,IAAI;AACjB,WAASC,YAAW,QAA2D;AAC3E,WAAO,eAAe;AAAA,EAC1B;AACA,MAAIA,YAAW,UAAU,GAAG;AACxB,UAAM,EAAE,UAAU,IAAI;AACtB,WAAO;AAAA,MACH,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAa;AAAA,MACb,QAAQ;AAAA,IACZ;AAAA,EACJ,OAAO;AACH,WAAO;AAAA,MACH,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,YAAY;AAAA,MACZ,QAAQ;AAAA,IACZ;AAAA,EACJ;AACJ;AAEO,SAAS,mBAAmB,MAAY,mBAA2B;AACtE,MAAI,gBAAgB;AACpB,QAAM,gBAAgB,KAAK,WAAW,QAAQ;AAC9C,aAAW,aAAa,KAAK,YAAY;AACrC,UAAM,YAAY,KAAK,UAAU;AACjC,SAAK,oBAAoB,cAAc,GAAG;AACtC,uBAAiBC,mBAAkB,UAAU,OAAO,aAAa;AAAA,IACrE;AAAA,EACJ;AACA,SAAO;AACX;AAEA,SAASA,mBAAkB,aAAqB,eAAuB;AACnE,MAAI,iBAAiB;AACrB,UAAQ,eAAe;AAAA,IACnB,KAAK;AACD,uBAAiB,cAAc;AAC/B;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AACD,uBAAiB,cAAc;AAAG;AAAA,IACtC,KAAK;AACD,uBAAiB,cAAc;AAAG;AAAA,IACtC,KAAK;AACD,uBAAiB,cAAc;AAAG;AAAA,IACtC;AACI,uBAAiB;AAAA,EACzB;AACA,SAAO;AACX;;;AClGO,IAAM,cAAN,MAAiB;AAAA,EA4BpB,YAAqB,SAAiC,MAAgB,QAAuC;AAAxF;AAAiC;AAClD,UAAM,eAAe,KAAK,eAAe,OAAO,UAAU,WAAW,OAAO,eAAe;AAC3F,SAAK,SAAS,OAAO,UAAU,WAAW,SAAS;AAEnD,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK;AAC7B,UAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,SAAK,KAAK,KAAK;AACf,SAAK,cAAc,QAAQ,cAAc,YAAY,MAAM;AAC3D,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,UAAU,aAAK,WAAW,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;AACjE,UAAM,CAAC,IAAI,IAAI,EAAE,IAAI,IAAI;AACzB,UAAM,CAAC,IAAI,IAAI,EAAE,IAAI,IAAI;AACzB,SAAK,UAAU;AAAA,MACX,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,IACjC;AAGA,UAAM,gBAAgB,YAAW,eAAe,YAAY;AAI5D,SAAK,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI;AAEhH,SAAK,eAAe,WAAW;AAAA,MAC3B,kBAAkB;AAAA,MAClB,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,KAAK;AAAA,MACL,KAAK;AAAA,IACT,CAAC;AACD,SAAK,aAAa,OAAO,YAAY,KAAK,IAAI,GAAG,KAAK,SAAS;AAAA,EAEnE;AAAA,EAnES;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAyB,CAAC;AAAA,EAC1B,SAAiB,CAAC;AAAA,EAClB;AAAA,EACA;AAAA,EACT;AAAA,EACiB;AAAA,EACA;AAAA,EACT,2BAA2B;AAAA,EACnC,QAAQ;AAAA,EACR;AAAA,EACA,aAAa;AAAA,EACb,eAAe;AAAA,EACf,gBAAgB;AAAA,EAmDhB,UAAU;AACN,UAAM,EAAE,QAAQ,UAAU,UAAU,YAAY,IAAI;AACpD,eAAW,QAAQ,QAAQ;AACvB,iBAAW,aAAa,IAAI;AAAA,IAChC;AACA,QAAI,UAAU;AACV,kBAAY,OAAO,QAAQ;AAC3B,WAAK,WAAW;AAAA,IACpB;AACA,YAAQ,OAAO,YAAY,QAAQ,CAAC;AACpC,gBAAY,QAAQ;AACpB,eAAW,SAAS,UAAU;AAC1B,YAAM,QAAQ;AAAA,IAClB;AACA,WAAO,SAAS;AAChB,aAAS,SAAS;AAClB,SAAK,UAAU,MAAM;AACrB,SAAK,WAAW;AAChB,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,CAAC,KAAK;AAAA,EACjB;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,IAAI,cAAc;AACd,WAAO,KAAK,OAAO,SAAS,KAAK,KAAK,YAAY;AAAA,EACtD;AAAA,EAEA,IAAI,oBAAoB;AACpB,QAAI,EAAE,UAAU,IAAI,KAAK;AACzB,eAAW,SAAS,KAAK,UAAU;AAC/B,UAAI,MAAM,aAAa;AACnB,qBAAa,EAAE,KAAK,MAAM,KAAK;AAAA,MACnC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,6BAA8C;AACtD,UAAM,EAAE,YAAY,eAAe,SAAS,aAAa,IAAI;AAC7D,UAAM,SAAS,QAAQ,OAAO,gBAAgB,EAAE,KAAK;AACrD,WAAO,CAAC,WAAW,KAAK,UAAW,cAAc,gBAAmB,gBAAgB;AAAA,EACxF;AAAA,EAEA,gBAAgB,OAAqB;AACjC,UAAM,EAAE,SAAS,QAAQ,QAAQ,IAAI;AACrC,UAAMC,YAAW,aAAK,IAAI,OAAO,OAAO;AACxC,QAAI,KAAK,IAAIA,SAAQ,IAAI,QAAQ;AAC7B,aAAO;AAAA,IACX;AACA,QAAI,OAAO;AACX,eAAW,UAAU,SAAS;AAC1B,YAAMA,YAAW,aAAK,IAAI,OAAO,MAAM;AACvC,YAAM,UAAU,KAAK,KAAKA,SAAQ;AAClC,UAAI,QAAQ,WAAW,MAAM;AACzB,eAAO;AAAA,MACX;AACA,UAAI,SAAS;AACT,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,kBAAkB,OAAuC;AAC7D,UAAM,EAAE,SAAS,QAAQ,QAAQ,IAAI;AACrC,QAAI,cAAc;AAClB,QAAI,eAAe;AACnB,UAAM,EAAE,OAAO,IAAI,MAAM;AACzB,eAAW,SAAS,QAAQ;AACxB,YAAMA,YAAW,aAAK,IAAI,OAAO,OAAO;AACxC,UAAIA,YAAW,QAAQ;AACnB,uBAAe;AACf,sBAAc;AACd;AAAA,MACJ,WAAWA,YAAW,CAAC;AACnB,sBAAc;AAAA,IACtB;AACA,QAAI,gBAAgB,cAAc;AAE9B,qBAAe;AACf,oBAAc;AACd,iBAAW,UAAU,SAAS;AAC1B,mBAAW,SAAS,QAAQ;AACxB,gBAAMA,YAAW,aAAK,IAAI,OAAO,MAAM;AACvC,cAAIA,YAAW,GAAG;AACd,0BAAc;AAAA,UAClB,OAAO;AACH,2BAAe;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,aAAa;AACjB,QAAI,cAAc;AACd,mBAAa;AAAA,IACjB,WAAW,CAAC,aAAa;AACrB,mBAAa;AAAA,IACjB,OAAO;AACH,mBAAa;AAAA,IACjB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,qBAAqB;AACrB,QAAI,gBAAgB;AACpB,QAAI,KAAK,cAAc,cAAiB;AACpC,YAAM,EAAE,kBAAkB,IAAI;AAC9B,UAAI,mBAAmB;AACnB,mBAAW,QAAQ,KAAK,QAAQ;AAC5B,2BAAiB,mBAAmB,MAAM,iBAAiB;AAAA,QAC/D;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,OAA2B,mBAA+B,iBAAoB;AAEjF,SAAK,aAAc,oBAAoB,kBAAsB,KAAK,kBAAkB,KAAK,IAAI;AAG7F,UAAM,EAAE,SAAS,SAAS,YAAY,QAAQ,UAAU,MAAM,cAAc,SAAS,IAAI;AACzF,UAAM,EAAE,QAAQ,UAAU,YAAY,IAAI;AAC1C,UAAM,aAAa,YAAY;AAC/B,UAAMC,cAAa,SAAS,oCAA0C;AACtE,UAAM,eAAe,KAAK,eAAe,aAAK,IAAI,YAAY,OAAO;AACrE,QAAI,cAAc,cAAiB;AAC/B,WAAK,gBAAgB;AAAA,IACzB,WAAW,OAAO,QAAQ,WAAW;AACjC,YAAMD,YAAW,KAAK,IAAI,MAAO,eAAe,MAAM;AACtD,WAAK,gBAAiB,KAAK,OAAOC,YAAW,CAAC,KAAM,CAACD,YAAWC,YAAW,EAAE;AAAA,IAGjF,OAAO;AACH,WAAK,gBAAgB,KAAK,OAAOA,YAAW,CAAC;AAAA,IACjD;AAEA,QAAI,QAAQ,qBAAqB,CAAC,KAAK,0BAA0B;AAC7D,UAAI,EAAE,QAAQ,OAAAC,OAAM,IAAI;AACxB,YAAM,CAAC,IAAI,IAAI,EAAE,IAAI;AACrB,YAAM,CAAC,IAAI,IAAI,EAAE,IAAI,MAAM;AAC3B,YAAM,mBAAmB,aAAK;AAAA,QAC1BA;AAAA,QAAO;AAAA,QAAG;AAAA,QAAG;AAAA,QACb;AAAA,QAAGA;AAAA,QAAO;AAAA,QAAG;AAAA,QACb;AAAA,QAAG;AAAA,QAAGA;AAAA,QAAO;AAAA,QACb,KAAK;AAAA,QAAI,KAAK;AAAA,QAAI,KAAK;AAAA,QAAI;AAAA,MAC/B;AACA,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,aAAO,mBAAmB;AAC1B,UAAI,UAAU;AACV,uBAAe,QAAQ,cAAc,IAAI,EAAE,MAAM,kBAAkB,SAAS,aAAa,QAAQ,cAAc,SAAS,CAAC;AAAA,MAC7H;AACA,WAAK,2BAA2B;AAAA,IACpC;AAEA,QAAI,QAAQ,OAAO;AACf,UAAI,IAAI,GAAG,IAAI,GAAG,IAAI;AACtB,cAAQ,YAAY;AAAA,QAChB,KAAK;AAAoB,cAAI;AAAM;AAAA,QACnC,KAAK;AAAiB,cAAI;AAAG;AAAA,MACjC;AACA,cAAQ,KAAK,OAAO;AAAA,QAChB,KAAK;AAAuB,cAAI;AAAG;AAAA,QACnC,KAAK;AAAiB,cAAI;AAAG;AAAA,MACjC;AACA,YAAM,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAK,OAAO,aAAK,OAAO,GAAG,MAAM,qBAAqB,CAAC;AACpH,YAAM,EAAE,KAAAC,MAAK,KAAAC,KAAI,IAAI,KAAK,OAAO;AACjC,YAAM,EAAE,OAAO,IAAI;AACnB,aAAO,aAAa,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC;AAC9C,aAAO,MAAM,aAAK,cAAc,aAAK,OAAO,GAAGD,MAAK,gBAAgB;AACpE,aAAO,MAAM,aAAK,cAAc,aAAK,OAAO,GAAGC,MAAK,gBAAgB;AACpE,UAAI,UAAU;AACV,uBAAe,QAAQ,cAAc,IAAI,EAAE,MAAM,kBAAkB,SAAS,aAAa,QAAQ,cAAc,SAAS,CAAC;AAAA,MAC7H;AAAA,IACJ;AAGA,eAAW,SAAS,UAAU;AAC1B,YAAM,OAAO,OAAO,KAAK,UAAU;AAAA,IACvC;AAAA,EACJ;AAAA,EAEA,MAAM,eAAe;AACjB,UAAM,EAAE,SAAS,UAAU,QAAQ,YAAY,IAAI;AACnD,UAAM,EAAE,eAAe,QAAQ,QAAQ,IAAI;AAC3C,SAAK,QAAQ;AACb,UAAM,UAAU,MAAM,OAAO,SAAS,MAAM,OAAO;AACnD,QAAI,SAAS;AACT,YAAM,EAAE,YAAY,SAAS,IAAI;AACjC,iBAAW,QAAQ,YAAY;AAC3B,cAAM,QAAQ,IAAI,YAAW,SAAS,MAAM,IAAI;AAChD,iBAAS,KAAK,KAAK;AAAA,MACvB;AACA,aAAO,KAAK,GAAG,aAAa,aAAa,QAAQ,CAAC;AAClD,WAAK,WAAW,YAAY,aAAa,EAAE,MAAM,kBAAkB,UAAU,KAAK,aAAa,OAAO,WAAW,CAAC;AAClH,qBAAe,KAAK,QAAQ,cAAc,IAAI,EAAE,MAAM,kBAAkB,SAAS,KAAK,aAAa,QAAQ,cAAc,KAAK,SAAS,CAAC;AACxI,oBAAc,UAAU;AACxB,WAAK,QAAQ;AAAA,IACjB,OAAO;AACH,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAEA,gBAAgB,YAAoC;AAChD,UAAM,EAAE,SAAS,OAAO,IAAI;AAC5B,UAAM,EAAE,GAAG,IAAI,QAAQ;AACvB,eAAW,QAAQ,QAAQ;AACvB,2BAAqB,IAAI,MAAM,UAAU;AAAA,IAC7C;AAAA,EACJ;AACJ;AAlSO,IAAM,aAAN;AAoBH,cApBS,YAoBO,kBAAiB;AAAA,EAC7B,CAAC,eAAwB,GAAG;AAAA,EAC5B,CAAC,iBAA0B,GAAG;AAAA,EAC9B,CAAC,aAAsB,GAAG;AAAA,EAC1B,CAAC,cAAuB,GAAG;AAAA,EAC3B,CAAC,iBAA0B,GAAG;AAClC;;;ACtEJ,eAAsB,cAAc,KAAa,iBAA8D;AAC3G,MAAI,CAAC;AACD,sBAAkB,IAAI,gBAAgB;AAC1C,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,UAAU,IAAI,IAAI,GAAG;AAC3B,UAAQ,YAAY;AACpB,QAAM,SAAU,MAAM,SAAS,SAAS,QAAQ,MAAM;AACtD,UAAQ,OAAO,OAAO,WAAW,KAAK;AACtC,SAAO,EAAE,KAAK,IAAI,SAAS,GAAG,OAAO;AACzC;AAEA,eAAsB,qBAAqB,SAAwB,QAAqB,eAA8D;AAClJ,QAAM,EAAE,OAAO,IAAI,aAAa,OAAO,IAAI;AAC3C,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,SAAS,MAAM,OAAO,UAAU,QAAQ,IAAI,eAAe,OAAO,OAAO;AAC/E,MAAI,CAAC;AACD;AACJ,QAAM,EAAE,WAAW,IAAI;AACvB,QAAM,YAAgC,CAAC;AACvC,MAAI,WAAW;AACf,aAAW,aAAa,YAAY;AAChC,UAAM,eAAe,UAAU;AAC/B,UAAM,QAAQ,IAAI,WAAW,SAAS,WAAW,YAAY;AAC7D,cAAU,UAAU,UAA6B,IAAI;AACrD,eAAW;AAAA,EACf;AACA,SAAO,WAAW,YAAY;AAClC;AAEA,eAAe,SAA2C,KAAU,MAAS,QAAqB;AAC9F,QAAM,WAAW,MAAM,MAAM,KAAK,EAAE,MAAM,QAAQ,OAAO,CAAC;AAC1D,MAAI,SAAS,IAAI;AACb,WAAQ,MAAM,SAAS,IAAI,EAAE;AAAA,EACjC,OAAO;AACH,UAAM,IAAI,MAAM,cAAc,SAAS,UAAU,SAAS,QAAQ;AAAA,EACtE;AACJ;;;ACmKO,SAAS,WAAW,GAAiB;AACxC,QAAM,QAAQ,EAAE,IAAI,CAAC;AACrB,QAAM,QAAQ,EAAE,GAAG,EAAE;AACrB,QAAM,SAAS;AAAA,IACX,WAAW;AAAA,MACP,QAAQ,MAAM,CAAC;AAAA,MACf,MAAM,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACvD,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,WAAW,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACzB,WAAW,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC7B,QAAQ;AAAA,QACJ,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB,QAAQ;AAAA,QACJ,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK;AAAA,UACD,QAAQ,MAAM,CAAC;AAAA,UACf,KAAK;AAAA,YACD,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,UACA,KAAK;AAAA,YACD,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,QACJ;AAAA,QACA,QAAQ;AAAA,UACJ,QAAQ,MAAM,CAAC;AAAA,UACf,OAAO;AAAA,YACH,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,UACA,QAAQ,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QAC1B;AAAA,MACJ;AAAA,MACA,WAAW,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,IAChE;AAAA,IACA,WAAW,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,IACxB,mBAAmB;AAAA,MACf,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,YAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC1B,aAAa,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC3B,iBAAiB,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,MACL,QAAQ,MAAM,CAAC;AAAA,MACf,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,cAAc,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC3B,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,UAAU,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MAC3D,wBAAwB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACzE,mBAAmB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACpE,qBAAqB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACtE,UAAU,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,EAAE;AAAA,IAC7D;AAAA,IACA,aAAa;AAAA,MACT,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACvB,WAAW;AAAA,QACP,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACvB;AAAA,MACA,YAAY,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,IACjE;AAAA,IACA,QAAQ;AAAA,MACJ,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU;AAAA,QACN,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,QAAQ,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC5B,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAChB,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAChB,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACpB;AAAA,MACA,OAAO,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC3B,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAClB,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QACpB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QACnB,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACxB;AAAA,MACA,UAAU,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC9B,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,cAAc,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAClC,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,YAAY;AAAA,QACR,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC7C;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,MACN,QAAQ,MAAM,CAAC;AAAA,MACf,eAAe,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,IACxD;AAAA,IACA,aAAa,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,IACnD,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,EAChC;AACA,UAAQ,OAAO,EAAE,GAAG;AACpB,SAAO;AACX;;;AC5UO,IAAM,eAAe;AAErB,IAAM,eAAN,MAAmB;AAAA,EAYtB,YAAqB,QAAqB;AAArB;AACjB,SAAK,MAAM,IAAI,WAAW,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,WAAW,iBAAiB,CAAC;AACjG,SAAK,OAAO,IAAI,YAAY,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,YAAY,iBAAiB,CAAC;AACpG,SAAK,OAAO,IAAI,YAAY,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,YAAY,iBAAiB,CAAC;AACpG,SAAK,MAAM,IAAI,UAAU,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,UAAU,iBAAiB,CAAC;AAC/F,SAAK,OAAO,IAAI,WAAW,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,WAAW,iBAAiB,CAAC;AAClG,SAAK,OAAO,IAAI,WAAW,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,WAAW,iBAAiB,CAAC;AAClG,SAAK,OAAO,IAAI,YAAY,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,YAAY,iBAAiB,CAAC;AACpG,SAAK,OAAO,IAAI,aAAa,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,aAAa,iBAAiB,CAAC;AACtG,SAAK,OAAO,IAAI,aAAa,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,aAAa,iBAAiB,CAAC;AAAA,EAC1G;AAAA,EArBA,MAAM;AAAA,EACW;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAcT,KAA2B,IAAO,MAAiB;AACvD,QAAI,QAAQ;AACR,aAAO,GAAG,SAAS,GAAG,CAAC;AAC3B,UAAM,QAAQ,GAAG;AACjB,QAAI,UAAW,QAAQ,KAAO,KAAK,MAAM,QAAQ,KAAK;AACtD,YAAQ,OAAO,WAAW,KAAK,UAAU,KAAK;AAC9C,UAAM,SAAS,KAAK,MAAM,WAAW;AACrC,UAAM,MAAM,QAAQ;AACpB,SAAK,MAAM,MAAM,GAAG;AACpB,WAAO,GAAG,SAAS,OAAO,GAAG;AAAA,EACjC;AAAA,EAEA,IAAI,MAAM;AACN,WAAO,KAAK,OAAO,KAAK,OAAO;AAAA,EACnC;AAAA,EAEA,GAAG,MAAc;AACb,WAAO,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,EACnC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,GAAG,MAAc;AACb,WAAO,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,EACnC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AACJ;;;ACjEA,IAAM,uBAAuB,CAAC,UAAU,SAAS,aAAa,cAAc,aAAa,kBAAkB,cAAc;AA2EzH,SAAS,QAAQ,GAAqB,GAAW;AAC7C,SAAO,aAAK,WAAW,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACjD;AAKA,SAAS,SAAS,GAAqE,GAAkB;AACrG,QAAM,QAAQ,EAAE,MAAM,CAAC;AACvB,QAAM,MAAM,QAAQ,EAAE,MAAM,CAAC;AAC7B,SAAO,CAAC,OAAO,GAAG;AACtB;AAEA,SAAS,sBAAsB,eAA8B,YAAoB;AAC7E,UAAQ,eAAe;AAAA,IACnB;AACI,aAAO;AAAA,IACX;AACI,aAAO,aAAa;AAAA,IACxB;AACI,aAAO;AAAA,IACX;AACI,aAAO,aAAa;AAAA,IACxB;AACI,aAAO,aAAa;AAAA,IACxB;AACI,aAAO,aAAa;AAAA,IACxB;AACI,aAAO,aAAa;AAAA,IACxB;AACI,cAAQ,KAAK,2BAA2B,gBAAgB;AAAA,EAChE;AACJ;AAEA,SAAS,iBAAiB,YAAoB;AAC1C,SAAO;AAAA,IACH,UAAU,EAAE,MAAM,aAAa,YAAY,CAAC,KAAK,KAAK,GAAG,EAAE;AAAA,IAC3D,QAAQ,EAAE,MAAM,WAAW,YAAY,CAAC,KAAK,KAAK,GAAG,EAAE;AAAA,IACvD,UAAU,EAAE,MAAM,cAAc,YAAY,CAAC,KAAK,GAAG,EAAE;AAAA,IACvD,OAAO,EAAE,MAAM,YAAY,YAAY,CAAC,OAAO,SAAS,QAAQ,OAAO,EAAE;AAAA,IACzE,cAAc,EAAE,MAAM,aAAa,YAAY,CAAC,KAAK,KAAK,GAAG,EAAE;AAAA,IAC/D,YAAY,EAAE,MAAM,cAAc,YAAY,CAAC,KAAK,KAAK,KAAK,GAAG,EAAE,MAAM,GAAG,UAAU,EAAE;AAAA,IACxF,eAAe,EAAE,MAAM,WAAW;AAAA,IAClC,UAAU,EAAE,MAAM,YAAY;AAAA,EAClC;AACJ;AAKA,SAAS,qBAAqB,SAAuC,aAAa,GAAG;AACjF,MAAI,SAAS;AACb,MAAI,UAAe,CAAC;AACpB,WAAS,YAAY,WAAmB;AACpC,UAAM,UAAU,YAAY,KAAK,SAAS,YAAY,KAAK;AAC3D,cAAU;AAAA,EACd;AACA,MAAI,WAAW;AACf,QAAM,gBAAgB,iBAAiB,UAAU;AACjD,aAAW,UAAU,SAAS;AAC1B,UAAM,EAAE,MAAM,WAAW,IAAI,cAAc,MAAM;AACjD,UAAM,QAAQ,YAAY,UAAU;AACpC,eAAW,KAAK,IAAI,UAAU,KAAK,iBAAiB;AACpD,gBAAY,KAAK,iBAAiB;AAClC,YAAQ,MAAM,IAAI;AAClB,cAAU,KAAK,oBAAoB;AAAA,EACvC;AACA,cAAY,QAAQ;AACpB,UAAQ,SAAS;AACjB,SAAO;AACX;AAEA,SAAS,qBAAqB,oBAA6C,YAA6B,cAAuB,cAAuB;AAClJ,QAAM,cAAmC,CAAC,UAAU;AACpD,MAAI;AAAqD,gBAAY,KAAK,QAAQ;AAClF,MAAI;AAAuD,gBAAY,KAAK,UAAU;AACtF,MAAI;AAAoD,gBAAY,KAAK,OAAO;AAChF,MAAI;AAA2D,gBAAY,KAAK,cAAc;AAC9F,MAAI,aAAa;AAAG,gBAAY,KAAK,YAAY;AACjD,MAAI,cAAc;AACd,gBAAY,KAAK,eAAe;AAAA,EACpC;AACA,MAAI,cAAc;AACd,gBAAY,KAAK,UAAU;AAAA,EAC/B;AACA,SAAO;AACX;AAEO,SAAS,4BAA4B,mBAAsC,OAAc,wBAAiC,WAA2C;AACxK,MAAI,aAAa;AACjB,MAAI,oBAAoB;AACxB,MAAI,kBAAkB;AACtB,MAAI,mBAAmB;AACvB,MAAI,sBAAsB;AAE1B,QAAM,CAAC,OAAO,GAAG,IAAI;AACrB,WAAS,IAAI,OAAO,IAAI,KAAK,KAAK;AAC9B,UAAM,WAAW,kBAAkB,SAAS,CAAC;AAC7C,QAAI,YAAY,QAAQ,KAAK,MAAM;AAC/B,YAAM,UAAU,kBAAkB,WAAW,CAAC;AAC9C,YAAM,WAAW,kBAAkB,YAAY,CAAC;AAChD,YAAMC,gBAAe,kBAAkB,gBAAgB,CAAC;AACxD,YAAM,aAAa,kBAAkB,WAAW,CAAC;AACjD,YAAM,aAAa,kBAAkB,cAAc,CAAC;AACpD,YAAM,gBAAgB,kBAAkB,cAAc,CAAC;AAGvD,YAAM,eAAeA,iBAAgB;AACrC,YAAM,eAAe;AACrB,YAAM,CAAC,KAAK,GAAG,IAAI,IAAI,qBAAqB,YAAY,YAAY,cAAc,YAAY;AAC9F,YAAM,oBAAoB,yBACtB,qBAAqB,CAAC,GAAG,CAAC,EAAE,SAAS,qBAAqB,MAAM,UAAU,EAAE,SAC5E,qBAAqB,CAAC,KAAK,GAAG,IAAI,GAAG,UAAU,EAAE;AACrD,oBAAc,sBAAsB,eAAe,UAAU,UAAU,QAAQ,KAAK;AACpF,yBAAmB;AACnB,0BAAoB;AACpB,6BAAuB,WAAW;AAClC,2BAAqBA;AAAA,IACzB,OAAO;AAAA,IAEP;AAAA,EACJ;AACA,QAAM,YAAY,mBAAmB,QAAS,IAAI;AAClD,QAAM,WAAW,oBAAoB,sBAAsB,kBAAkB;AAC7E,SAAO,EAAE,YAAY,SAAS;AAClC;AAEA,SAAS,MAAM,OAAmB;AAC9B,SAAO,MAAM,UAAU,IAAI,KAAK,OAAO,QAAM,OAAO,EAAE,SAAS,EAAE,EAAE,YAAY,GAAG,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE;AACxG;AAEO,SAAS,YAAY,UAAkB,QAAgB,wBAAiC,WAAuD;AAClJ,QAAM,EAAE,WAAW,UAAU,IAAI;AACjC,QAAM,WAAuB,CAAC;AAI9B,QAAM,wBAAkC,CAAC;AAEzC,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,UAAM,aAAa,UAAU,WAAW,CAAC;AACzC,UAAM,YAAY,UAAU,UAAU,CAAC;AACvC,UAAM,CAAC,WAAW,OAAO,IAAI,SAAS,UAAU,MAAM,CAAC;AACvD,UAAM,OAAO,UAAU,MAAM,WAAW,OAAO;AAC/C,UAAM,KAAK,MAAM,IAAI;AACrB,UAAM,YAAY,UAAU,UAAU,CAAC;AACvC,UAAM,WAAW,UAAU,cAAc,CAAC;AAC1C,UAAM,SAAS,QAAQ,UAAU,QAAQ,CAAC;AAC1C,UAAMC,SAAQ,UAAU,MAAM,CAAC;AAC/B,UAAM,SAAqB;AAAA,MACvB,KAAK;AAAA,QACD,KAAK,QAAQ,UAAU,OAAO,IAAI,KAAK,CAAC;AAAA,QACxC,KAAK,QAAQ,UAAU,OAAO,IAAI,KAAK,CAAC;AAAA,MAC5C;AAAA,MACA,QAAQ;AAAA,QACJ,QAAQ,QAAQ,UAAU,OAAO,OAAO,OAAO,CAAC;AAAA,QAChD,QAAQ,UAAU,OAAO,OAAO,OAAO,CAAC;AAAA,MAC5C;AAAA,IACJ;AAEA,UAAM,EAAE,QAAQ,IAAI,IAAI;AACxB,iBAAK,IAAI,OAAO,QAAgB,OAAO,QAAQ,MAAM;AACrD,iBAAK,IAAI,IAAI,KAAa,IAAI,KAAK,MAAM;AACzC,iBAAK,IAAI,IAAI,KAAa,IAAI,KAAK,MAAM;AAEzC,UAAM,yBAAyB,SAAS,UAAU,WAAW,CAAC;AAC9D,UAAM,mBAAmB,sBAAsB,UAAU;AACzD,UAAM,EAAE,YAAY,SAAS,IAAI,4BAA4B,OAAO,mBAAmB,wBAAwB,wBAAwB,SAAS;AAChJ,UAAM,kBAAkB,cAAc,oBAAoB;AAE1D,aAAS,KAAK,EAAE,IAAI,YAAY,WAAW,WAAW,UAAU,QAAQ,OAAAA,QAAO,QAAQ,YAAY,iBAAiB,SAAS,CAAC;AAAA,EAClI;AACA,SAAO;AACX;AAEO,UAAU,aAAa,QAAgB,WAA2C;AACrF,QAAM,EAAE,QAAQ,IAAI;AACpB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,UAAM,WAAW,QAAQ,SAAS,CAAC;AACnC,QAAI,YAAY,QAAQ,KAAK,MAAM;AAC/B,YAAM,aAAa,QAAQ,WAAW,CAAC;AACvC,YAAMC,YAAW,QAAQ,SAAS,CAAC;AACnC,YAAM,gBAAgB,QAAQ,cAAc,CAAC;AAC7C,YAAM,eAAe,QAAQ,aAAa,CAAC;AAC3C,YAAM,gBAAgB,QAAQ,cAAc,CAAC;AAC7C,YAAM,aAAa,QAAQ,WAAW,CAAC;AACvC,YAAM,aAAa,QAAQ,cAAc,CAAC;AAC1C,YAAM,cAAc,SAAS,QAAQ,UAAU,CAAC;AAChD,YAAM,aAAa,SAAS,QAAQ,wBAAwB,CAAC;AAC7D,YAAM,eAAe,SAAS,QAAQ,UAAU,CAAC;AACjD,YAAM,EAAE,YAAY,UAAAA,WAAU,eAAe,cAAc,eAAe,YAAY,YAAY,aAAa,YAAY,aAAa;AAAA,IAC5I;AAAA,EACJ;AACJ;AAIA,SAAS,uBAA6C,KAAQ,KAAQ,YAAoB,YAAoB,OAAe,KAAa;AACtI,QAAM,SAAS,aAAa,IAAI;AAChC,QAAM,SAAS,aAAa,IAAI;AAChC,UAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAC3C,UAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAC3C,MAAI,IAAI;AACR,WAAS,IAAI,OAAO,IAAI,KAAK,KAAK;AAC9B,QAAI,CAAC,IAAI,IAAI,CAAC;AACd,SAAK;AAAA,EACT;AACJ;AAEA,SAAS,uBAA6C,KAAQ,KAAa,YAAoB,YAAoB,OAAe,KAAa;AAC3I,QAAM,SAAS,aAAa,IAAI;AAChC,QAAM,SAAS,aAAa,IAAI;AAChC,UAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAC3C,UAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAC3C,MAAI,IAAI;AACR,WAAS,IAAI,OAAO,IAAI,KAAK,KAAK;AAC9B,QAAI,CAAC,IAAI;AACT,SAAK;AAAA,EACT;AACJ;AAEA,SAAS,YAAY,QAAgB,wBAAiC,gBAAyB,YAAwB,WAAyD;AAC5K,QAAM,EAAE,QAAQ,YAAY,IAAI;AAEhC,QAAM,oBAAoB,CAAC,GAAG,aAAa,QAAQ,SAAS,CAAC;AAE7D,MAAI,YAA2B,CAAC;AAChC,QAAM,qBAAqB,oBAAI,IAAY;AAU3C,QAAM,SAAS,oBAAI,IAAmB;AACtC,WAAS,IAAI,GAAG,IAAI,kBAAkB,QAAQ,KAAK;AAC/C,UAAM,EAAE,cAAc,eAAe,YAAY,YAAY,WAAW,IAAI,kBAAkB,CAAC;AAC/F,UAAM,MAAM,GAAG,gBAAgB,iBAAiB,cAAc,cAAc;AAC5E,QAAI,QAAQ,OAAO,IAAI,GAAG;AAC1B,QAAI,CAAC,OAAO;AACR,cAAQ,EAAE,cAAc,eAAe,YAAY,YAAY,gBAAgB,CAAC,EAAE;AAClF,aAAO,IAAI,KAAK,KAAK;AAAA,IACzB;AACA,UAAM,eAAe,KAAK,CAAC;AAAA,EAC/B;AAGA,aAAW,MAAM,SAAS;AAG1B,aAAW,EAAE,cAAc,eAAe,YAAY,YAAY,eAAe,KAAK,OAAO,OAAO,GAAG;AAkDnG,QAASC,oBAAT,SAA4C,iBAAiE;AACzG,YAAM,UAAyB,CAAC;AAChC,YAAMC,WAAU,CAAC;AACjB,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,eAAe,GAAG;AACxD,cAAM,SAAS;AACf,YAAIC,SAAQ;AACZ,YAAI,QAAQ;AACR,UAAAA,SAAQ,QAAQ,QAAQ,MAAM;AAC9B,cAAIA,SAAQ,GAAG;AACX,YAAAA,SAAQ,QAAQ;AAChB,oBAAQ,KAAK,MAAM;AAAA,UACvB;AAAA,QACJ;AACA,gBAAQ,IAAID,UAAS,KAAKC,MAAK;AAAA,MACnC;AACA,aAAO,CAAC,SAASD,QAAO;AAAA,IAC5B;AAhBS,2BAAAD;AAjDT,QAAI,eAAe,UAAU;AACzB;AACJ,UAAM,cAAc,eAAe,IAAI,OAAK,kBAAkB,CAAC,CAAC;AAChE,UAAM,eAAe,YAAY,KAAK,OAAK,EAAE,iBAAiB,GAAI;AAClE,UAAM,eAAe,YAAY,KAAK,OAAK,EAAE,YAAY,UAAU;AAEnE,UAAM,iBAAiB,qBAAqB,YAAY,YAAY,cAAc,YAAY;AAC9F,UAAM,CAAC,SAAS,GAAG,gBAAgB,IAAI;AACvC,UAAM,cAAc,yBAAyB,mBAAmB;AAChE,UAAM,iBAAiB,qBAAqB,CAAC,OAAO,GAAG,UAAU,EAAE;AACnE,UAAM,oBAAoB,iBAAiB;AAC3C,UAAM,gBAAgB,qBAAqB,aAAa,UAAU;AAClE,UAAM,eAAe,cAAc;AAEnC,UAAM,eAAe,CAAC,GAAG,IAAI,IAAY,YAAY,IAAI,QAAM,GAAG,UAAU,CAAC,CAAC,EAAE,KAAK;AACrF,QAAI,cAAc;AAClB,QAAI,aAAa;AACjB,QAAI,eAAe;AACnB,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,YAAM,KAAK,YAAY,CAAC;AACxB,YAAM,SAAS,GAAG,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC;AACnD,YAAM,SAAS,GAAG,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC;AACjD,qBAAe;AACf,oBAAc;AACd,UAAI,oCAA0C;AAC1C,wBAAgB,KAAK,OAAO,SAAS,IAAI,SAAS,UAAU,CAAC;AAAA,MACjE;AAAA,IACJ;AACA,UAAM,eAAe,IAAI,YAAY,cAAc,YAAY;AAC/D,QAAI;AACJ,QAAI;AACJ,QAAI,kBAAkB,oCAA0C;AAC5D,0BAAoB,IAAI,WAAW,IAAI,YAAY,eAAe,iBAAiB,CAAC;AACpF,+BAAyB,IAAI,YAAY,YAAY;AAAA,IACzD;AACA,UAAM,iBAAiB,yBAAyB,IAAI,YAAY,cAAc,cAAc,IAAI;AAChG,QAAI;AACJ,QAAI,aAAa;AACb,oBAAc,KAAK,cAAc,QAAS,cAAc,aAAa,UAAU;AAAA,IACnF;AACA,UAAM,kBAAkB,IAAI,WAAW,WAAW;AAClD,QAAI,cAAc;AAClB,QAAI,eAAe;AACnB,QAAI,oBAAoB;AACxB,QAAI,yBAAyB;AAC7B,QAAI,aAA8B,CAAC;AAEnC,UAAM,eAA2C,CAAC;AAoBlD,UAAM,CAAC,eAAe,MAAM,IAAIA,kBAAiB;AAAA,MAC7C,SAAS;AAAA,MACT,WAAW,iBAAiB;AAAA,MAC5B,KAAK;AAAA,MACL,QAAQ,mBAAmB;AAAA,MAC3B,OAAO,mBAAmB;AAAA,IAC9B,CAAC;AAED,eAAW,cAAc,cAAc;AACnC,YAAM,SAAS,YAAY,OAAO,QAAM,GAAG,cAAc,UAAU;AACnE,UAAI,OAAO,UAAU;AACjB;AAEJ,YAAM,iBAAiB,cAAc,cAAc;AAEnD,iBAAW,WAAW,QAAQ;AAC1B,cAAM,EAAE,aAAa,YAAY,eAAe,YAAAG,aAAY,SAAS,IAAI;AACzE,cAAM,UAAU,EAAE,eAAe,SAAS;AAC1C,cAAM,CAAC,UAAU,MAAM,IAAI;AAC3B,cAAM,CAAC,UAAU,MAAM,IAAI;AAG3B,cAAM,gBAAgB,iBAAiBA,WAAU;AACjD,mBAAW,cAAc,aAAa;AAClC,gBAAM,EAAE,MAAM,WAAW,IAAI,cAAc,UAAU;AACrD,gBAAM,MAAM,IAAI,KAAK,cAAc,eAAe,YAAY;AAC9D,gBAAMC,SAAQ,YAAY,UAAU;AACpC,mBAAS,IAAI,GAAG,IAAIA,QAAO,KAAK;AAC5B,kBAAM,OAAO,cAAc,UAAU,IAAK,IAAI,KAAK;AACnD,gBAAI,cAAc,QAAQ;AACtB,kBAAI,MAAM,QAAQ,IAAI,QAAQ,UAAU;AACxC,kBAAI,YAAY;AACZ,sBAAM,QAAQ,IAAI,KAAK,WAAW,CAAC,CAAC;AAAA,cACxC;AACA,qCAAuB,KAAK,KAAK,MAAM,cAAc,UAAU,MAAM;AAAA,YACzE,OAAO;AACH,oBAAM,MAAM,QAAQ,IAAI,SAAS,UAAU;AAC3C,qCAAuB,KAAK,KAAK,MAAM,cAAc,UAAU,MAAM;AAAA,YACzE;AAAA,UACJ;AAAA,QACJ;AAGA,YAAI,qBAAqB,wBAAwB;AAC7C,gBAAM,EAAE,GAAG,GAAG,EAAE,IAAI,OAAO;AAC3B,cAAIC,gBAAe;AACnB,cAAI,eAAe,aAAa;AAC5B,YAAAA,iBAAgB,SAAS,YAAY;AACrC,qBAAS,IAAI,UAAU,IAAI,QAAQ,KAAK;AAEpC,oBAAM,MAAM,YAAY,CAAC,IAAI;AAC7B,gCAAkB,mBAAmB,IAAI,EAAE,GAAG;AAC9C,gCAAkB,mBAAmB,IAAI,EAAE,GAAG;AAC9C,gCAAkB,mBAAmB,IAAI,EAAE,GAAG;AAAA,YAClD;AAAA,UACJ,OAAO;AACH,YAAAA,iBAAgB,SAAS,YAAY;AACrC,qBAAS,IAAI,UAAU,IAAI,QAAQ,KAAK;AACpC,oBAAM,MAAM;AACZ,gCAAkB,mBAAmB,IAAI,EAAE,GAAG;AAC9C,gCAAkB,mBAAmB,IAAI,EAAE,GAAG;AAC9C,gCAAkB,mBAAmB,IAAI,EAAE,GAAG;AAAA,YAClD;AAAA,UACJ;AACA,iCAAuB,KAAK,UAAU,wBAAwB,yBAAyBA,aAAY;AACnG,oCAA0BA;AAAA,QAC9B;AAEA,YAAI,gBAAgB;AAEhB,gBAAM,MAAM,IAAI,WAAW,gBAAgB,eAAe,cAAc;AACxE,iCAAuB,KAAK,OAAO,SAAS,GAAG,GAAG,gBAAgB,UAAU,MAAM;AAClF,iCAAuB,KAAK,OAAO,SAAS,GAAG,GAAG,gBAAgB,UAAU,MAAM;AAClF,iCAAuB,KAAK,OAAO,SAAS,GAAG,GAAG,gBAAgB,UAAU,MAAM;AAAA,QACtF;AAGA,YAAI,eAAe,aAAa;AAC5B,mBAAS,IAAI,UAAU,IAAI,QAAQ,KAAK;AACpC,wBAAY,aAAa,IAAI,YAAY,CAAC,IAAI;AAAA,UAClD;AAAA,QACJ;AAGA,cAAM,iBAAiB,WAAW,QAAQ,QAAQ,KAAK;AACvD,YAAI,gBAAgB;AAChB,0BAAgB,KAAK,gBAAgB,cAAc,gBAAgB,SAAS,SAAS;AAAA,QACzF;AAGA,cAAM,OAAO,aAAa,SAAS;AACnC,cAAM,YAAY,eAAe,SAAS;AAC1C,YAAI,QAAQ,KAAK,aAAa,IAAI,EAAE,YAAY,UAAU;AACtD,uBAAa,IAAI,EAAE,YAAY;AAAA,QACnC,OAAO;AACH,uBAAa,KAAK,EAAE,UAAU,aAAa,cAAc,UAAU,CAAC;AAAA,QACxE;AAEA,wBAAgB,SAAS;AAAA,MAC7B;AAEA,YAAM,eAAe,cAAc,cAAc;AACjD,YAAM,aAAa,kBAAkB,cAAc,YAAY,oBAAoB;AACnF,YAAM,QAAQ,eAAe;AAC7B,iBAAW,KAAK,EAAE,YAAY,YAAY,OAAO,gBAAgB,MAAM,CAAC;AAAA,IAC5E;AAEA,YAAQ,OAAO,gBAAgB,WAAW;AAC1C,YAAQ,OAAO,eAAe,UAAU;AACxC,YAAQ,OAAO,sBAAsB,mBAAmB,UAAU,EAAE;AACpE,YAAQ,OAAO,2BAA2B,wBAAwB,UAAU,EAAE;AAC9E,UAAM,UAAU,eAAe;AAE/B,UAAM,CAAC,cAAc,UAAU,IAAI,YAAY,CAAC,EAAE;AAClD,QAAI;AACJ,QAAI,aAAa,cAAc;AAC3B,yBAAmB;AAAA,IACvB;AAEA,QAAI,oBAAoB,QAAW;AAC/B,yBAAmB,IAAI,gBAAgB;AAAA,IAC3C;AAEA,UAAM,SAAS;AACf,UAAM,iBAAiB,cAAc,KAAK,cAAc,IAAI,UAAmB,YAAY;AAC3F,UAAM,mBAAmB;AAAA,MACrB,UAAU,EAAE,MAAM,cAAc,QAAQ,OAAO,KAAK,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,cAAc,UAAU,GAAG,YAAY,yBAAyB,IAAI,OAAO;AAAA,MACxM,SAAS,gCAAgD,IAAI,EAAE,MAAM,cAAc,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,QAAQ,YAAY,MAAM,YAAY,cAAc,QAAQ,GAAG,YAAY,OAAO,IAAI;AAAA,MACnO,UAAU,eAAe,EAAE,MAAM,gBAAgB,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,iBAAiB,YAAY,OAAO,YAAY,cAAc,eAAe,GAAG,YAAY,OAAO,IAAI;AAAA,MAClN,UAAU,eAAe,EAAE,MAAM,gBAAgB,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,gBAAgB,YAAY,OAAO,YAAY,cAAc,UAAU,GAAG,YAAY,OAAO,IAAI;AAAA,MAC5M,WAAW,kCAAkD,IAAI,EAAE,MAAM,cAAc,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,cAAc,YAAY,OAAO,YAAY,cAAc,UAAU,GAAG,YAAY,OAAO,IAAI;AAAA,MAChP,QAAQ,+BAA+C,IAAI,EAAE,MAAM,cAAc,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,iBAAiB,YAAY,MAAM,YAAY,cAAc,OAAO,GAAG,YAAY,OAAO,IAAI;AAAA,MACzO,eAAe,sCAAsD,IAAI,EAAE,MAAM,cAAc,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,cAAc,cAAc,GAAG,YAAY,OAAO,IAAI;AAAA,MACtP,YAAY,cAAc,IAAI,EAAE,MAAM,gBAAgB,QAAQ,OAAO,SAAS,gBAAgB,YAAY,eAAe,cAAc,YAAY,OAAO,YAAY,cAAc,YAAY,GAAG,YAAY,OAAO,IAAI;AAAA,MAC1N,WAAW,oBAAoB;AAAA,QAC3B,EAAE,MAAM,cAAc,QAAQ,OAAO,QAAQ,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,GAAG,YAAY,GAAG;AAAA,QACxI,EAAE,MAAM,cAAc,QAAQ,OAAO,QAAQ,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,GAAG,YAAY,GAAG;AAAA,QACxI,EAAE,MAAM,cAAc,QAAQ,OAAO,QAAQ,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,IAAI,YAAY,GAAG;AAAA,QACzI,EAAE,MAAM,gBAAgB,QAAQ,OAAO,OAAO,gBAAgB,GAAG,eAAe,gBAAgB,YAAY,OAAO,YAAY,GAAG,YAAY,EAAE;AAAA,MACpJ,IAAI;AAAA,MACJ,WAAW,EAAE,MAAM,gBAAgB,QAAQ,OAAO,WAAW,gBAAgB,GAAG,eAAe,iBAAiB,YAAY,OAAO,YAAY,GAAG,YAAY,EAAE;AAAA,IACpK;AAEA,iBAAa,KAAK,CAAC,GAAG,MAAO,EAAE,WAAW,EAAE,QAAS;AAErD,cAAU,KAAK;AAAA,MACX;AAAA,MACA,eAAe,qBAAqB,aAAa;AAAA,MACjD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,aAAW,MAAM,OAAO;AAExB,QAAM,WAAW,IAAI,MAA+B,OAAO,YAAY,MAAM;AAC7E,QAAM,EAAE,YAAY,IAAI;AACxB,aAAW,KAAK,oBAAoB;AAChC,UAAM,CAAC,OAAO,GAAG,IAAI,SAAS,YAAY,YAAY,CAAC;AACvD,UAAM,WAAW,YAAY,SAAS,CAAC;AACvC,UAAM,YAAY;AAAA,MACd,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,IAC/B;AACA,UAAM,MAAM,OAAO,cAAc,SAAS,OAAO,GAAG;AACpD,UAAM,SAAS,SAAS,GAAG;AAC3B,aAAS,CAAC,IAAI,EAAE,UAAU,WAAW,OAAO;AAAA,EAChD;AAEA,SAAO,EAAE,WAAW,SAAS;AACjC;AAEO,SAAS,UAAU,IAAY,wBAAiC,gBAAyB,SAAiB,QAAqB,YAAwB,aAAsB;AAChL,UAAQ,OAAO,WAAW,KAAK;AAE/B,QAAM,IAAI,IAAI,aAAa,MAAM;AACjC,MAAI,SAAS,WAAW,CAAC;AACzB,MAAI;AACJ,cAAY,cAAe,cACvB,WAAW,QAAQ,QAAQ,KAAK,MAChC;AACJ,QAAM,aAAa,YAAY,IAAI,QAAQ,wBAAwB,SAAS;AAC5E,QAAM,WAAW,YAAY,QAAQ,wBAAwB,gBAAgB,YAAY,SAAS;AAGlG,SAAO,EAAE,YAAY,SAAS;AAClC;;;AC7mBO,IAAM,oBAAN,MAAwB;AAAA,EAI3B,YAA6BC,WAAkD;AAAlD,oBAAAA;AAAA,EAC7B;AAAA,EAJA,SAA2C,QAAQ,QAAQ,MAAS;AAAA,EACpE,UAAU;AAAA,EAKV,QAAQ;AACJ,SAAK,SAAS,KAAK,SAAS;AAAA,EAChC;AAAA,EAEA,QAAQ;AACJ,SAAK,UAAU;AAAA,EACnB;AACJ;AAEO,IAAM,aAAN,MAAiB;AAAA,EAKpB,YAAmB,SAAe;AAAf;AAAA,EACnB;AAAA,EALA,kBAAkB;AAAA,EAClB;AAAA,EAMA,MAAM,WAAW;AACb,QAAI,KAAK,kBAAkB,GAAG;AAC1B,YAAM,kBAAkB,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3D,aAAK,kBAAkB;AAAA,MAC3B,CAAC;AACD,YAAM;AACN,WAAK,kBAAkB;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEA,MAAc,QAAQ,UAAkB;AACpC,UAAM,MAAM,IAAI,IAAI,UAAU,KAAK,OAAO;AAC1C,QAAI,CAAC,IAAI;AACL,UAAI,SAAS,KAAK,SAAS,UAAU;AACzC,UAAM,WAAW,MAAM,MAAM,IAAI,SAAS,GAAG,EAAE,MAAM,OAAO,CAAC;AAC7D,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,IAAI,MAAM,eAAe,SAAS,WAAW,SAAS,eAAe,MAAM;AAAA,IACrF;AACA,WAAO;AAAA,EACX;AAAA,EAEA,6BAA6B,UAAkB,QAAyC;AACpF,UAAMC,QAAO;AACb,UAAMD,YAAW,IAAI,kBAAkB,UAAU,SAAY,oBAAoB,aAAa;AAC9F,IAAAA,UAAS,MAAM;AACf,WAAOA;AAEP,mBAAe,oBAAoB;AAC/B,UAAI;AACA,QAAAC,MAAK;AACL,cAAM,WAAW,MAAMA,MAAK,QAAQ,QAAQ;AAC5C,YAAI,CAAC,SAAS;AACV,gBAAM,IAAI,MAAM,eAAe,SAAS,UAAU,SAAS,aAAa;AAC5E,cAAM,SAAS,SAAS,KAAM,UAAU;AACxC,cAAM,UAAU,IAAI,WAAW,MAAO;AACtC,YAAI,SAAS;AACb,eAAO,CAACD,UAAS,SAAS;AACtB,gBAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,cAAI;AACA;AACJ,kBAAQ,IAAI,OAAO,MAAM;AACzB,oBAAU,MAAM;AAAA,QACpB;AACA,YAAI,CAACA,UAAS,SAAS;AACnB,kBAAQ,OAAO,UAAU,QAAQ,MAAM;AACvC,iBAAO,QAAQ;AAAA,QACnB,OAAO;AACH,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ,UAAE;AACE,QAAAC,MAAK;AACL,YAAIA,MAAK,mBAAmB,KAAKA,MAAK,iBAAiB;AACnD,UAAAA,MAAK,gBAAgB;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AAEA,mBAAe,gBAAgB;AAC3B,UAAI;AACA,QAAAA,MAAK;AACL,cAAM,WAAW,MAAMA,MAAK,QAAQ,QAAQ;AAC5C,YAAI,CAAC,SAAS;AACV,gBAAM,IAAI,MAAM,eAAe,SAAS,UAAU,SAAS,aAAa;AAE5E,cAAM,SAAS,SAAS,KAAM,UAAU;AACxC,cAAM,SAAuB,CAAC;AAC9B,YAAI,OAAO;AACX,eAAO,CAACD,UAAS,SAAS;AACtB,gBAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,cAAI;AACA;AACJ,iBAAO,KAAK,KAAK;AACjB,kBAAQ,MAAM;AAAA,QAClB;AACA,YAAI,CAACA,UAAS,SAAS;AACnB,gBAAM,UAAU,IAAI,WAAW,IAAI;AACnC,cAAI,SAAS;AACb,qBAAW,SAAS,QAAQ;AACxB,oBAAQ,IAAI,OAAO,MAAM;AACzB,sBAAU,MAAM;AAAA,UACpB;AACA,iBAAO,QAAQ;AAAA,QACnB,OAAO;AACH,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ,UAAE;AACE,QAAAC,MAAK;AACL,YAAIA,MAAK,mBAAmB,KAAKA,MAAK,iBAAiB;AACnD,UAAAA,MAAK,gBAAgB;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAlGI,cAHS,YAGK;;;ACjBX,IAAM,QAAN,MAAY;AAAA,EACN;AAAA,EAET,YAAY,QAA2B;AACnC,SAAK,QAAQ,IAAI,WAAW,QAAQ,GAAG,CAAC;AAAA,EAC5C;AAAA;AAAA,EAGA,WAAW;AACP,UAAM,EAAE,MAAM,IAAI;AAClB,eAAU;AACN,UAAI,QAAQ,gBAAgB,OAAO,GAAG,kBAAgB,cAAY,KAAK,kBAAgB;AACnF;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGA,WAAW;AACP,YAAQ,OAAO,KAAK,UAAU,MAAS;AACvC,UAAM,EAAE,MAAM,IAAI;AAClB,eAAU;AACN,UAAI,QAAQ,gBAAgB,OAAO,GAAG,kBAAgB,cAAY,KAAK,kBAAgB;AACnF;AAAA,MACJ;AACA,cAAQ,KAAK,OAAO,GAAG,cAAY;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA,EAGA,MAAM,YAAY;AACd,UAAM,EAAE,MAAM,IAAI;AAClB,eAAU;AACN,UAAI,QAAQ,gBAAgB,OAAO,GAAG,kBAAgB,cAAY,KAAK,kBAAgB;AACnF;AAAA,MACJ;AACA,YAAM,EAAE,OAAO,MAAM,IAAI,QAAQ,UAAU,OAAO,GAAG,cAAY;AACjE,UAAI,OAAO;AACP,cAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,SAAS;AACL,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,QAAQ,gBAAgB,OAAO,GAAG,gBAAc,gBAAc,KAAK,gBAAc;AACjF,YAAM,IAAI,MAAM,2DAA2D;AAAA,IAC/E;AACA,YAAQ,OAAO,OAAO,CAAC;AAAA,EAC3B;AACJ;;;ACzCO,IAAM,gBAAN,MAAoB;AAAA;AAAA,EAKvB,YAAqB,MAAiE;AAAjE;AAAA,EACrB;AAAA,EALS,aAAa,IAAI,WAAW;AAAA,EAC5B,YAAY,oBAAI,IAA+B;AAAA,EACxD,aAA+B;AAAA,EAK/B,QAAQ,KAAqB;AACzB,YAAQ,IAAI,MAAM;AAAA,MACd,KAAK;AACD,aAAK,UAAU,GAAG;AAClB;AAAA,MACJ,KAAK;AACD,aAAK,MAAM,GAAG;AACd;AAAA,MACJ,KAAK;AACD,aAAK,KAAK,GAAG;AACb;AAAA,MACJ,KAAK;AACD,aAAK,MAAM,GAAG;AACd;AAAA,MACJ,KAAK;AACD,aAAK,SAAS,GAAG;AACjB;AAAA,MACJ;AACI,gBAAQ,MAAM,wBAAwB,MAAM;AAC5C;AAAA,IACR;AAAA,EACJ;AAAA,EAEQ,UAAU,KAAoB;AAClC,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,UAAU,IAAI,WAAW,QAAQ,CAAC;AACxC,UAAM,QAAQ,IAAI,MAAM,MAAM;AAC9B,SAAK,aAAa,EAAE,QAAQ,SAAS,MAAM;AAAA,EAC/C;AAAA,EAEQ,YAAY,QAAqB,QAAqB;AAC1D,UAAM,EAAE,WAAW,IAAI;AACvB,UAAM,EAAE,IAAI,SAAS,yBAAyB,gBAAgB,YAAY,IAAI;AAC9E,UAAM,EAAE,YAAY,SAAS,IAAI,UAAU,IAAI,yBAAyB,gBAAgB,SAAS,QAAQ,YAAY,WAAW;AAChI,UAAM,WAAyB,EAAE,MAAM,SAAS,IAAI,YAAY,SAAS;AACzE,UAAM,WAA2B,CAAC;AAClC,eAAW,EAAE,eAAe,QAAQ,KAAK,SAAS,WAAW;AACzD,eAAS,KAAK,GAAG,aAAa;AAC9B,UAAI,OAAO,WAAW,UAAU;AAC5B,iBAAS,KAAK,QAAQ,MAAM;AAAA,MAChC;AAAA,IACJ;AACA,SAAK,KAAK,UAAU,QAAQ;AAAA,EAChC;AAAA,EAEA,MAAc,MAAM,QAAsB;AACtC,UAAM,EAAE,IAAI,OAAO,IAAI;AACvB,QAAI;AACA,WAAK,YAAY,QAAQ,MAAM;AAAA,IACnC,SAAS,OAAP;AACE,WAAK,MAAM,IAAI,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,MAAc,KAAK,QAAqB;AACpC,UAAM,EAAE,YAAY,UAAU,IAAI;AAClC,UAAM,EAAE,KAAK,IAAI,SAAS,IAAI;AAC9B,QAAI;AACA,YAAMC,YAAW,WAAW,6BAA6B,KAAK,IAAI,YAAY,QAAQ,CAAC;AACvF,gBAAU,IAAI,IAAIA,SAAQ;AAC1B,YAAM,SAAS,MAAMA,UAAS;AAC9B,gBAAU,OAAO,EAAE;AACnB,UAAI,QAAQ;AACR,aAAK,YAAY,QAAQ,MAAM;AAAA,MACnC,OAAO;AACH,cAAM,aAA6B,EAAE,MAAM,WAAW,GAAG;AACzD,aAAK,KAAK,UAAU;AAAA,MACxB;AAAA,IACJ,SAAS,OAAP;AACE,WAAK,MAAM,IAAI,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA,EAEQ,WAAW,IAAY;AAC3B,UAAM,EAAE,UAAU,IAAI;AACtB,UAAMA,YAAW,UAAU,IAAI,EAAE;AACjC,cAAU,OAAO,EAAE;AACnB,WAAO,EAAE,UAAAA,UAAS;AAAA,EACtB;AAAA,EAEQ,MAAM,IAAY,OAAY;AAClC,UAAM,EAAE,UAAAA,UAAS,IAAI,KAAK,WAAW,EAAE;AACvC,UAAM,WAAW,EAAE,MAAM,SAAS,IAAI,MAAM;AAC5C,SAAK,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEQ,MAAM,QAAsB;AAChC,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,UAAAA,UAAS,IAAI,KAAK,WAAW,EAAE;AACvC,IAAAA,WAAU,MAAM;AAAA,EACpB;AAAA,EAEA,MAAc,SAAS,QAAyB;AAC5C,UAAM,EAAE,WAAW,WAAW,IAAI;AAClC,eAAWA,aAAY,UAAU,OAAO,GAAG;AACvC,MAAAA,UAAS,MAAM;AAAA,IACnB;AACA,UAAM,WAAW,SAAS;AAC1B,YAAQ,OAAO,UAAU,QAAQ,CAAC;AAClC,UAAM,gBAAgB,EAAE,MAAM,cAAc;AAC5C,SAAK,KAAK,aAAa;AAAA,EAC3B;AACJ;;;ACrHO,IAAM,YAAY;;;ACHV,SAAR,aAA8B,YAAY;AAC/C,MAAI,OAAO,IAAI,KAAK,CAAC,UAAU,GAAG,EAAC,MAAM,kBAAiB,CAAC;AAC3D,MAAI,MAAM,IAAI,gBAAgB,IAAI;AAClC,MAAI,SAAS,IAAI,OAAO,GAAG;AAC3B,MAAI,gBAAgB,GAAG;AACvB,SAAO;AACT;;;ACNe,SAARC,UAA0B;AAC/B,SAAO,aAAa,6/0BAAy51B;AAC/61B;;;ACUO,IAAM,aAAN,MAAiB;AAAA,EACX;AAAA,EACA;AAAA,EACA,kBAAkB,oBAAI,IAAmC;AAAA,EAClE,kBAAiC,QAAQ,QAAQ;AAAA,EACzC;AAAA,EACR,UAAU;AAAA,EAEV,YAAY,SAA4B;AACpC,QAAI,QAAQ,WAAW;AACnB,YAAM,SAAS,KAAK,SAASC,QAAa;AAC1C,aAAO,YAAY,OAAK;AACpB,aAAK,QAAQ,EAAE,IAAuB;AAAA,MAC1C;AAAA,IACJ;AACA,SAAK,UAAU,IAAI,cAAc,KAAK,QAAQ,KAAK,IAAI,CAAC;AAAA,EAC5D;AAAA,EAEA,UAAU,QAA2B;AACjC,UAAM,MAAqB,EAAE,MAAM,UAAU,OAAO;AACpD,SAAK,KAAK,GAAG;AAAA,EACjB;AAAA,EAEA,IAAI,kBAAkB;AAClB,WAAO,KAAK,gBAAgB;AAAA,EAChC;AAAA,EAEQ,KAAK,KAAqB;AAC9B,UAAM,EAAE,QAAQ,QAAQ,IAAI;AAC5B,QAAI,QAAQ;AACR,aAAO,YAAY,GAAG;AAAA,IAC1B,OAAO;AACH,cAAQ,QAAQ,GAAG;AAAA,IACvB;AAAA,EACJ;AAAA,EAEQ,QAAQ,KAAsB;AAClC,QAAI,IAAI,QAAQ,eAAe;AAC3B,YAAM,EAAE,gBAAgB,IAAI;AAC5B,WAAK,kBAAkB;AACvB,wBAAkB;AAClB;AAAA,IACJ;AACA,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,gBAAgB,IAAI;AAC5B,UAAM,iBAAiB,gBAAgB,IAAI,EAAE;AAC7C,QAAI,gBAAgB;AAChB,sBAAgB,OAAO,EAAE;AACzB,YAAM,EAAE,SAAS,OAAO,IAAI;AAC5B,cAAQ,IAAI,MAAM;AAAA,QACd,KAAK;AACD,kBAAQ,GAAG;AACX;AAAA,QACJ,KAAK;AACD,kBAAQ,MAAS;AACjB;AAAA,QACJ,KAAK;AACD,iBAAO,IAAI,KAAK;AAChB;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,SAAK,kBAAkB,IAAI,QAAc,CAAC,YAAY;AAClD,WAAK,kBAAkB;AAAA,IAC3B,CAAC;AACD,UAAM,MAAuB,EAAE,MAAM,YAAY;AACjD,SAAK,KAAK,GAAG;AACb,SAAK,gBAAgB,MAAM;AAAA,EAC/B;AAAA,EAEA,UAAU;AACN,UAAM,MAAoB,EAAE,MAAM,QAAQ;AAC1C,SAAK,KAAK,GAAG;AAAA,EACjB;AAAA,EAEA,UAAU,QAAqB,IAAY,eAA8B,SAAmD;AACxH,UAAM,EAAE,gBAAgB,IAAI;AAC5B,UAAM,iBAAiB,cAAc,SAAS;AAC9C,UAAM,cAAc;AACpB,UAAM,WAAyB,EAAE,MAAM,SAAS,QAAQ,IAAI,SAAS,yBAAyB,MAAM,gBAAgB,YAAY;AAChI,UAAM,UAAU,IAAI,QAAiC,CAAC,SAAS,WAAW;AACtE,sBAAgB,IAAI,IAAI,EAAE,SAAS,OAAO,CAAC;AAAA,IAC/C,CAAC;AACD,SAAK,KAAK,QAAQ;AAClB,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,MAAkB,SAAmD;AAC1E,UAAM,EAAE,gBAAgB,IAAI;AAC5B,UAAM,EAAE,cAAc,IAAI,KAAK,QAAQ;AACvC,UAAM,EAAE,IAAI,KAAK,IAAI;AACrB,QAAI,KAAK,QAAQ,OAAO,QAAW;AAC/B,aAAO,QAAQ,QAAQ,MAAS;AAAA,IACpC;AACA,UAAM,MAAM,IAAI,IAAI,KAAK,QAAQ,GAAG;AACpC,QAAI,YAAY,KAAK;AACrB,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,iBAAiB,cAAc,SAAS;AAC9C,UAAM,cAAc;AACpB,UAAM,UAAuB,EAAE,MAAM,QAAQ,IAAI,SAAS,KAAK,IAAI,SAAS,GAAG,UAAU,yBAAyB,MAAM,gBAAgB,YAAY;AACpJ,YAAQ,OAAO,YAAY,CAAC;AAC5B,UAAM,WAAyB,EAAE,MAAM,SAAS,GAAG;AACnD,UAAM,QAAQ,MAAM;AAAE,WAAK,KAAK,QAAQ;AAAA,IAAG;AAC3C,SAAK,WAAW,EAAE,MAAM;AACxB,SAAK,KAAK,OAAO;AACjB,WAAO,IAAI,QAAiC,CAAC,SAAS,WAAW;AAC7D,sBAAgB,IAAI,IAAI,EAAE,SAAS,OAAO,CAAC;AAAA,IAC/C,CAAC;AAAA,EACL;AACJ;;;ACzHO,SAAS,cAAc,UAAgD;AAC1E,MAAI,SAAS,MAAM,UAAU;AACzB,WAAO,CAAC,GAAG,CAAC;AAChB,SAAO,CAAC,SAAS,MAAM,CAAC,EAAE,UAAU,SAAS,MAAM,SAAS,MAAM,SAAS,CAAC,EAAE,QAAQ;AAC1F;AAEO,SAAS,sBAAsB,MAAc,UAAmE;AACnH,QAAM,EAAE,MAAM,IAAI;AAClB,QAAM,IAAI,MAAM;AAChB,QAAM,SAAS,IAAI,kBAAkB,OAAO,CAAC;AAC7C,MAAI,IAAI,GAAG;AAIP,QAASC,YAAT,SAAkBC,QAAe;AAC7B,YAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,MAAMA,MAAK,EAAE;AAClC,aAAO,aAAK,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC;AAAA,IAC1C;AAHS,mBAAAD;AAHT,UAAM,WAAW,MAAM,CAAC,EAAE;AAC1B,UAAM,WAAW,MAAM,IAAI,CAAC,EAAE;AAC9B,QAAI,YAAY;AAKhB,UAAM,QAAQA,UAAS,CAAC;AACxB,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,YAAM,SAAS,IAAI,OAAO,QAAQ,WAAW,YAAY;AACzD,eAAS,IAAI,WAAW,IAAI,IAAI,GAAG,KAAK;AACpC,oBAAY;AACZ,cAAM,KAAK,MAAM,CAAC,EAAE;AACpB,cAAM,KAAK,MAAM,IAAI,CAAC,EAAE;AACxB,cAAM,KAAKA,UAAS,CAAC;AACrB,cAAM,KAAKA,UAAS,IAAI,CAAC;AACzB,YAAI,SAAS,MAAM,QAAQ,IAAI;AAC3B,gBAAM,KAAK,QAAQ,OAAO,KAAK;AAC/B,uBAAK,KAAK,OAAO,IAAI,IAAI,CAAC;AAC1B;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI;AACrB,aAAO,IAAI,IAAI,CAAC,IAAI,IAAI;AACxB,aAAO,IAAI,IAAI,CAAC,IAAI,IAAI;AACxB,aAAO,IAAI,IAAI,CAAC,IAAI,IAAI;AACxB,aAAO,IAAI,IAAI,CAAC,IAAI,IAAI;AAAA,IAC5B;AAAA,EACJ;AACA,SAAO;AACX;;;ACbO,IAAM,sBAAN,MAAwE;AAAA,EAiB3E,YAAqB,eAAuC,QAA+B,UAA6B,WAAsB;AAAzH;AAAuC;AAA+B;AAA6B;AACpH,SAAK,SAAS,IAAI,WAAW,EAAE,UAAU,CAAC;AAC1C,UAAM,aAAa;AACnB,UAAM,gBAAgB,aAAa;AAEnC,UAAM,SAAS,IAAI,kBAAkB,GAAG,EAAE,cAAc,CAAC;AACzD,SAAK,OAAO,UAAU,MAAM;AAC5B,SAAK,YAAY;AAAA,MACb;AAAA,MACA,SAAS,IAAI,WAAW,QAAQ,CAAC;AAAA,MACjC,OAAO,IAAI,MAAM,MAAM;AAAA,IAC3B;AAAA,EACJ;AAAA,EA5BS;AAAA,EACA,iBAAiB,IAAI,oCAAkC,IAAI,CAAC;AAAA,EACrE,sBAAsB,aAAa;AAAA,EACnC,QAAQ;AAAA,EACR,iBAAiB;AAAA,EAEjB,wBAAwB,aAAK,OAAO;AAAA,EACpC,oBAAoB;AAAA,EACpB;AAAA;AAAA,EAEA,YAAuB,CAAC;AAAA,EACxB,UAAkB;AAAA,EAClB,8BAA8B;AAAA;AAAA,EAC9B,SAAS,CAAC,OAAO,OAAO,OAAO,OAAO,KAAK;AAAA,EAClC;AAAA,EAgBT,IAAI,aAAa;AACb,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EAEA,OAAO,OAA2B;AAG9B,UAAM,EAAE,eAAe,WAAW,UAAU,6BAA6B,OAAO,IAAI;AACpF,UAAM,EAAE,IAAI,cAAc,IAAI;AAC9B,UAAM,EAAE,OAAO,uBAAuB,YAAY,QAAQ,SAAS,MAAM,QAAQ,SAAS,IAAI;AAC9F,UAAM,EAAE,OAAO,IAAI,SAAS;AAE5B,QAAI,EAAE,oBAAoB,IAAI;AAC9B,aAAS,6BAA6B,OAA4C;AAE9E,UAAK,OAAO,oBAAoB,KAAK,EAAa,KAAK,SAAO,oBAAoB,GAAG,KAAK,MAAM,GAAG,CAAC,GAAG;AACnG,8BAAsB,EAAE,GAAG,qBAAqB,GAAG,MAAM;AAAA,MAC7D;AAAA,IACJ;AAEA,SAAK,8BAA8B,IAAI,cAAc;AAErD,QAAI,OAAO,eAAe,cAAc,YAAY,YAAY;AAC5D,aAAO,cAAc,cAAc,YAAY;AAAA,IACnD;AAEA,SAAK,QAAQ,MAAM,MAAM;AAEzB,QAAI,kBAAkB;AACtB,QAAI,cAAc,gBAAgB,EAAE,OAAO,CAAC,GAAG;AAC3C,YAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,YAAM,EAAE,QAAAE,QAAO,IAAI,SAAS;AAC5B,MAAAA,QAAO,YAAY,KAAK,SAAS;AACjC,MAAAA,QAAO,eAAe,KAAK,YAAY;AACvC,MAAAA,QAAO,aAAa,KAAK,UAAU;AACnC,MAAAA,QAAO,kBAAkB,KAAK,mBAAmB;AACjD,MAAAA,QAAO,iBAAiB,UAAU;AAClC,MAAAA,QAAO,kBAAkB,UAAU;AACnC,MAAAA,QAAO,iBAAiB,cAAc,UAAU,aAAa;AAC7D,MAAAA,QAAO,uBAAuB,OAAO;AACrC,YAAM,kBAAkB,uCAAqC,UAAU,aAAa;AACpF,WAAK,eAAe,IAAI,iBAAiB,sBAAoB,CAAC;AAC9D,wBAAkB;AAAA,IACtB;AAEA,QAAI,cAAc,gBAAgB,EAAE,QAAQ,CAAC,GAAG;AAC5C,YAAM,EAAE,QAAAA,QAAO,IAAI,SAAS;AAC5B,MAAAA,QAAO,iBAAiB,cAAc,QAAQ,iBAAiB;AAC/D,YAAM,kBAAkB,uCAAqC,QAAQ,iBAAiB;AACtF,WAAK,eAAe,IAAI,iBAAiB,sBAAoB,CAAC;AAC9D,wBAAkB;AAAA,IACtB;AAEA,QAAI,cAAc,gBAAgB,EAAE,KAAK,CAAC,GAAG;AACzC,YAAM,EAAE,QAAAA,QAAO,IAAI,SAAS;AAC5B,MAAAA,QAAO,uBAAuB,KAAK;AAAA,IACvC;AAEA,QAAI,iBAAiB;AACjB,sBAAgB,IAAI,UAAU,kBAAkB,EAAE,GAAG,OAAO,qBAAqB,OAAO,KAAK,eAAe,CAAC;AAAA,IACjH;AAEA,QAAI,cAAc,gBAAgB,EAAE,MAAM,CAAC,GAAG;AAC1C,YAAM,EAAE,UAAU,IAAI;AACtB,UAAI,OAAO;AACP,cAAM,EAAE,KAAK,IAAI;AACjB,YAAI,QAAQ,WAAW,OAAO,MAAM;AAChC,cAAI,MAAM;AACN,kBAAM,EAAE,SAAAC,UAAS,WAAW,OAAO,QAAAC,SAAQ,UAAU,IAAI;AACzD,iBAAK,SAAS,CAACD,YAAW,OAAO,aAAa,OAAO,SAAS,OAAOC,WAAU,OAAO,aAAa,KAAK;AAAA,UAC5G,OAAO;AACH,iBAAK,SAAS,CAAC,MAAM,OAAO,OAAO,OAAO,KAAK;AAAA,UACnD;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,OAAO,OAAO,KAAK,KAAK;AACxB,YAAI,KAAK,KAAK;AACV,eAAK,OAAO,SAAS;AAAA,QACzB;AAGA,mBAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,mBAAS,QAAQ;AAAA,QACrB;AACA,aAAK,YAAY,CAAC;AAGlB,cAAM,MAAM,OAAO;AACnB,YAAI,OAAO,KAAK,KAAK;AACjB,gBAAM,EAAE,UAAU,IAAI;AACtB,gBAAM,aAAa,OAAO,OAAO,cAAc;AAC/C,gBAAM,WAAW,aAAa;AAC9B,cAAI,UAAU,OAAO,cAAc,UAAU;AACzC,sBAAU,MAAM,SAAS;AACzB,gBAAI,WAAW,UAAU,OAAO,YAAY;AAExC,wBAAU,OAAO,KAAK,QAAQ;AAAA,YAClC;AAEA,YAAC,UAAwC,UAAU,IAAI,WAAW,UAAU,QAAQ,GAAG,UAAU;AACjG,kCAAsB,UAAU,SAAS,MAAM,UAAU;AACzD,sBAAU,MAAM,OAAO;AAAA,UAC3B;AACA,eAAK,MAAM;AACX,cAAI,KAAK;AACL,kBAAM,eAAe,kBAAkB,KAAK;AAC5C,gBAAI,cAAc;AACd,8BAAgB,IAAI,UAAU,iBAAiB,EAAE,MAAM,cAAc,OAAO,KAAK,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,aAAa,CAAC;AAAA,YACrK;AAAA,UACJ;AAAA,QACJ;AAGA,YAAI,OAAO;AACP,eAAK,UAAU,MAAM,OAAO;AAC5B,eAAK,YAAY,KAAK;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,EAAE,UAAU,IAAI;AAEtB,QAAI,cAAc,gBAAgB,EAAE,sBAAsB,CAAC,GAAG;AAC1D,WAAK,oBAAoB,0BAA0B,KAAK;AACxD,WAAK,wBAAwB;AAAA,IACjC;AAEA,QAAI,cAAc,gBAAgB,EAAE,WAAW,CAAC,GAAG;AAC/C,YAAM,EAAE,OAAO,IAAI;AACnB,YAAM,EAAE,UAAU,IAAI;AACtB,YAAM,EAAE,UAAU,IAAI;AACtB,YAAM,aAAa,WAAW,WAAW,UAAU,CAAC;AAEpD,mCAA6B,EAAE,WAAW,OAAO,SAAS,EAAE,CAAC;AAE7D,YAAM,EAAE,QAAAF,QAAO,IAAI,SAAS;AAC5B,MAAAA,QAAO,wBAAwB,WAAW,iBAAiB;AAG3D,UAAI,OAAO;AACP,cAAM,IAAI,KAAK,IAAI,OAAO,QAAQ,WAAW,MAAM;AACnD,YAAI,SAAS;AACb,cAAM,oBAAoB,WAAW,WAAW;AAChD,cAAM,oBAAoB,MAAM,WAAW;AAC3C,YAAI,qBAAqB,qBAAqB,qBAAqB,YAAY,qBAAqB,UAAU;AAC1G,mBAAS;AAAA,QACb,OAAO;AACH,mBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,gBAAI,OAAO,CAAC,KAAK,WAAW,CAAC,MAAM,OAAO,CAAC,GAAG,UAAU,YAAY,WAAW,CAAC,GAAG,UAAU,WAAW;AACpG,uBAAS;AACT;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,QAAQ;AACR,eAAK,YAAY,KAAK;AAAA,QAC1B;AAAA,MACJ;AAEA,YAAMG,cAAa,CAAC,WAAW,eAAe,GAAG,OAAO,IAAI,OAAK,EAAE,MAAM,CAAC;AAC1E,YAAM,iBAAiB,YACnB;AAAA,QACI,UAAU,WAAW;AAAA,QACrB,GAAG,UAAU,WAAW,OAAO,IAAI,OAAK,EAAE,MAAM;AAAA,MACpD,IAAI,CAAC;AACT,UAAI,CAAC,cAAcA,aAAY,cAAc,GAAG;AAE5C,cAAM,QAAQ,sBAAsB,UAAU;AAC9C,wBAAgB,IAAI,UAAU,kBAAkB,EAAE,MAAM,cAAc,OAAO,KAAK,QAAQ,GAAG,gBAAgB,WAAW,MAAM,SAAS,MAAM,CAAC;AAAA,MAClJ;AAEA,YAAM,YAAY,OAAO,IAAI,OAAK,EAAE,SAAS;AAC7C,YAAM,gBAAgB,WAAW,WAAW,OAAO,IAAI,OAAK,EAAE,SAAS,KAAK,CAAC;AAC7E,YAAM,mBAAmB,CAAC,cAAc,WAAW,aAAa;AAGhE,UAAI,kBAAkB;AAClB,kBAAU,MAAM,SAAS;AACzB,8BAAsB,UAAU,SAAS,UAAU;AACnD,kBAAU,MAAM,OAAO;AAGvB,cAAM,QAAsB,CAAC;AAC7B,mBAAW,YAAY,OAAO,OAAO,SAAS,GAAG;AAC7C,gBAAM,KAAK,GAAG,aAAa,QAAQ,CAAC;AAAA,QACxC;AAEA,mBAAW,QAAQ,OAAO;AACtB,eAAK,gBAAgB,UAAU,OAAO;AAAA,QAC1C;AAAA,MAEJ;AAAC;AAAA,IACL;AAEA,QAAI,cAAc,gBAAgB,EAAE,SAAS,CAAC,GAAG;AAC7C,mCAA6B,EAAE,MAAM,SAAS,QAAQ,CAAC;AAAA,IAC3D;AAEA,QAAI,cAAc,gBAAgB,EAAE,OAAO,CAAC,GAAG;AAC3C,mCAA6B,EAAE,QAAQ,OAAO,eAAe,EAAE,CAAC;AAAA,IACpE;AAEA,kBAAc,oBAAoB,UAAU,eAAe,SAAS,KAAK;AAGzE,QAAI,KAAK,uBAAuB,qBAAqB;AACjD,WAAK,sBAAsB;AAC3B,mBAAa,eAAe,eAAe,UAAU,KAAK,UAAU,UAAU,mBAAmB,EAAE,KAAK,MAAM;AAE1G,sBAAc,UAAU;AAAA,MAC5B,CAAC;AAAA,IACL;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACtB,YAAM,QAAsB,CAAC;AAC7B,iBAAW,YAAY,OAAO,OAAO,SAAS,GAAG;AAC7C,iBAAS,OAAO,KAAK;AAGrB,cAAM,mBAAmB,CAAC,GAAG,aAAa,QAAQ,CAAC;AACnD,mBAAW,QAAQ,kBAAkB;AACjC,cAAI,CAAC,KAAK,YAAY,8BAA8B,IAAI,GAAG;AACvD,gBAAI,KAAK,4BAA8B;AACnC,mBAAK,QAAQ;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AACA,cAAM,KAAK,GAAG,aAAa,QAAQ,CAAC;AAAA,MACxC;AAEA,YAAM,KAAK,CAAC,GAAG,MAAM,EAAE,gBAAgB,EAAE,aAAa;AAEtD,YAAM,EAAE,YAAY,IAAI,cAAc;AACtC,YAAM,EAAE,cAAc,IAAI,cAAc;AACxC,UAAI,WAAW;AACf,UAAI,aAAa;AACjB,iBAAW,QAAQ,OAAO;AACtB,YAAI,KAAK,aAAa;AAClB,sBAAY,KAAK,KAAK;AACtB,wBAAc,KAAK;AAAA,QACvB;AACA,YAAI,KAAK,oCAAsC,KAAK,8BAAgC;AAEhF,wBAAc,KAAK,KAAK;AACxB,sBAAY,KAAK,KAAK;AAAA,QAC1B;AAAA,MACJ;AAGA,iBAAW,QAAQ,OAAO;AACtB,YAAI,KAAK,YAAY,2BAA2B,GAAG;AAC/C,cAAI,KAAK,4BAA8B;AACnC,gBAAI,aAAa,KAAK,KAAK,mBAAmB,iBAAiB,WAAW,KAAK,KAAK,YAAY,aAAa;AACzG,mBAAK;AACL,4BAAc,KAAK,KAAK;AACxB,0BAAY,KAAK,KAAK;AAAA,YAC1B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,qBAAe,QAAQ,aAAa,SAAS,eAAe,CAAC;AAC7D,qBAAe,QAAQ,cAAc,WAAW,eAAe,CAAC;AAEhE,YAAM,eAAe;AACrB,UAAI,qBAAqB,eAAe,KAAK,OAAO;AACpD,iBAAW,QAAQ,OAAO;AACtB,YAAI,qBAAqB,KAAK,KAAK,kCAAoC;AACnE,eAAK,aAAa;AAClB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,UAAU,YAAY,IAAI;AAAA,EAEpC;AAAA,EAEA,8BAA8B;AAC1B,UAAM,EAAE,GAAG,IAAI,KAAK;AAEpB,OAAG,iBAAiB,kBAA6B,KAAM,GAAG,GAAG,CAAC;AAC9D,OAAG,iBAAiB,kBAA6B,YAAY,GAAG,GAAG,CAAC;AACpE,OAAG,eAAe,gBAA2B,GAAG,GAAG,GAAG,CAAC;AACvD,OAAG,eAAe,sBAAiC,GAAG,GAAG,GAAG,CAAC;AAC7D,OAAG,eAAe,oBAA+B,OAAO,mBAAmB,OAAO,mBAAmB,OAAO,mBAAmB,OAAO,iBAAiB;AACvJ,OAAG,iBAAiB,mBAA8B,GAAG,GAAG,GAAG,CAAC;AAAA,EAChE;AAAA,EAEA,eAAe,6BAAqC,UAAyD;AAEzG,UAAM,QAAsB,CAAC;AAC7B,aAAS,QAAQ,MAA2B;AACxC,UAAI,WAAW;AACf,UAAI,KAAK,4BAA+B;AACpC,YAAI,OAAO,KAAK,KAAK;AACrB,YAAI,KAAK,YAAY,2BAA2B,GAAG;AAC/C,qBAAW,SAAS,KAAK,UAAU;AAC/B,gBAAI,MAAM,aAAa;AACnB,yBAAW;AACX,kBAAI,QAAQ,KAAK,GAAG;AAChB,wBAAQ,EAAE,KAAK,MAAM,KAAK;AAAA,cAC9B;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,MAAM;AACN,qBAAW;AACX,gBAAM,KAAK,EAAE,MAAM,KAAK,CAAC;AAAA,QAC7B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,QAAI,UAAU;AACV,cAAQ,QAAQ;AAChB,YAAM,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,eAAe,EAAE,KAAK,YAAY;AAAA,IAClE;AACA,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,OAA2B;AAC/B,UAAM,EAAE,WAAW,cAAc,IAAI;AACrC,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,GAAG,IAAI;AACf,eAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,YAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,QAAQ;AACzG,cAAQ,IAAI;AAAA,QACR,SAAS,SAAS;AAAA,QAClB,OAAO,EAAE,MAAM,KAAK;AAAA,MACxB,CAAC;AACD,SAAG,cAAc,GAAG,QAAQ;AAC5B,YAAM,YAAuB,CAAC;AAC9B,iBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,aAAK,WAAW,MAAM,MAAM,sBAAyB;AAAA,MACzD;AACA,SAAG,YAAY,GAAG,YAAY,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,WAAW,eAAe,MAAM,IAAI;AAC5C,UAAM,EAAE,YAAY,eAAe,WAAW,IAAI;AAClD,UAAM,EAAE,UAAU,eAAe,gBAAgB,iBAAiB,kBAAkB,iBAAiB,IAAI;AACzG,UAAM,EAAE,IAAI,aAAa,gBAAgB,kBAAkB,iBAAiB,cAAc,IAAI;AAI9F,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,YAAQ,IAAI;AAAA,MACR,SAAS,SAAS;AAAA,MAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,eAAe,IAAI;AAAA,MACtE,MAAM,EAAE,QAAQ,KAAM;AAAA,MACtB,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,QACX,MAAM,aAAa,WAAW;AAAA,MAClC;AAAA,MACA,UAAU;AAAA,QACN,EAAE,MAAM,cAAc,SAAS,MAAM,SAAS,cAAc;AAAA;AAAA,QAC5D,EAAE,MAAM,oBAAoB,SAAS,SAAS,SAAS,eAAe;AAAA,QACtE,EAAE,MAAM,oBAAoB,SAAS,UAAU,SAAS,WAAW;AAAA,QACnE,EAAE,MAAM,cAAc,SAAS,iBAAiB,SAAS,eAAe;AAAA,QACxE,EAAE,MAAM,cAAc,SAAS,kBAAkB,SAAS,eAAe;AAAA,QACzE,EAAE,MAAM,cAAc,SAAS,kBAAkB,SAAS,eAAe;AAAA,MAC7E;AAAA,IACJ,CAAC;AACD,SAAK,4BAA4B;AACjC,OAAG,cAAc,GAAG,QAAQ;AAE5B,eAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,YAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,QAAQ;AACzG,YAAM,YAAuB,CAAC;AAC9B,iBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,aAAK,WAAW,MAAM,MAAM,wBAA2B;AAAA,MAC3D;AACA,UAAI,SAAS,mCAA4C,MAAM,QAAQ,cAAc;AACjF,gBAAQ,IAAI,EAAE,MAAM,iBAAiB,OAAO,GAAK,SAAS,EAAE,CAAC;AAAA,MACjE;AAAA,IACJ;AAEA,OAAG,YAAY,GAAG,YAAY,IAAI;AAElC,QAAI,MAAM,SAAS,WAAW,cAAc,SAAS,SAAS;AAE1D,YAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI,MAAM,SAAS;AACzC,YAAM,QAAQ,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC,MAAM;AAG9C,cAAQ,IAAI;AAAA,QACR,gBAAgB,CAAC,gBAAgB,kBAAkB,iBAAiB,IAAI;AAAA,QACxE,OAAO;AAAA,UACH,MAAM;AAAA,UACN,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AACD,YAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,KAAK,2BAAoC,CAAC;AAC3I,iBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,YAAI,KAAK,gBAAgB,KAAK,GAAG;AAC7B,eAAK,0BAA0B,MAAM,IAAI;AAAA,QAC7C;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,OAAO;AACP,iBAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,cAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,QAAQ;AACzG,gBAAQ,IAAI;AAAA,UACR,SAAS,SAAS;AAAA,UAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,eAAe,IAAI;AAAA,UACtE,OAAO;AAAA,YACH,MAAM;AAAA,YACN,WAAW;AAAA,YACX,MAAM;AAAA,UACV;AAAA,UACA,MAAM,EAAE,QAAQ,KAAM;AAAA,UACtB,OAAO;AAAA,YACH,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,OAAO,CAAC,GAAG,GAAG,GAAG,IAAG;AAAA,UACxB;AAAA;AAAA,QAEJ,CAAC;AACD,mBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,eAAK,gBAAgB,IAAI;AAAA,QAC7B;AAEA,gBAAQ,IAAI;AAAA,UACR,SAAS,SAAS;AAAA,UAClB,OAAO,EAAE,MAAM,OAAQ;AAAA,UACvB,OAAO;AAAA,YACH,OAAO,CAAC,GAAG,GAAG,GAAG,IAAG;AAAA,UACxB;AAAA,QACJ,CAAC;AACD,mBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,eAAK,gBAAgB,IAAI;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAO;AACH,UAAM,EAAE,WAAW,cAAc,IAAI;AACrC,UAAM,EAAE,IAAI,gBAAgB,kBAAkB,iBAAiB,eAAe,YAAY,aAAa,WAAW,cAAc,IAAI;AACpI,UAAM,EAAE,UAAU,eAAe,gBAAgB,iBAAiB,kBAAkB,iBAAiB,IAAI;AACzG,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,UAAM,QAAQ;AAEd,eAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,YAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,QAAQ;AACzG,cAAQ,IAAI;AAAA,QACR,SAAS,SAAS;AAAA,QAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,eAAe,IAAI;AAAA,QACtE,MAAM,EAAE,QAAQ,KAAM;AAAA,QACtB,UAAU;AAAA,UACN,EAAE,MAAM,cAAc,SAAS,MAAM,SAAS,cAAc;AAAA;AAAA,UAC5D,EAAE,MAAM,oBAAoB,SAAS,SAAS,SAAS,eAAe;AAAA,UACtE,EAAE,MAAM,oBAAoB,SAAS,UAAU,SAAS,WAAW;AAAA,UACnE,EAAE,MAAM,cAAc,SAAS,iBAAiB,SAAS,eAAe;AAAA,UACxE,EAAE,MAAM,cAAc,SAAS,kBAAkB,SAAS,eAAe;AAAA,UACzE,EAAE,MAAM,cAAc,SAAS,kBAAkB,SAAS,eAAe;AAAA,QAC7E;AAAA,MACJ,CAAC;AACD,WAAK,4BAA4B;AACjC,SAAG,cAAc,GAAG,QAAQ;AAC5B,YAAM,YAAuB,CAAC;AAC9B,iBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,aAAK,WAAW,MAAM,MAAM,uBAA0B;AAAA,MAC1D;AACA,SAAG,YAAY,GAAG,YAAY,IAAI;AAElC,UAAI,MAAM,SAAS,WAAW,cAAc,SAAS,SAAS;AAE1D,gBAAQ,IAAI;AAAA,UACR,gBAAgB,CAAC,gBAAgB,iBAAiB,IAAI;AAAA,UACtD,OAAO;AAAA,YACH,MAAM;AAAA,YACN,WAAW;AAAA,UACf;AAAA,QACJ,CAAC;AACD,mBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,cAAI,KAAK,gBAAgB,MAAM,YAAY,IAAI,GAAG;AAC9C,iBAAK,0BAA0B,MAAM,IAAI;AAAA,UAC7C;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,SAAS,mCAA4C,MAAM,QAAQ,cAAc;AACjF,gBAAQ,IAAI,EAAE,MAAM,iBAAiB,OAAO,GAAK,SAAS,EAAE,CAAC;AAAA,MACjE;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,WAAW,MAAkB,MAAc,WAAsB,MAAkB;AAC/E,UAAM,EAAE,cAAc,IAAI;AAC1B,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,UAAU,IAAI;AACtB,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,UAAU;AAChB,QAAI,QAAQ,KAAK,UAAU;AACvB,SAAG,eAAe,GAAG,gBAAgB,cAAU,KAAK,QAAQ;AAC5D,iBAAW,QAAQ,KAAK,QAAQ;AAC5B,cAAM,EAAE,aAAa,IAAI;AACzB,cAAM,gBAAgB;AACtB,YAAI,WAAW;AACX;AACJ,WAAG,gBAAgB,UAAU,KAAK,aAAa,KAAK,GAAG;AACvD,cAAM,OAAO,KAAK,sDAA8D,KAAK,WAAW,QAAQ;AACxG,YAAI,UAAU,QAAQ,MAAM;AACxB,oBAAU,OAAO;AACjB,aAAG,WAAW,SAAS,IAAI,EAAE,IAAI,CAAC;AAAA,QACtC;AACA,cAAM,cAAc,KAAK;AACzB,YAAI,UAAU,eAAe,aAAa;AACtC,oBAAU,cAAc;AACxB,cAAI,aAAa;AACb,eAAG,QAAQ,GAAG,SAAS;AAAA,UAC3B,OAAO;AACH,eAAG,OAAO,GAAG,SAAS;AAAA,UAC1B;AAAA,QACJ;AACA,YAAI,yBAA4B,sBAAyB;AACrD,aAAG,YAAY,GAAG,YAAY,KAAK,oBAAoB,UAAU,uBAAuB;AAAA,QAC5F;AACA,YAAI,QAAQ,KAAK,WAAW;AACxB,gBAAM,QAAQ,OAAO,IAAI,KAAK,UAAU;AACxC,wBAAc,qBAAqB,EAAE,KAAK;AAAA,QAC9C,OAAO;AAEH,gBAAM,kBAAkB,mBAAmB,MAAM,IAAI;AACrD,cAAI,iBAAiB;AACjB,kBAAM,QAAQ,OAAO,IAAI,eAAe;AACxC,0BAAc,qBAAqB,EAAE,KAAK;AAAA,UAC9C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,0BAA0B,MAAkB,MAAc;AACtD,UAAM,EAAE,WAAW,eAAe,OAAO,IAAI;AAC7C,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,UAAU,mBAAmB,SAAS,SAAS,IAAI;AAC3D,QAAI,QAAQ,KAAK,UAAU;AACvB,SAAG,eAAe,GAAG,gBAAgB,cAAU,KAAK,QAAQ;AAC5D,iBAAW,QAAQ,KAAK,QAAQ;AAC5B,YAAI,KAAK,gBAAgB,KAAK,WAAW,QAAQ,eAAe,CAAC,KAAK,kBAAkB;AACpF,qBAAW,aAAa,KAAK,YAAY;AACrC,gBAAK,KAAK,UAAU,aAAc,MAAM;AACpC,oBAAM,QAAQ,UAAU,QAAQ;AAChC,oBAAM,QAAQ,UAAU,QAAQ;AAChC,sBAAQ,OAAO,QAAQ,KAAK,OAAO,QAAQ;AAE3C,sBAAQ,IAAI;AAAA,gBACR,SAAS,SAAS;AAAA,gBAClB,mBAAmB,KAAK;AAAA,cAC5B,CAAC;AACD,kCAAoB,IAAI,EAAE,MAAM,UAAU,mBAAmB,eAAe,CAAC,OAAQ,GAAG,OAAO,MAAM,CAAC;AAGtG,sBAAQ,IAAI;AAAA,gBACR,SAAS,SAAS;AAAA,gBAClB,mBAAmB;AAAA,cACvB,CAAC;AACD,oBAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,oBAAoB,MAAM,SAAS,OAAO,GAAG,eAAe,MAAM,CAAC;AACpG,4BAAc,qBAAqB,EAAE,KAAK;AAAA,YAC9C;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,gBAAgB,MAAkB;AAC9B,UAAM,EAAE,cAAc,IAAI;AAC1B,UAAM,EAAE,GAAG,IAAI;AAEf,QAAI,KAAK,qBAAqB,KAAK,UAAU;AACzC,SAAG,eAAe,GAAG,gBAAgB,cAAU,KAAK,YAAY,IAAI;AACpE,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,aAAa,OAAO,IAAI,GAAG,CAAC;AAC7E,oBAAc,qBAAqB,EAAE,KAAK;AAAA,IAC9C;AAAA,EACJ;AAAA,EAEA,cAAc;AACV,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,WAAO,SAAS;AAChB,eAAW,YAAY,OAAO,OAAO,SAAS,GAAG;AAC7C,gBAAU,QAAQ;AAAA,IACtB;AAAA,EACJ;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAC3B,SAAK,YAAY,CAAC;AAAA,EACtB;AAAA,EAEA,MAAc,YAAY,OAAyB;AAC/C,SAAK,iBAAiB;AACtB,UAAM,KAAK,OAAO;AAClB,UAAM,YAAY,MAAM,qBAAqB,MAAM,MAAM,QAAQ,KAAK,cAAc,aAAa;AACjG,QAAI,WAAW;AACX,WAAK,YAAY;AAAA,IACrB;AACA,SAAK,iBAAiB;AACtB,SAAK,cAAc,UAAU;AAAA,EACjC;AACJ;AAEA,SAAS,kBAAkB,OAA2B;AAClD,QAAM,EAAE,MAAM,IAAI;AAClB,MAAI,OAAO;AACP,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,aAAa,IAAI;AACzB,QAAI,cAAc;AAGd,UAASC,UAAT,WAAkB;AAAE,eAAO,IAAI,kBAAkB,YAAY;AAAA,MAAG,GACvDC,QAAT,WAAgB;AAAE,cAAM,IAAI,IAAI,kBAAkB,YAAY;AAAG,UAAE,KAAK,GAAG;AAAG,eAAO;AAAA,MAAG;AAD/E,mBAAAD,SACA,OAAAC;AAHT,YAAM,EAAE,SAAS,QAAQ,IAAI,OAAO;AACpC,cAAQ,OAAO,gBAAgB,GAAG;AAC+B;AACwB;AACzF,YAAM,MAAM,aAAa,QAAQ,KAAK,iBAAiB,KAAKD,QAAO;AACnE,YAAM,QAAQ,aAAa,QAAQ,OAAO,iBAAiB,KAAKA,QAAO;AACvE,YAAM,OAAO,aAAa,QAAQ,MAAM,iBAAiB,KAAKA,QAAO;AACrE,YAAM,QAAQ,aAAa,SAAS,iBAAiB,KAAKC,MAAK;AAC/D,YAAM,UAAU,eAAe,KAAK,OAAO,MAAM,KAAK;AACtD,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AASA,SAAS,sBAAsB,QAAoB,WAAuC;AACtF,QAAM,EAAE,eAAe,OAAO,IAAI;AAClC,WAAS,SAAS,QAA4C,OAAe;AACzE,WAAO,UAAU,SAAS,mBAAmB,UAAU,WAAW,qBAAqB;AAAA,EAC3F;AACA,QAAM,eAAe,SAAS,eAAe,eAAiB;AAC9D,SAAO,KAAK,YAAY;AAExB,MAAI,aAAa;AACjB,aAAW,SAAS,QAAQ;AACxB,UAAM,MAAM,SAAS,MAAM,QAAQ,UAAU;AAC7C,eAAW,YAAY,MAAM,WAAW;AACpC,aAAO,QAAQ,IAAI;AAAA,IACvB;AACA;AAAA,EACJ;AACJ;AAGA,UAAU,aAAa,MAA4D;AAC/E,MAAI,MAAM;AACN,UAAM;AACN,eAAW,SAAS,KAAK,UAAU;AAC/B,aAAO,aAAa,KAAK;AAAA,IAC7B;AAAA,EACJ;AACJ;AAEA,SAAS,sBAAsB,YAAwC;AACnE,QAAM,mBAAmB;AACzB,QAAM,qBAAqB;AAC3B,QAAM,qBAAqB;AAE3B,QAAM,gBAAgB,IAAI,aAAa,mBAAmB,qBAAqB,kBAAkB;AAEjG,WAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AACvC,aAAS,IAAI,GAAG,IAAI,oBAAoB,KAAK;AACzC,qBAAe,mBAAmB,IAAI,KAAK,IAAI,CAAC,IAAI;AAAA,IACxD;AAAA,EACJ;AAEA,WAAS,WAAWC,QAAe,eAA8B;AAC7D,aAAS,MAAM,GAAG,MAAM,oBAAoB,OAAO;AAC/C,eAAS,MAAM,GAAG,MAAM,oBAAoB,OAAO;AAC/C,uBAAe,mBAAmB,MAAMA,UAAS,IAAI,GAAG,IAAI,cAAc,MAAM,MAAM,kBAAkB;AAAA,MAC5G;AAAA,IACJ;AAAA,EACJ;AAGA,QAAM,EAAE,eAAe,OAAO,IAAI;AAClC,aAAW,GAAG,iBAAiB,aAAa,CAAC;AAC7C,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,eAAW,IAAI,GAAG,iBAAiB,OAAO,CAAC,EAAE,MAAM,CAAC;AAAA,EACxD;AACA,SAAO;AACX;AAEA,SAAS,eAAe,GAAsB,GAAsB,GAAsB,GAAsB;AAC5G,QAAM,IAAI,EAAE;AACZ,UAAQ,OAAO,KAAK,EAAE,UAAU,KAAK,EAAE,UAAU,KAAK,EAAE,MAAM;AAC9D,QAAM,OAAO,IAAI,kBAAkB,MAAM,CAAC;AAC1C,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,SAAK,GAAG,IAAI,EAAE,CAAC;AACf,SAAK,GAAG,IAAI,EAAE,CAAC;AACf,SAAK,GAAG,IAAI,EAAE,CAAC;AACf,SAAK,GAAG,IAAI,EAAE,CAAC;AAAA,EACnB;AACA,SAAO;AACX;AAEA,SAAS,cAAc,GAAU,GAAU;AACvC,MAAI,EAAE,UAAU,EAAE,QAAQ;AACtB,WAAO;AAAA,EACX;AACA,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,QAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG;AACd,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;AAEA,IAAM,uBAAsC;AAAA,EACxC;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACZ;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACZ;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACZ;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAChB;AAGA,SAAS,iBAAiB,QAA2D;AACjF,SAAQ,OAAO,UAAU,YAAY,MAAM,QAAQ,MAAM,IAAK,SAAS;AAC3E;;;AC9wBO,IAAM,gBAAN,MAA2C;AAAA,EACrC,OAAO;AAAA,EACP,gBAAgB;AAAA,IACrB,uBAAuB;AAAA,IACvB,aAAa;AAAA,IACb,WAAW;AAAA,IACX,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,sBAAsB;AAAA,IACtB,gBAAgB;AAAA,IAChB,sBAAsB;AAAA,EAC1B;AAAA,EAES,sBAAmD,EAAE,MAAM,cAAc,OAAO,iBAAe,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,KAAK;AAAA,EACtK,gBAAgB;AAAA,EAQzB,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,oBAAoB,SAAS,MAAM,UAAU,SAAS;AAAA,EACrE;AAAA,EAEA,iBAAiB;AACb,WAAO;AAAA,MACH,OAAO,WAAW,KAAK,aAAa;AAAA,IACxC;AAAA,EACJ;AAAA,EAEA,MAAM,gBAAgB,SAAwB,UAAoB;AAC9D,UAAM,MAAM,QAAQ,YAAY,WAAW;AAC3C,UAAM,gBAAgB,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,SAAS,MAAM,OAAO,CAAC;AACjG,UAAM,iBAAiB,IAAI,cAAc,EAAE,oBAAoB,WAAW,qBAAqB,WAAW,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AACpJ,UAAM,0BAA0B,IAAI,cAAc,EAAE,MAAM,cAAc,OAAO,GAAG,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC,EAAE,CAAC;AAC1L,UAAM,kBAAkB,IAAI,cAAc,EAAE,MAAM,cAAc,OAAO,KAAK,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,KAAK,CAAC;AACpJ,UAAM,mBAAmB,IAAI,cAAc,EAAE,MAAM,cAAc,OAAO,KAAK,QAAQ,GAAG,gBAAgB,WAAW,MAAM,SAAS,OAAO,KAAK,CAAC;AAC/I,UAAM,mBAAmB,IAAI,cAAc,KAAK,mBAAmB;AAEnE,UAAM,EAAE,QAAQ,IAAI,QAAQ,cAAc;AAC1C,UAAM,oBAAoB,IAAI,wBAAwB;AACtD,QAAI,UAA8B;AAClC,QAAI,WAA0C;AAC9C,QAAI,SAAS;AACT,gBAAU,IAAI,aAAa,EAAE,MAAM,gBAAgB,UAAU,KAAK,WAAW,IAAI,OAAO,cAAc,CAAC;AACvG,iBAAW,IAAI,kBAAkB;AAAA,QAC7B,YAAY;AAAA,UACR,EAAE,MAAM,cAAc,QAAQ,SAAS,YAAY,IAAI,YAAY,GAAG,eAAe,SAAS,SAAS,EAAE;AAAA;AAAA,UACzG,EAAE,MAAM,SAAS,QAAQ,SAAS,YAAY,IAAI,YAAY,IAAI,eAAe,SAAS,SAAS,EAAE;AAAA;AAAA,UACrG,EAAE,MAAM,gBAAgB,QAAQ,SAAS,YAAY,IAAI,YAAY,IAAI,eAAe,gBAAgB,SAAS,EAAE;AAAA;AAAA,QACvH;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,UAAM,EAAE,iBAAiB,oBAAoB,IAAI;AACjD,UAAM,WAAW,CAAC;AAClB,UAAM,iBAAiB,cAAa,eAAe,SAAS,KAAK,QAAQ;AACzE,UAAM;AAAA;AAAA,MAAuB;AAAA,MAAW;AAAA,MAAM;AAAA,IAAK,IAAI,MAAM,QAAQ,IAAI;AAAA;AAAA;AAAA;AAAA,MAIrE,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,WAAW,qBAAqB,CAAC,UAAU,YAAY,WAAW,MAAM,GAAG,mBAAmB,EAAE,UAAU,CAAC,iBAAiB,WAAW,WAAW,GAAG,YAAY,sBAAsB,EAAE,CAAC;AAAA,MACrO,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,MAAM,qBAAqB,CAAC,UAAU,YAAY,WAAW,MAAM,EAAE,CAAC;AAAA,MACjH,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,OAAO,oBAAoB,CAAC;AAAA,MACvE;AAAA,IACJ,CAAC;AAED,aAAS,YAAY;AACrB,aAAS,OAAO;AAChB,aAAS,QAAQ;AAEjB,WAAO;AAAA,MACH;AAAA,MAAK;AAAA,MACL;AAAA,MAAmB;AAAA,MAAS;AAAA,MAC5B;AAAA,MAAe;AAAA,MAAgB;AAAA,MAAyB;AAAA,MAAiB;AAAA,MAAkB;AAAA,IAC/F;AAAA,EACJ;AAAA,EAQA,OAAO,gBAAgB,eAA8B,MAAkB,MAAkB,eAAe,cAAa,qBAAqB;AACtI,UAAM,EAAE,MAAM,QAAQ,UAAU,IAAI;AACpC,UAAM,QAAkB,CAAC;AACzB,QAAI,QAAQ,cAAc,OAAO,qBAAqB;AAClD,YAAM,KAAK,MAAM;AAAA,IACrB;AACA,QAAI,QAAQ;AACR,YAAM,KAAK,QAAQ;AAAA,IACvB;AACA,QAAI,WAAW;AACX,YAAM,KAAK,WAAW;AAAA,IAC1B;AACA,QAAI,cAAc,OAAO,WAAW;AAChC,YAAM,KAAK,WAAW;AAAA,IAC1B;AACA,UAAM,UAAU;AAAA,MACZ,EAAE,MAAM,QAAQ,OAAO,KAAK,SAAS,EAAE;AAAA,MACvC,EAAE,MAAM,QAAQ,OAAO,KAAK,SAAS,EAAE;AAAA,IAC3C;AACA,WAAO,EAAE,SAAS,MAAM;AAAA,EAC5B;AAAA,EAEA,aAAa,eAAe,SAAwB,KAAkB,UAA6B,eAAe,cAAa,qBAAoC;AAC/J,UAAM,EAAE,iBAAiB,oBAAoB,IAAI;AACjD,UAAM,WAA4B,CAAC;AACnC,eAAW,QAAQ,cAAa,QAAQ;AACpC,YAAM,QAAS,SAAS,IAAI,MAAM,CAAC;AACnC,iBAAW,QAAQ,cAAa,OAAO;AACnC,cAAM,UAAU,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,QAAQ,qBAAqB,iBAAiB,QAAQ,cAAa,gBAAgB,QAAQ,eAAe,MAAM,MAAM,YAAY,EAAE,CAAC;AAChM,cAAM,kBAAkB,QAAQ,KAAK,aAAW;AAC5C,gBAAM,IAAI,IAAI;AAAA,QAClB,CAAC;AACD,iBAAS,KAAK,eAAe;AAAA,MACjC;AAAA,IACJ;AACA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC9B;AAAA,EAES,WAAW,OAAO;AAAA;AAC/B;AAnIO,IAAM,eAAN;AAoBH,cApBS,cAoBO,gBAAe,CAAC,cAAc,eAAe,gBAAgB,aAAa,cAAc,WAAW;AACnH,cArBS,cAqBO,mBAAkB,cAAa,aAAa,IAAI,UAAQ,YAAY,MAAM;AAC1F,cAtBS,cAsBO,uBAAsB,CAAC,UAAU,YAAY,SAAS,MAAM;AAC5E,cAvBS,cAuBO,UAAS,CAAC,eAAkB,cAAiB,WAAc;AAC3E,cAxBS,cAwBO,SAAQ,CAAC,mBAAsB,gBAAmB,eAAkB;AA8DpF,cAtFS,cAsFO,uBAAsB;AAAA,EAClC,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,WAAW;AACf;;;;;;;;;AC/FG,IAAM,gBAAN,MAA4C;AAAA,EACtC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,UAAU;AAAA,IACV,MAAM;AAAA,IACN,gBAAgB;AAAA,EACpB;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,qBAAqB,SAAS,MAAM,UAAU,SAAS;AAAA,EACtE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,MAAM,QAAQ,YAAY,SAAS;AACzC,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,UAAU,cAAc,OAAO,WAAW,CAAC;AACvG,UAAM,UAAU,IAAI,cAAc,EAAE,oBAAoB,WAAW,qBAAqB,WAAW,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AAC7I,UAAM,eAAe,CAAC,SAAS,QAAQ,SAAS;AAChD,UAAM,kBAAkB,aAAa,IAAI,UAAQ,YAAY,MAAM;AACnE,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAAC,iBAAc,gBAAAA,iBAAgB,qBAAqB,CAAC,aAAa,GAAG,gBAAgB,CAAC;AAC3I,WAAO,EAAE,KAAK,UAAU,SAAS,QAAQ;AAAA,EAC7C;AACJ;AAKA,IAAM,uBAAN,MAA0D;AAAA,EAEtD,YAAqB,SAAiC,QAAgC,UAA6B,WAAsB;AAApH;AAAiC;AAAgC;AAA6B;AAAA,EAAwB;AAAA,EAE3I,OAAO,OAA2B;AAC9B,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,SAAS,IAAI,KAAK;AAC1B,UAAM,EAAE,QAAQ,YAAY,IAAI;AAEhC,QAAI,QAAQ,gBAAgB,EAAE,QAAQ,YAAY,CAAC,GAAG;AAClD,YAAM,EAAE,QAAAC,SAAQ,aAAAC,aAAY,IAAI;AAChC,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,aAAO,WAAW,KAAK,IAAI,GAAGA,aAAY,QAAQ;AAClD,aAAO,OAAOA,aAAY;AAC1B,aAAO,iBAAiBD,QAAO;AAC/B,cAAQ,oBAAoB,UAAU,KAAK,QAAQ;AAAA,IACvD;AAAA,EACJ;AAAA,EAEA,SAAS;AACL,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,SAAS,SAAS,IAAI;AACvC,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,SAAS,IAAI,QAAQ;AAE7B,YAAQ,QAAQ,YAAY;AAE5B,YAAQ,IAAI;AAAA,MACR;AAAA,MACA,gBAAgB,CAAC,QAAQ;AAAA,MACzB,UAAU;AAAA,QACN,EAAE,MAAM,cAAc,SAAS,SAAS,OAAO,QAAQ;AAAA,QACvD,EAAE,MAAM,cAAc,SAAS,SAAS,MAAM,QAAQ;AAAA,QACtD,EAAE,MAAM,cAAc,SAAS,SAAS,OAAO,QAAQ;AAAA,MAC3D;AAAA,MACA,aAAa;AAAA,MACb,aAAa,CAAC,MAAM;AAAA,MACpB,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,UAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,YAAQ,qBAAqB,EAAE,KAAK;AAAA,EACxC;AAAA,EAEA,cAAc;AAAA,EACd;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;;;;;;;;;;;;;;;;ACpFO,IAAME,WAAU;AAAA,EACnB,QAAQ;AAAA,IACJ,cAAcC;AAAA,IACd,gBAAgBA;AAAA,EACpB;AAAA,EACA,MAAM;AAAA,IACF,cAAcC;AAAA,IACd,gBAAgBA;AAAA,EACpB;AAAA,EACA,WAAW;AAAA,IACP,cAAcC;AAAA,EAClB;AACJ;;;ACbO,IAAM,aAAN,MAAyC;AAAA,EACnC,OAAO;AAAA,EACP,eAAe;AAAA,IACpB,kBAAkB;AAAA,EACtB;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,kBAAkB,SAAS,MAAM,UAAU,SAAS;AAAA,EACnE;AAAA,EAEA,iBAAiB;AACb,WAAO;AAAA,MACH,MAAM,WAAW,KAAK,YAAY;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,WAAW,eAAe,CAACC,MAAK,MAAM,QAAS,CAAC,GAAGA,MAAK,GAAG,MAAM,GAAG,GAAG,CAAE;AAC/E,UAAM,MAAM,eAAe,CAACA,SAASA,IAAI;AACzC,UAAM,UAAU,cAAc;AAC9B,UAAM,WAAW,IAAI,aAAa,QAAQ,SAAS,CAAC;AACpD,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AACxC,YAAM,CAAC,GAAG,GAAG,CAAC,IAAI,QAAQ,MAAM,GAAG,IAAI,CAAC;AACxC,YAAM,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC;AACvC,YAAM,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC;AACvC,YAAM,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC;AACvC,eAAS,IAAI,IAAI,IAAI,IAAI,CAAC;AAC1B,eAAS,IAAI,IAAI,IAAI,IAAI,CAAC;AAC1B,eAAS,IAAI,IAAI,IAAI,IAAI,CAAC;AAAA,IAC9B;AAEA,UAAM,MAAM,QAAQ,YAAY,MAAM;AACtC,UAAM,WAAW;AAAA,MACb,MAAM,IAAI,aAAa,EAAE,MAAM,kBAAkB,UAAU,cAAc,KAAK,OAAO,WAAW,CAAC;AAAA,IACrG;AACA,UAAM,oBAAoB,IAAI,wBAAwB;AAEtD,UAAM,YAAY,IAAI,aAAa,EAAE,MAAM,gBAAgB,SAAS,SAAS,CAAC;AAC9E,UAAM,YAAY,IAAI,aAAa,EAAE,MAAM,wBAAwB,SAAS,QAAQ,CAAC;AACrF,UAAM,aAAa,IAAI,kBAAkB;AAAA,MACrC,YAAY;AAAA,QACR,EAAE,MAAM,cAAc,QAAQ,WAAW,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,QACvE,EAAE,MAAM,cAAc,QAAQ,WAAW,YAAY,IAAI,YAAY,GAAG;AAAA;AAAA,QACxE,EAAE,MAAM,cAAc,QAAQ,WAAW,YAAY,IAAI,YAAY,GAAG;AAAA;AAAA,MAC5E;AAAA,MACA,SAAS;AAAA,IACb,CAAC;AACD,QAAI,YAAY,YAAY,WAAW,SAAS;AAEhD,UAAM,cAAc,IAAI,aAAa,EAAE,MAAM,gBAAgB,SAAS,SAAS,CAAC;AAChF,UAAM,eAAe,IAAI,kBAAkB;AAAA,MACvC,YAAY;AAAA,QACR,EAAE,MAAM,cAAc,QAAQ,aAAa,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,QACzE,EAAE,MAAM,cAAc,QAAQ,aAAa,YAAY,IAAI,YAAY,GAAG;AAAA;AAAA,QAC1E,EAAE,MAAM,cAAc,QAAQ,aAAa,YAAY,IAAI,YAAY,GAAG;AAAA;AAAA,MAC9E;AAAA,IACJ,CAAC;AACD,QAAI,YAAY,cAAc,WAAW;AAGzC,UAAM,UAAU,IAAI,aAAa,EAAE,MAAM,gBAAgB,UAAU,KAAK,IAAI,GAAG,OAAO,cAAc,CAAC;AACrG,UAAM,aAAa,IAAI,aAAa,EAAE,MAAM,gBAAgB,UAAU,KAAK,GAAG,OAAO,cAAc,CAAC;AACpG,UAAM,WAAW,IAAI,kBAAkB;AAAA,MACnC,YAAY;AAAA;AAAA;AAAA,QAGR,EAAE,MAAM,cAAc,QAAQ,SAAS,YAAY,GAAG,YAAY,GAAG,eAAe,cAAc,SAAS,EAAE;AAAA;AAAA,QAC7G,EAAE,MAAM,SAAS,QAAQ,YAAY,YAAY,GAAG,YAAY,GAAG,eAAe,SAAS,SAAS,EAAE;AAAA;AAAA,MAC1G;AAAA,IACJ,CAAC;AAED,UAAM,sBAAsB,CAAC,UAAU,YAAY,MAAM;AACzD,UAAM,CAAC,OAAO,MAAM,MAAM,SAAS,IAAI,MAAM,QAAQ,IAAI;AAAA,MACrD,QAAQ,iBAAiB,KAAK,EAAE,GAAGC,SAAQ,QAAQ,oBAAoB,CAAC;AAAA,MACxE,QAAQ,iBAAiB,KAAK,EAAE,GAAGA,SAAQ,QAAQ,qBAAqB,QAAQ,EAAE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;AAAA,MACrG,QAAQ,iBAAiB,KAAK,EAAE,GAAGA,SAAQ,MAAM,qBAAqB,CAAC,GAAG,qBAAqB,SAAS,EAAE,CAAC;AAAA,MAC3G,QAAQ,iBAAiB,KAAK,EAAE,GAAGA,SAAQ,WAAW,qBAAqB,CAAC,GAAG,qBAAqB,SAAS,GAAG,mBAAmB,EAAE,UAAU,CAAC,iBAAiB,SAAS,GAAG,YAAY,mBAAmB,EAAE,CAAC;AAAA,IACnN,CAAC;AACD,UAAM,WAAW,EAAE,OAAO,MAAM,MAAM,UAAU;AAChD,WAAO,EAAE,KAAK,UAAU,mBAAmB,YAAY,cAAc,UAAU,SAAS,YAAY,SAAS;AAAA,EACjH;AACJ;AAKA,IAAM,oBAAN,MAAuD;AAAA,EACnD,YAAqB,SAAiC,QAA6B,UAA6B,WAAsB;AAAjH;AAAiC;AAA6B;AAA6B;AAAA,EAAwB;AAAA,EAExI,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,WAAW,SAAS,IAAI;AACzC,UAAM,EAAE,MAAM,sBAAsB,IAAI;AACxC,QAAI,QAAQ,gBAAgB,EAAE,MAAM,sBAAsB,CAAC,GAAG;AAC1D,YAAM,EAAE,OAAAC,QAAO,SAAS,IAAI;AAC5B,YAAM,QAAQ,aAAK,SAAS,aAAK,OAAO,GAAG,UAAU,qBAAqB;AAC1E,YAAM,IAAI;AAAA,QACNA;AAAA,QAAO;AAAA,QAAG;AAAA,QAAG;AAAA,QACb;AAAA,QAAGA;AAAA,QAAO;AAAA,QAAG;AAAA,QACb;AAAA,QAAG;AAAA,QAAGA;AAAA,QAAO;AAAA,QACb,GAAG;AAAA,QAAO;AAAA,MACd;AACA,eAAS,KAAK,OAAO,mBAAmB,aAAK,WAAW,GAAG,CAAC;AAAA,IAChE;AACA,YAAQ,oBAAoB,UAAU,SAAS,MAAM,SAAS,IAAI;AAAA,EACtE;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,UAAU,UAAU,mBAAmB,YAAY,cAAc,UAAU,SAAS,WAAW,IAAI;AAC3G,UAAM,EAAE,IAAI,gBAAgB,kBAAkB,iBAAiB,cAAc,IAAI;AAEjF,QAAI,MAAM,KAAK,SAAS;AAEpB,cAAQ,IAAI;AAAA,QACR,SAAS,SAAS;AAAA,QAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,SAAS,IAAI;AAAA;AAAA,QAEhE,OAAO,EAAE,MAAM,KAAM;AAAA,QACrB,MAAM,EAAE,QAAQ,MAAM;AAAA,QACtB,mBAAmB;AAAA,MACvB,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,YAAY,MAAM,aAAa,WAAW,kBAAkB,OAAO,GAAG,CAAC;AACxG,cAAQ,qBAAqB,EAAE,KAAK;AAEpC,UAAI,MAAM,SAAS,WAAW,cAAc,SAAS,SAAS;AAE1D,gBAAQ,IAAI;AAAA,UACR,SAAS,SAAS;AAAA,UAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,SAAS,MAAM,eAAe;AAAA,UACjF,mBAAmB;AAAA,QACvB,CAAC;AACD,4BAAoB,IAAI,EAAE,MAAM,UAAU,mBAAmB,eAAe,CAAC,SAAS,UAAU,GAAG,OAAO,GAAG,CAAC;AAG9G,gBAAQ,IAAI;AAAA,UACR,SAAS,SAAS;AAAA;AAAA,UAElB,OAAO;AAAA,YACH,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,UAAU;AAAA,YACV,UAAU;AAAA,UACd;AAAA,UACA,OAAO,EAAE,MAAM,MAAO;AAAA,UACtB,mBAAmB;AAAA,QACvB,CAAC;AAED,cAAMC,SAAQ,OAAO,IAAI,EAAE,MAAM,oBAAoB,MAAM,SAAS,OAAO,GAAG,eAAe,GAAG,CAAC;AACjG,gBAAQ,qBAAqB,EAAEA,MAAK;AAAA,MACxC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,KAAK,OAA2B;AAC5B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,UAAU,UAAU,WAAW,IAAI;AAC3C,UAAM,EAAE,IAAI,gBAAgB,iBAAiB,IAAI;AAEjD,QAAI,MAAM,KAAK,SAAS;AACpB,cAAQ,IAAI;AAAA,QACR,SAAS,SAAS;AAAA,QAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,SAAS,IAAI;AAAA,QAChE,OAAO,EAAE,MAAM,KAAM;AAAA,QACrB,MAAM,EAAE,QAAQ,MAAM;AAAA,QACtB,mBAAmB;AAAA,MACvB,CAAC;AACD,aAAO,IAAI,EAAE,MAAM,YAAY,MAAM,aAAa,WAAW,kBAAkB,OAAO,GAAG,CAAC;AAAA,IAE9F;AAAA,EACJ;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;AAEA,SAAS,eAAe,MAA+F;AACnH,WAAS,KAAK,GAAiB,GAAiB,OAAqB;AACjE,UAAM,SAAS,aAAK,MAAM,aAAK,OAAO,GAAG,GAAG,CAAC;AAC7C,aAAS,KAAK,IAAmB,IAAmB;AAChD,YAAM,MAAM,aAAK,MAAM,MAAM;AAC7B,mBAAK,EAAE,EAAE,KAAK,KAAK,CAAC;AACpB,mBAAK,EAAE,EAAE,KAAK,KAAK,CAAC;AACpB,aAAO,KAAK,KAAK,QAAQ,KAAK;AAAA,IAElC;AACA,WAAO;AAAA,MACH,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,IACxB;AAAA,EACJ;AAEA,SAAO,IAAI,aAAa;AAAA,IACpB,GAAG,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACxC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACxC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,EAC5C,CAAC;AACL;AAEA,SAAS,gBAAgB;AACrB,MAAI,YAAY;AAChB,WAAS,OAAO;AACZ,UAAM,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,OAAK,IAAI,SAAS;AACrD,iBAAa;AACb,WAAO;AAAA,EACX;AACA,SAAO,IAAI,YAAY;AAAA,IACnB,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,EACZ,CAAC;AACL;;;;;;;;;AClOO,IAAM,iBAAN,MAA6C;AAAA,EACvC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,EAChB;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,sBAAsB,SAAS,MAAM,UAAU,SAAS;AAAA,EACvE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,MAAM,QAAQ,YAAY,UAAU;AAC1C,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,UAAU,cAAc,OAAO,WAAW,CAAC;AACvG,UAAM,sBAAsB,CAAC,UAAU,YAAY,QAAQ;AAC3D,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAAC,iBAAc,gBAAAA,iBAAgB,oBAAoB,CAAC;AACzG,WAAO,EAAE,KAAK,UAAU,QAAQ;AAAA,EACpC;AACJ;AAKA,IAAM,wBAAN,MAA2D;AAAA,EACvD,YAAqB,SAAiC,QAAiC,UAA6B,WAAsB;AAArH;AAAiC;AAAiC;AAA6B;AAAA,EAAwB;AAAA,EAE5I,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,IAAI;AACrB,QAAI,QAAQ,gBAAgB,EAAE,SAAS,CAAC,GAAG;AACvC,YAAM,EAAE,OAAO,IAAI;AACnB,YAAM,SAAS,KAAK,SAAS;AAC7B,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,cAAM,EAAE,MAAM,IAAI,OAAO,CAAC;AAC1B,cAAM,MAAM;AACZ,eAAO,UAAU,KAAc,IAAI,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MAC3D;AAAA,IACJ;AACA,YAAQ,oBAAoB,UAAU,UAAU,KAAK,QAAQ;AAAA,EACjE;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,UAAM,EAAE,IAAI,gBAAgB,iBAAiB,IAAI;AACjD,UAAM,EAAE,SAAS,IAAI;AAErB,QAAI,SAAS,MAAM;AACf,cAAQ,IAAI;AAAA,QACR;AAAA,QACA,gBAAgB,CAAC,gBAAgB,kBAAkB,QAAQ;AAAA,QAC3D,aAAa,QAAQ,YAAY;AAAA,QACjC,OAAO;AAAA,UACH,MAAM;AAAA;AAAA,QAEV;AAAA,QACA,OAAO;AAAA,UACH,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACd;AAAA,MACJ,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,cAAQ,qBAAqB,EAAE,KAAK;AAAA,IACxC;AAAA,EACJ;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;;;;;;;;;;;;;;ACrFO,IAAM,mBAAN,MAA8C;AAAA,EACxC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,iBAAiB;AAAA,IACjB,OAAO;AAAA,EACX;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,uBAAuB,SAAS,MAAM,UAAU,SAAS;AAAA,EACxE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,MAAM,QAAQ,YAAY,WAAW;AAC3C,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,cAAc,OAAO,CAAC;AAC3F,UAAM,EAAE,UAAU,QAAQ,IAAI,iBAAgB,SAAS;AACvD,UAAM,KAAK,IAAI,aAAa,EAAE,MAAM,gBAAgB,SAAS,SAAS,CAAC;AACvE,UAAM,KAAK,IAAI,aAAa,EAAE,MAAM,wBAAwB,SAAS,QAAQ,CAAC;AAC9E,UAAM,MAAM,IAAI,kBAAkB;AAAA,MAC9B,YAAY;AAAA,QACR,EAAE,MAAM,cAAc,QAAQ,IAAI,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,MACpE;AAAA,MACA,SAAS;AAAA,IACb,CAAC;AACD,QAAI,YAAY,KAAK,IAAI,EAAE;AAC3B,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAAC,iBAAc,gBAAAA,kBAAgB,qBAAqB,CAAC,WAAW,EAAE,CAAC;AACxH,WAAO,EAAE,KAAK,UAAU,KAAK,QAAQ;AAAA,EACzC;AAAA;AAAA,EAQA,OAAO,WAAW;AACd,UAAM,WAAW,IAAI,aAAa,aAAW,QAAQ,GAAG,iBAAgB,oBAAoB,CAAC,EAAE,MAAM;AACrG,UAAM,UAAU,IAAI,YAAY,aAAW,QAAQ,iBAAgB,mBAAmB,iBAAgB,UAAU,EAAE,MAAM;AACxH,WAAO,EAAE,UAAU,QAAQ;AAAA,EAC/B;AACJ;AA7CO,IAAM,kBAAN;AAAA;AAmCH,cAnCS,iBAmCO,qBAAoB;AACpC,cApCS,iBAoCO,oBAAmB;AACnC,cArCS,iBAqCO,cAAa,iBAAK,mBAAmB;AAazD,IAAM,yBAAN,MAA4D;AAAA,EACxD,YAAqB,SAAiC,QAAkC,UAA6B,WAAsB;AAAtH;AAAiC;AAAkC;AAA6B;AAAA,EAAwB;AAAA,EAE7I,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,OAAO,IAAI;AAAO;AAC1B,QAAI,QAAQ,gBAAgB,EAAE,OAAO,CAAC,GAAG;AACrC,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,YAAM,UAAU;AAChB,YAAM,OAAO;AACb,YAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,YAAM,IAAI,qBAAqB;AAC/B,YAAM,IAAI,wBAAwB;AAClC,YAAM,IAAI;AACV,YAAM,IAAI,KAAK,MAAM,GAAG,CAAC;AACzB,YAAM,OAAO,KAAK,MAAM,OAAO,MAAM,IAAI;AACzC,YAAM,KAAK,IAAI,OAAO,IAAI;AAC1B,YAAM,KAAK,IAAI,OAAO,IAAI;AAC1B,YAAM,KAAK,OAAO,IAAI,IAAI,MAAM;AAChC,YAAM,IAAI;AAAA,QACN;AAAA,QAAI;AAAA,QAAG;AAAA,QAAG;AAAA,QACV;AAAA,QAAG;AAAA,QAAI;AAAA,QAAG;AAAA,QACV;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QACV,IAAK,UAAW;AAAA,QAAI,KAAM,UAAW;AAAA,QAAI,KAAK;AAAA,QAAK;AAAA,MACvD;AACA,aAAO,kBAAkB;AACzB,aAAO,QAAQ,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AACjD,cAAQ,oBAAoB,UAAU,UAAU,KAAK,QAAQ;AAAA,IACjE;AAAA,EACJ;AAAA,EAEA,SAAS;AACL,UAAM,EAAE,SAAS,WAAW,OAAO,IAAI;AACvC,UAAM,EAAE,SAAS,UAAU,IAAK,IAAI;AACpC,UAAM,EAAE,GAAG,IAAI;AAEf,YAAQ,IAAI;AAAA,MACR;AAAA,MACA,gBAAgB,CAAC,QAAQ;AAAA,MACzB,OAAO,EAAE,WAAW,MAAO;AAAA,MAC3B,MAAM,EAAE,QAAQ,KAAK;AAAA,MACrB,mBAAmB;AAAA,MACnB,OAAO;AAAA,QACH,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,MACd;AAAA,IACJ,CAAC;AACD,UAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,YAAY,MAAM,aAAa,WAAW,kBAAkB,OAAO,gBAAgB,WAAW,CAAC;AAChI,YAAQ,qBAAqB,EAAE,KAAK;AAAA,EACxC;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GO,IAAM,gBAAN,MAA4C;AAAA,EACtC,OAAO;AAAA,EACP,mBAAmB;AAAA,IACxB,WAAW;AAAA,EACf;AAAA,EAES,mBAAmB;AAAA,IACxB,iBAAiB;AAAA,EACrB;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,YAAY,MAAM,KAAK,gBAAgB,OAAO;AACpD,WAAO,IAAI,qBAAqB,SAAS,MAAM,SAAS;AAAA,EAC5D;AAAA,EAEA,MAAM,gBAAgB,SAAwB;AAC1C,UAAM,MAAM,QAAQ,YAAY,SAAS;AACzC,UAAM,iBAAiB,IAAI,cAAc,EAAE,qBAAqB,UAAU,oBAAoB,wBAAwB,MAAM,CAAC,UAAU,QAAQ,EAAE,CAAC;AAClJ,UAAM,iBAAiB,IAAI,cAAc,EAAE,MAAM,cAAc,OAAO,GAAG,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,IAAI,WAAW,CAAC,EAAE,CAAC;AAC9J,UAAM,sBAAsB,CAAC,UAAU,YAAY,QAAQ;AAC3D,UAAM,eAAe,CAAC,WAAW,eAAe,gBAAgB,cAAc,sBAAsB,UAAU,YAAY,WAAW;AACrI,UAAM,kBAAkB,aAAa,IAAI,UAAQ,YAAY,MAAM;AACnE,UAAM,CAAC,OAAO,GAAG,IAAI,MAAM,QAAQ,IAAI;AAAA,MACnC,QAAQ,iBAAiB,KAAK,EAAE,cAAAC,kBAAc,gBAAAA,kBAAgB,qBAAqB,gBAAgB,CAAC;AAAA,MACpG,QAAQ,iBAAiB,KAAK,EAAE,cAAAA,kBAAc,gBAAAA,kBAAgB,qBAAqB,iBAAiB,QAAQ,EAAE,OAAO,CAAC,wBAAwB,EAAE,EAAE,CAAC;AAAA,IACvJ,CAAC;AACD,UAAM,WAAW,EAAE,OAAO,IAAI;AAC9B,WAAO,EAAE,KAAK,gBAAgB,gBAAgB,SAAS;AAAA,EAC3D;AACJ;AAIA,IAAM,uBAAN,MAA0D;AAAA,EAStD,YAAqB,SAAiC,QAAgC,WAAsB;AAAvF;AAAiC;AAAgC;AAClF,SAAK,cAAc,QAAQ;AAAA,EAC/B;AAAA,EAVA;AAAA,EACS,UAAU,oBAAI,IAA+B;AAAA,EAC7C,aAAa,oBAAI,IAA+C;AAAA,EAChE,UAAU,oBAAI,IAA2C;AAAA,EACzD,YAAY,oBAAI,IAA+C;AAAA,EAC/D,SAAS,oBAAI,IAA2C;AAAA,EACxD,WAAW,oBAAI,IAA6C;AAAA,EAMrE,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,KAAK,gBAAgB,gBAAgB,SAAS,IAAI;AAC1D,UAAM,EAAE,SAAS,sBAAsB,IAAI;AAC3C,QAAI,QAAQ,gBAAgB,EAAE,QAAQ,CAAC,GAAG;AAGtC,gBAAU,YAAY,UAAsC;AACxD,cAAM,EAAE,iBAAiB,IAAI;AAC7B,YAAI;AACA,gBAAM,iBAAiB;AAC3B,YAAI,SAAS,QAAQ,OAAO;AACxB,gBAAM,EAAE,iBAAiB,0BAA0B,eAAe,iBAAiB,IAAI;AACvF,cAAI;AACA,kBAAM,gBAAgB;AAC1B,cAAI;AACA,kBAAM,yBAAyB;AACnC,cAAI;AACA,kBAAM,cAAc;AACxB,cAAI;AACA,kBAAM,iBAAiB;AAAA,QAC/B;AAAA,MACJ;AACA,YAAM,aAAa,CAAC,GAAG,IAAI,IAAqC,QAAQ,QAAQ,QAAQ,OAAK,EAAE,KAAK,UAAU,CAAC,CAAC;AAChH,YAAM,aAAa,CAAC,GAAG,IAAI,IAAgC,WAAW,IAAI,OAAK,EAAE,QAAQ,CAAC,CAAC;AAC3F,YAAM,YAAY,CAAC,GAAG,IAAI,IAAgC,WAAW,IAAI,OAAK,EAAE,QAAQ,CAAC,CAAC;AAC1F,YAAM,WAAW,CAAC,GAAG,IAAI,IAA+B,UAAU,QAAQ,OAAK,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AACpG,YAAM,SAAS,CAAC,GAAG,IAAI,IAA6B,SAAS,IAAI,OAAK,EAAE,KAAK,CAAC,CAAC;AAC/E,YAAM,WAAW,CAAC,GAAG,IAAI,IAA+B,SAAS,IAAI,OAAK,EAAE,OAAQ,EAAE,OAAO,OAAK,CAAC,CAAC,CAAC;AACrG,YAAM,UAAU,CAAC,GAAG,IAAI,IAA8B,QAAQ,QAAQ,IAAI,OAAK,CAAC,CAAC,CAAC;AAClF,YAAM,gBAAgB,IAAI,IAAkB,WAAW,QAAQ,OAAK,CAAC,GAAG,OAAO,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,MAAyC,EAAE,MAAM,EAAE,OAAO,OAAK,CAAC,CAAC,CAAC,CAAC;AAC5K,YAAM,eAAe,IAAI,IAAkB,WAAW,IAAI,OAAK,OAAO,EAAE,WAAW,WAAW,SAAY,EAAE,OAAO,EAAE,OAAO,OAAK,CAAC,CAAmB;AACrJ,YAAM,mBAAmB,cAAc;AACvC,YAAM,UAAU,CAAC,GAAG,eAAe,GAAG,YAAY;AAClD,iBAAW,KAAK,SAAS,KAAK,SAAS,CAAC,MAAM,QAAQ,IAAI,YAAY,KAAK,MAAM,mBAAmB,iBAAiB,wBAAwB,IAAI,CAAC;AAClJ,iBAAW,KAAK,QAAQ,KAAK,QAAQ,UAAQ,IAAI,aAAa,KAAK,IAAI,CAAC;AACxE,iBAAW,KAAK,UAAU,KAAK,UAAU,UAAQ,IAAI,aAAa,KAAK,IAAI,CAAC;AAC5E,iBAAW,KAAK,YAAY,KAAK,YAAY,UAAQ,IAAI,cAAc,KAAK,MAAM,KAAK,OAAO,CAAC;AAC/F,iBAAW,KAAK,SAAS,KAAK,SAAS,UAAQ,IAAI,YAAY,KAAK,SAAS,MAAM,KAAK,CAAC;AACzF,iBAAW,KAAK,WAAW,KAAK,WAAW,UAAQ,IAAI,cAAc,KAAK,SAAS,MAAM,KAAK,QAAQ,KAAK,UAAU,gBAAgB,gBAAgB,SAAS,KAAK,IAAI,CAAC,CAAC;AAAA,IAC7K;AACA,QAAI,QAAQ,gBAAgB,EAAE,sBAAsB,CAAC,GAAG;AACpD,iBAAW,YAAY,KAAK,QAAQ,OAAO,GAAG;AAC1C,iBAAS,OAAO,SAAS,KAAK;AAAA,MAClC;AAAA,IACJ;AACA,QAAI,QAAQ,eAAe,KAAK,aAAa;AACzC,WAAK,cAAc,QAAQ;AAC3B,iBAAW,YAAY,KAAK,UAAU,OAAO,GAAG;AAC5C,iBAAS,OAAO,SAAS,cAAc;AAAA,MAC3C;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,IAAI,eAAe,IAAI;AAE/B,YAAQ,IAAI;AAAA,MACR,gBAAgB,CAAC,cAAc;AAAA,MAC/B,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,UAAM,EAAE,SAAS,YAAY,UAAU,IAAI;AAC3C,UAAM,SAAiH,CAAC;AACxH,QAAI,gBAAgB;AACpB,UAAM,QAAQ,QAAQ,QAAS,OAAK;AAAE,uBAAiB,EAAE,KAAK,WAAW;AAAA,IAAO,CAAE;AAClF,QAAI,iBAAiB,WAAW,MAAM;AAClC;AAAA,IACJ;AACA,eAAW,OAAO,MAAM,QAAQ,SAAS;AACrC,YAAM,WAAW,QAAQ,IAAI,GAAG;AAChC,iBAAW,aAAa,IAAI,KAAK,YAAY;AACzC,cAAM,WAAW,WAAW,IAAI,UAAU,QAAQ;AAClD,cAAM,WAAW,UAAU,IAAI,UAAU,QAAQ;AACjD,eAAO,KAAK,EAAE,UAAU,UAAU,QAAQ,SAAS,CAAC;AAAA,MACxD;AAAA,IACJ;AAEA,WAAO,KAAK,CAAC,GAAG,MAAM;AAClB,UAAI,OAAO,EAAE,SAAS,QAAQ,EAAE,SAAS;AACzC,UAAI,QAAQ,GAAG;AACX,eAAO,EAAE,OAAO,QAAQ,EAAE,OAAO;AAAA,MACrC;AACA,aAAO;AAAA,IACX,CAAC;AAGD,OAAG,eAAe,GAAG,GAAG,GAAG,GAAG,CAAC;AAE/B,QAAI,kBAAiC;AACrC,QAAI,gBAA6B;AAEjC,eAAW,EAAE,UAAU,QAAQ,SAAS,KAAK,QAAQ;AAEjD,UAAI,mBAAmB,UAAU;AAC7B,0BAAkB;AAClB,WAAG,eAAe,GAAG,gBAAgB,GAAG,SAAS,cAAc;AAC/D,gBAAQ,IAAI,gBAAgB,WAAW;AAAA,MAC3C;AACA,UAAI,iBAAiB,QAAQ;AACzB,wBAAgB;AAChB,WAAG,eAAe,GAAG,gBAAgB,GAAG,OAAO,cAAc;AAAA,MACjE;AACA,SAAG,gBAAgB,SAAS,UAAU,GAAG;AAEzC,SAAG,WAAW,GAAG,cAAc,OAAO,eAAe;AACrD,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,cAAM,SAAS,IAAI;AACnB,WAAG,oBAAoB,QAAQ,GAAG,GAAG,OAAO,OAAO,IAAI,IAAI,IAAI,EAAE;AACjE,WAAG,oBAAoB,QAAQ,CAAC;AAChC,WAAG,wBAAwB,MAAM;AAAA,MACrC;AACA,SAAG,WAAW,GAAG,cAAc,IAAI;AACnC,YAAM,OAAO,GAAG,SAAS,WAAW;AACpC,YAAM,SAAS,EAAE,GAAG,SAAS,YAAY,MAAM,eAAe,OAAO,aAAa;AAClF,YAAM,QAAQ,OAAO,IAAI,MAAM;AAC/B,SAAG,gBAAgB,IAAI;AACvB,cAAQ,qBAAqB,EAAE,KAAK;AAAA,IACxC;AAEA,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAM,SAAS,IAAI;AACnB,SAAG,yBAAyB,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,KAAK,OAA2B;AAC5B,SAAK,OAAO,KAAK;AAAA,EACrB;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,UAAM,EAAE,WAAW,SAAS,YAAY,WAAW,QAAQ,IAAI;AAC/D,UAAM,EAAE,KAAK,UAAU,gBAAgB,eAAe,IAAI;AAC1D,SAAK,YAAY;AACjB,UAAM,SAAS,CAAC,GAAG,QAAQ,OAAO,GAAG,GAAG,WAAW,OAAO,GAAG,GAAG,UAAU,OAAO,GAAG,GAAG,QAAQ,OAAO,CAAC;AACvG,eAAW,SAAS,QAAQ;AACxB,YAAM,QAAQ,GAAG;AAAA,IACrB;AACA,QAAI,OAAO,SAAS,OAAO,SAAS,KAAK,gBAAgB,cAAc;AACvE,YAAQ,OAAO,IAAI,QAAQ,CAAC;AAC5B,QAAI,QAAQ;AACZ,YAAQ,MAAM;AACd,eAAW,MAAM;AACjB,cAAU,MAAM;AAChB,YAAQ,MAAM;AAAA,EAClB;AACJ;AAEA,SAAS,WAA8E,KAAkB,iBAA+B,KAAkBC,SAA6C;AAEnM,QAAM,eAAe,IAAI,IAAY,GAAG;AACxC,aAAW,YAAY,iBAAiB;AACpC,iBAAa,OAAO,QAAQ;AAAA,EAChC;AACA,aAAW,CAAC,UAAU,KAAK,KAAK,cAAc;AAC1C,QAAI,OAAO,QAAQ;AACnB,UAAM,QAAQ,GAAG;AAAA,EACrB;AAGA,MAAI,MAAM;AACV,aAAW,YAAY,iBAAiB;AACpC,QAAI,QAAQ,IAAI,IAAI,QAAQ;AAC5B,QAAI,CAAC,OAAO;AACR,cAAQA,QAAO,UAAU,GAAG;AAC5B,UAAI,IAAI,UAAU,KAAK;AAAA,IAC3B;AACA,UAAM,QAAQ;AAAA,EAClB;AACJ;AAEA,IAAM,cAAN,MAAkB;AAAA,EACd,QAAQ;AAAA,EACC;AAAA,EAET,YAAY,KAAkB,MAA+C,SAAuB;AAChG,SAAK,SAAS,IAAI,aAAa,EAAE,MAAM,QAAQ,CAAC;AAAA,EACpD;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,MAAM;AAAA,EAC1B;AACJ;AAeA,IAAM,gBAAN,MAAoB;AAAA,EAChB,QAAQ;AAAA,EACC;AAAA,EACA;AAAA,EAET,YAAY,KAAkB,MAAkC,SAAyC;AACrG,UAAM,iBAAiB,OAAO,KAAK,WAAW;AAC9C,UAAM,YAAY,CAAC,iBAAiB,SAAY,KAAK,mBAAmB,cAAc,iBAAiB,KAAK,mBAAmB,cAAc,mBAAmB;AAChK,UAAM,OAAO,KAAK;AAClB,UAAM,QAAQ,iBAAiB,KAAK,QAAQ,SAAS,KAAK;AAC1D,SAAK,aAAa,EAAE,MAAM,iBAAiB,aAAa,UAAU,MAAM,OAAO,UAAqB;AACpG,UAAM,EAAE,UAAU,QAAQ,SAAS,QAAQ,WAAW,UAAU,IAAI,KAAK;AACzE,aAAS,SAAS,GAAkD;AAChE,UAAI,CAAC;AACD,eAAO;AACX,YAAM,EAAE,OAAO,IAAI,QAAQ,IAAI,EAAE,MAAM;AACvC,aAAO,EAAE,GAAG,GAAG,OAAO;AAAA,IAC1B;AACA,UAAM,UAAU,OAAO,KAAK,WAAW,WAAW,SAAY,IAAI,aAAa,EAAE,MAAM,wBAAwB,SAAS,KAAK,QAAQ,CAAC;AACtI,UAAM,SAA4B;AAAA,MAC9B,YAAY;AAAA,QACR,SAAS,QAAQ;AAAA,QACjB,SAAS,MAAM;AAAA,QACf,SAAS,OAAO;AAAA,QAChB,SAAS,MAAM;AAAA,QACf,SAAS,SAAS;AAAA,QAClB,SAAS,SAAS;AAAA,MACtB;AAAA,MACA;AAAA,IACJ;AACA,UAAM,MAAM,IAAI,kBAAkB,MAAM;AACxC,QAAI,SAAS;AACT,UAAI,YAAY,KAAK,OAAO;AAAA,IAChC;AACA,SAAK,YAAY,EAAE,IAAI;AAAA,EAC3B;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,UAAU,GAAG;AAAA,EACjC;AACJ;AAEA,IAAM,cAAN,MAAkB;AAAA,EAQd,YAAY,KAAkB,SAAiC,MAAgC,OAA2B;AAA3D;AAC3D,UAAM,eAAe;AAAA,MACjB,kBAAkB;AAAA,MAClB,cAAc;AAAA,IAClB;AACA,SAAK,WAAW,WAAW,YAAY;AACvC,UAAM,EAAE,OAAO,IAAI,KAAK;AACxB,WAAO,eAAe,KAAK,gBAAgB;AAC3C,SAAK,iBAAiB,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,KAAK,SAAS,OAAO,CAAC;AAChG,UAAM,EAAE,UAAU,IAAI;AACtB,SAAK,eAAe,UAAU;AAC9B,SAAK,kBAAkB,YAAY,sBAAsB,KAAK,WAAW,MAAM,qBAAqB;AACpG,SAAK,OAAO,SAAS,KAAK;AAAA,EAC9B;AAAA,EApBA,QAAQ;AAAA,EACS;AAAA,EAER;AAAA,EACA;AAAA,EACA;AAAA,EAiBT,OAAO,sBAAsB,KAAkB,WAAkD,uBAAqC;AAClI,UAAM,UAAU,YAAY,wBAAwB,WAAW,qBAAqB;AACpF,WAAO,IAAI,aAAa,EAAE,MAAM,gBAAgB,QAAQ,CAAC;AAAA,EAC7D;AAAA,EAEA,OAAO,wBAAwB,WAAkD,uBAAqC;AAClH,UAAM,UAAU,IAAI,aAAa,UAAU,SAAS,EAAE;AACtD,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAM,EAAE,UAAU,SAAS,IAAI,UAAU,CAAC;AAC1C,YAAM,gBAAgB,aAAK,IAAI,aAAK,OAAO,GAAG,UAAU,qBAAqB;AAC7E,YAAM,YAAY,WAAW,aAAK,wBAAwB,aAAK,OAAO,GAAG,UAAU,aAAa,IAAI,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAa;AACrJ,YAAM,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,IAAI;AACzF,YAAM,WAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAC5E,cAAQ,IAAI,UAAU,IAAI,SAAS,MAAM;AAAA,IAE7C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,SAAwB,OAA2B;AACtD,UAAM,EAAE,UAAU,gBAAgB,MAAM,gBAAgB,IAAI;AAC5D,UAAM,EAAE,sBAAsB,IAAI;AAClC,UAAM,EAAE,OAAO,IAAI;AACnB,WAAO,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAK,OAAO,aAAK,OAAO,GAAG,MAAM,qBAAqB,CAAC;AAErH,QAAI,QAAQ,gBAAgB,EAAE,sBAAsB,CAAC,GAAG;AACpD,YAAM,UAAU,YAAY,wBAAwB,KAAK,WAAW,qBAAqB;AACzF,qBAAe,QAAQ,IAAI,EAAE,MAAM,gBAAgB,SAAS,cAAc,gBAAgB,CAAC;AAAA,IAC/F;AAEA,YAAQ,oBAAoB,gBAAgB,QAAQ;AAAA,EACxD;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,cAAc;AAAA,EAClC;AACJ;AAIA,IAAM,gBAAN,MAAoB;AAAA,EAChB,QAAQ;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW,CAAC;AAAA,EACZ,WAAW,CAAC;AAAA,EAErB,YACI,KACA,SACA,MACA,UACA,UACA,gBACA,eACA,SACF;AACE,SAAK,OAAO,KAAK;AACjB,UAAM,QAAQ;AAAA,MACV,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACd;AACA,SAAK,cAAc;AAAA,MACf;AAAA,MACA,MAAM,EAAE,QAAQ,KAAK,cAAc,QAAQ,KAAK;AAAA,MAChD,OAAQ,KAAK,aAAa,UAAU,QAAQ;AAAA;AAAA,IAEhD;AACA,UAAM,eAAe;AAAA,MACjB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,mBAAmB;AAAA,MACnB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,wBAAwB;AAAA,MACxB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACtB;AACA,UAAM,gBAAgB,KAAK,WAAW,WAAW,YAAY;AAC7D,QAAI,MAAM,KAAK;AACf,QAAI,OAAO,KAAK;AAChB,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,iBAAiB,IAAI;AAC7B,WAAO,kBAAkB,KAAK,mBAAmB,CAAC,GAAG,GAAG,GAAG,CAAC;AAC5D,WAAO,iBAAiB,KAAK,mBAAmB,KAAK,iBAAiB,YAAY,IAAI;AACtF,WAAO,cAAc,KAAK,eAAe,KAAK,aAAa,SAAS,MAAK;AACzE,WAAO,mBAAmB,QAAQ,YAAY;AAC9C,QAAI,kBAAkB;AAClB,UAAI,YAAY,SAAS,IAAI,iBAAiB,QAAQ,KAAK,EAAG;AAC9D,WAAK,YAAY,SAAS,IAAI,iBAAiB,QAAQ,OAAQ,GAAG,WAAW;AAAA,IACjF;AACA,QAAI,KAAK,QAAQ,OAAO;AACpB,YAAM,EAAE,iBAAiB,gBAAgB,gBAAgB,iBAAiB,eAAe,kBAAkB,yBAAyB,IAAI;AACxI,aAAO,kBAAkB,mBAAmB;AAC5C,aAAO,iBAAiB,kBAAkB;AAC1C,aAAO,iBAAiB,kBAAkB,CAAC,GAAG,GAAG,CAAC;AAClD,aAAO,yBAAyB,2BAA2B,yBAAyB,YAAY,IAAI;AACpG,aAAO,cAAc,gBAAgB,cAAc,YAAY,IAAI;AACnE,aAAO,cAAc,eAAe,SAAS;AAC7C,aAAO,iBAAiB,mBAAmB,iBAAiB,YAAY,IAAI;AAC5E,aAAO,oBAAoB,kBAAkB,YAAY;AACzD,aAAO,gBAAgB,kBAAkB,gBAAgB,YAAY,IAAI;AACzE,UAAI,iBAAiB;AACjB,YAAI,WAAW,SAAS,IAAI,gBAAgB,QAAQ,KAAK,EAAG;AAC5D,aAAK,WAAW,SAAS,IAAI,gBAAgB,QAAQ,OAAQ,GAAG,WAAW;AAAA,MAC/E;AACA,UAAI,eAAe;AACf,YAAI,SAAS,SAAS,IAAI,cAAc,QAAQ,KAAK,EAAG;AACxD,aAAK,SAAS,SAAS,IAAI,cAAc,QAAQ,OAAQ,GAAG,WAAW;AAAA,MAC3E;AACA,UAAI,kBAAkB;AAClB,YAAI,YAAY,SAAS,IAAI,iBAAiB,QAAQ,KAAK,EAAG;AAC9D,aAAK,YAAY,SAAS,IAAI,iBAAiB,QAAQ,OAAQ,GAAG,WAAW;AAAA,MACjF;AACA,UAAI,0BAA0B;AAC1B,YAAI,oBAAoB,SAAS,IAAI,yBAAyB,QAAQ,KAAK,EAAG;AAC9E,aAAK,oBAAoB,SAAS,IAAI,yBAAyB,QAAQ,OAAQ,GAAG,WAAW;AAAA,MACjG;AAAA,IACJ,OAAO;AACH,aAAO,kBAAkB;AACzB,aAAO,iBAAiB;AACxB,aAAO,iBAAiB,CAAC,GAAG,GAAG,CAAC;AAChC,aAAO,yBAAyB;AAChC,aAAO,cAAc;AACrB,aAAO,cAAc;AACrB,aAAO,iBAAiB;AACxB,aAAO,oBAAoB;AAC3B,aAAO,gBAAgB;AAAA,IAC3B;AACA,SAAK,iBAAiB,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,cAAc,OAAO,CAAC;AAChG,SAAK,OAAO,SAAS,cAAc;AAAA,EACvC;AAAA,EAEA,OAAO,SAAwB,gBAA8B;AACzD,UAAM,EAAE,aAAa,SAAS,eAAe,WAAW,IAAI;AAC5D,UAAM,EAAE,UAAU,gBAAgB,UAAU,SAAS,IAAI;AACzD,UAAM,EAAE,SAAS,UAAU,WAAW,IAAI;AAE1C,UAAM,eAAe,KAAK;AAC1B,iBAAa,WAAW;AAAA,MACpB,EAAE,MAAM,cAAc,SAAS,SAAS,SAAS,cAAc;AAAA,MAC/D,EAAE,MAAM,oBAAoB,SAAS,SAAS,SAAS,cAAc;AAAA,MACrE,EAAE,MAAM,oBAAoB,SAAS,UAAU,SAAS,WAAW;AAAA,MACnE,EAAE,MAAM,cAAc,SAAS,SAAS,aAAa,gBAAgB,SAAS,SAAS,aAAa,KAAK;AAAA,MACzG,EAAE,MAAM,cAAc,SAAS,SAAS,qBAAqB,gBAAgB,SAAS,SAAS,qBAAqB,KAAK;AAAA,MACzH,EAAE,MAAM,cAAc,SAAS,SAAS,UAAU,gBAAgB,SAAS,SAAS,UAAU,KAAK;AAAA,MACnG,EAAE,MAAM,cAAc,SAAS,SAAS,YAAY,gBAAgB,SAAS,SAAS,YAAY,KAAK;AAAA,MACvG,EAAE,MAAM,cAAc,SAAS,SAAS,aAAa,gBAAgB,SAAS,SAAS,aAAa,KAAK;AAAA,IAC7G;AACA,aAAS,OAAO,mBAAmB;AACnC,YAAQ,oBAAoB,gBAAgB,QAAQ;AAAA,EACxD;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,cAAc;AAAA,EAClC;AACJ;AAEA,IAAM,eAAN,MAAmB;AAAA,EACf,QAAQ;AAAA,EACC;AAAA,EAET,YAAY,KAAkB,OAAgC;AAC1D,SAAK,UAAU,IAAI,cAAc,MAAM,MAAM;AAAA,EACjD;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,OAAO;AAAA,EAC3B;AACJ;AAEA,IAAM,eAAN,MAAmB;AAAA,EACf,QAAQ;AAAA,EACC;AAAA,EAET,YAAY,KAAkB,SAAoC;AAC9D,SAAK,UAAU,IAAI,cAAc,OAAO;AAAA,EAC5C;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,OAAO;AAAA,EAC3B;AACJ;;;;;;;;;AC7fO,IAAM,aAAN,MAAyC;AAAA,EACnC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,OAAO;AAAA,EACX;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,kBAAkB,SAAS,MAAM,UAAU,SAAS;AAAA,EACnE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,MAAM,QAAQ,YAAY,MAAM;AACtC,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,cAAc,OAAO,CAAC;AAC3F,UAAM,UAAU,IAAI,cAAc,EAAE,oBAAoB,WAAW,qBAAqB,WAAW,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AAC7I,UAAM,eAAe,CAAC,SAAS,QAAQ,SAAS;AAChD,UAAM,kBAAkB,aAAa,IAAI,UAAQ,YAAY,MAAM;AAEnE,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAAC,kBAAc,gBAAAA,kBAAgB,qBAAqB,CAAC,QAAQ,GAAG,gBAAgB,CAAC;AACtI,WAAO,EAAE,KAAK,UAAU,SAAS,QAAQ;AAAA,EAC7C;AACJ;AAKA,SAAS,UAAU,SAAwB,OAA2B;AAClE,SAAO,MAAM,YAAY,YAAY,QAAQ,eAAe,CAAC,MAAM,YAAY;AACnF;AAEA,IAAM,oBAAN,MAAuD;AAAA,EACnD,YAAqB,SAAiC,QAA6B,UAA6B,WAAsB;AAAjH;AAAiC;AAA6B;AAA6B;AAAA,EAAwB;AAAA,EAExI,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,QAAI,QAAQ,cAAc,OAAO,WAAW;AACxC;AAAA,IACJ;AACA,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,aAAa,sBAAsB,IAAI;AAC/C,QAAI,QAAQ,gBAAgB,EAAE,aAAa,sBAAsB,CAAC,GAAG;AACjE,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,aAAO,QAAQ,YAAY;AAC3B,cAAQ,oBAAoB,UAAU,KAAK,QAAQ;AAAA,IACvD;AACA,QAAI,QAAQ,YAAY,KAAK,CAAC,QAAQ,mBAAmB,KAAK,UAAU,SAAS,KAAK,GAAG;AACrF,cAAQ,kBAAkB;AAAA,IAC9B;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,QAAI,QAAQ,cAAc,OAAO,WAAW;AACxC;AAAA,IACJ;AACA,UAAM,EAAE,SAAS,UAAU,QAAQ,IAAI;AACvC,UAAM,EAAE,IAAI,eAAe,IAAI;AAC/B,UAAM,EAAE,SAAS,IAAI,QAAQ;AAE7B,QAAI,QAAQ,YAAY,KAAK,QAAQ,mBAAmB,KAAK,UAAU,SAAS,KAAK,GAAG;AACpF,cAAQ,IAAI;AAAA,QACR;AAAA,QACA,gBAAgB,CAAC,gBAAgB,QAAQ;AAAA,QACzC,UAAU;AAAA,UACN,EAAE,MAAM,cAAc,SAAS,SAAS,OAAO,QAAQ;AAAA,UACvD,EAAE,MAAM,cAAc,SAAS,SAAS,MAAM,QAAQ;AAAA,UACtD,EAAE,MAAM,cAAc,SAAS,SAAS,OAAO,QAAQ;AAAA,QAC3D;AAAA,QACA,QAAQ;AAAA,UACJ,iBAAiB;AAAA,QACrB;AAAA,QACA,OAAO;AAAA,UACH,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACd;AAAA,QACA,OAAO;AAAA,UACH,MAAM;AAAA,UACN,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,cAAQ,qBAAqB,EAAE,KAAK;AAAA,IACxC;AAAA,EACJ;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;AC9EO,SAAS,uBAAuB;AACnC,SAAO;AAAA,IACH,IAAI,iBAAiB;AAAA,IACrB,IAAI,WAAW;AAAA,IACf,IAAI,aAAa;AAAA,IACjB,IAAI,cAAc;AAAA,IAClB,IAAI,WAAW;AAAA,IACf,IAAI,WAAW;AAAA,IACf,IAAI,eAAe;AAAA,IACnB,IAAI,gBAAgB;AAAA,IACpB,IAAI,cAAc;AAAA,EACtB;AACJ;;;ACvCO,SAAS,yBAAwC;AACpD,SAAO;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,EAChB;AACJ;AAEO,SAAS,2BAA2B,SAAgC;AACvE,SAAO;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAS;AAAA,EACtB;AACJ;AAEO,SAAS,wBAAwB,OAAkC;AACtE,QAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI;AACrB,SAAO;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,KAAK;AAAA,EACrB;AACJ;AAEO,SAAS,6BAA6B,SAAiD;AAC1F,QAAM,IAAI,yBAAyB,QAAQ,GAAG;AAC9C,QAAM,IAAI,yBAAyB,QAAQ,KAAK;AAChD,QAAM,IAAI,yBAAyB,QAAQ,IAAI;AAC/C,QAAM,IAAI,yBAAyB,QAAQ,OAAO;AAClD,SAAO;AAAA,IACH,EAAE,CAAC;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAClB;AAAA,IAAG,EAAE,CAAC;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAClB;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAClB;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAAG,EAAE,CAAC;AAAA,EACtB;AACJ;AAEO,SAAS,6BAA6B,SAAiD;AAC1F,QAAM,CAAC,IAAI,EAAE,IAAI,yBAAyB,QAAQ,SAAS;AAC3D,QAAM,CAAC,IAAI,EAAE,IAAI,yBAAyB,QAAQ,OAAO;AAEzD,WAAS,IAAI,GAAW,GAAW,GAAW;AAC1C,WAAO,KAAK,IAAI,KAAK;AAAA,EACzB;AAEA,QAAM,KAAK,QAAQ,cAAc;AACjC,QAAM,KAAK,IAAI,IAAI,GAAG,GAAG,EAAE,IAAI;AAC/B,QAAM,KAAK,IAAI,IAAI,GAAG,GAAG,EAAE,IAAI;AAI/B,SAAO;AAAA,IACH;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IACf;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IACf;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IACf;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,EACjB;AACJ;AAEA,SAAS,kBAAkB,WAA+E;AACtG,SAAO,OAAQ,aAAc;AACjC;AAEA,SAAS,yBAAyB,WAAiD;AAC/E,MAAIC,SAAQ;AACZ,MAAI,SAAS;AACb,MAAI,kBAAkB,SAAS,GAAG;AAC9B,QAAI,UAAU,SAAS,QAAW;AAC9B,MAAAA,SAAQ,UAAU;AAAA,IACtB;AACA,QAAI,UAAU,UAAU,QAAW;AAC/B,eAAS,UAAU;AAAA,IACvB;AAAA,EACJ,WAAW,OAAO,aAAa,UAAU;AACrC,IAAAA,SAAQ;AACR,aAAS;AAAA,EACb;AACA,SAAO,CAACA,QAAO,MAAM;AACzB;;;ACpFO,IAAM,aAAN,MAAgB;AAAA,EACV;AAAA,EACA;AAAA,EAIT,cAAc;AACV,UAAM,UAAkC;AAAA,MACpC,OAAO;AAAA,MACP,WAAW;AAAA,MACX,OAAO;AAAA,MACP,gBAAgB;AAAA,MAChB,8BAA8B;AAAA,MAC9B,iBAAiB;AAAA,MACjB,oBAAoB;AAAA,MACpB,uBAAuB;AAAA,MACvB,SAAS;AAAA,IACb;AAEA,UAAM,EAAE,KAAK,IAAI;AAEjB,UAAM,SAAS,KAAK,SAAS,SAAS,cAAc,QAAQ;AAC5D,WAAO,QAAQ;AACf,WAAO,SAAS;AAChB,WAAO,MAAM,kBAAkB;AAC/B,WAAO,MAAM,WAAW;AACxB,WAAO,MAAM,MAAM;AACnB,WAAO,MAAM,OAAO;AACpB,WAAO,MAAM,QAAQ;AACrB,WAAO,MAAM,SAAS;AACtB,WAAO,MAAM,SAAS;AACtB,aAAS,KAAK,YAAY,MAAM;AAChC,UAAM,KAAK,OAAO,WAAW,UAAU,OAAO;AAC9C,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,mCAAmC;AACvD,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,UAAU;AACN,UAAM,EAAE,IAAI,OAAO,IAAI;AACvB,aAAS,KAAK,YAAY,MAAM;AAChC,UAAM,MAAM,GAAG,aAAa,oBAAoB;AAChD,SAAK,YAAY;AAAA,EACrB;AACJ;AA5CO,IAAM,YAAN;AAGH,cAHS,WAGO,QAAO;AACvB,cAJS,WAIO,aAAY,WAAU,OAAO,WAAU;;;ACJpD,SAAS,YAAY;AACxB,SAAO,IAAI,QAAgB,CAAC,YAAY;AACpC,aAAS,QAAQ,MAAc;AAC3B,cAAQ,IAAI;AAAA,IAChB;AACA,0BAAsB,OAAO;AAAA,EACjC,CAAC;AACL;AAEA,eAAsB,QAAQ,QAAqC;AAC/D,QAAM,UAAoB,CAAC;AAC3B,MAAI;AAEJ,iBAAe,OAAO;AAClB,UAAM,OAAO,MAAM,UAAU;AAC7B,QAAI,YAAY,QAAW;AACvB,cAAQ,KAAK,OAAO,QAAQ;AAAA,IAChC;AACA,eAAW;AAAA,EACf;AAGA,QAAM,SAAS;AACf,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,UAAM,KAAK;AAAA,EACf;AACA,UAAQ,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC5B,QAAM,iBAAiB,QAAQ,KAAK,MAAM,QAAQ,SAAS,CAAC,CAAC;AAC7D,QAAM,MAAM,KAAK,MAAM,MAAO,cAAc;AAC5C,UAAQ,IAAI,EAAE,IAAI,CAAC;AAEnB,MAAI,aAAa;AACjB,aAAU;AACN,eAAW;AACX,YAAQ,SAAS;AACjB,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,YAAM,KAAK;AACX,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,eAAO,CAAC;AAAA,MACZ;AAAA,IACJ;AACA,YAAQ,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC5B,UAAM,uBAAuB,QAAQ,MAAM,GAAG,QAAQ,SAAS,CAAC,EAAE,OAAO,CAAC,GAAG,MAAO,IAAI,CAAE,KAAK,QAAQ,SAAS;AAChH,QAAI,uBAAuB,KAAK;AAC5B,aAAO,uBAAuB;AAAA,IAClC;AACA,iBAAa,KAAK,IAAI,aAAa,GAAG,KAAK,MAAM,aAAa,IAAI,CAAC;AACnE,YAAQ,IAAI,UAAU;AAAA,EAC1B;AACJ;;;;;;;;;;;;;;;AC1CO,IAAMC,WAAU;AAAA,EACnB,UAAU;AAAA,IACN,cAAc;AAAA,IACd,gBAAgBC;AAAA,EACpB;AAAA,EACA,WAAW;AAAA,IACP,cAAc;AAAA,IACd,gBAAgBC;AAAA,EACpB;AACJ;;;ACXO,IAAM,mBAAN,MAAuB;AAAA,EAI1B,YAAqB,WAAsB;AAAtB;AACjB,UAAM,EAAE,GAAG,IAAI,KAAK;AACpB,SAAK,UAAU,gBAAgB,IAAIC,SAAQ,QAAQ;AACnD,SAAK,WAAW,mBAAmB,IAAI,KAAK,SAAS,CAAC,MAAM,CAAC;AAAA,EACjE;AAAA,EAPS;AAAA,EACA;AAAA,EAQT,MAAM,UAAU;AACZ,UAAM,EAAE,WAAW,SAAS,SAAS,IAAI;AACzC,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,OAAG,SAAS;AACZ,UAAM,WAAW;AAEjB,YAAQ,IAAI;AAAA,MACR,UAAU,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,MACtC;AAAA,MACA,OAAO;AAAA,QACH,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,MACd;AAAA,MACA,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,aAAS,OAAO,WAAmB;AAC/B,SAAG,UAAU,SAAS,MAAM,KAAK,OAAO,CAAC;AAEzC,aAAO,IAAI,EAAE,MAAM,oBAAoB,MAAM,kBAAkB,OAAO,GAAG,eAAe,SAAS,CAAC;AAClG,SAAG,MAAM;AAAA,IACb;AAEA,YAAQ,IAAI,EAAE,MAAM,eAAe,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;AACxD,UAAM,OAAO,MAAM,QAAQ,MAAM;AACjC,UAAM,OAAO,YAAY,WAAW,MAAO;AAC3C,WAAO;AAAA,EACX;AACJ;;;AC7CO,IAAM,oBAAN,MAAwB;AAAA,EAI3B,YAAqB,WAAsB;AAAtB;AACjB,UAAM,EAAE,GAAG,IAAI,KAAK;AACpB,SAAK,UAAU,gBAAgB,IAAIC,SAAQ,SAAS;AACpD,SAAK,WAAW,mBAAmB,IAAI,KAAK,SAAS,CAAC,OAAO,CAAC;AAAA,EAClE;AAAA,EAPS;AAAA,EACA;AAAA,EAQT,MAAM,UAAU;AACZ,UAAM,EAAE,WAAW,SAAS,SAAS,IAAI;AACzC,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,OAAG,SAAS;AACZ,UAAM,eAAe;AACrB,YAAQ,IAAI;AAAA,MACR,UAAU,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,MACtC;AAAA,MACA,OAAO;AAAA,QACH,QAAQ;AAAA,MACZ;AAAA,MACA,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,aAAS,OAAO,WAAmB;AAC/B,SAAG,UAAU,SAAS,OAAO,KAAK,OAAO,GAAG,KAAK,OAAO,GAAG,KAAK,OAAO,GAAG,CAAC;AAC3E,aAAO,IAAI,EAAE,MAAM,oBAAoB,MAAM,UAAU,OAAO,WAAW,eAAe,aAAa,CAAC;AAAA,IAC1G;AAEA,YAAQ,IAAI,EAAE,MAAM,eAAe,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;AACxD,UAAM,OAAO,MAAM,QAAQ,MAAM;AACjC,UAAM,OAAO,YAAY,eAAe,MAAO;AAC/C,WAAO;AAAA,EACX;AACJ;;;ACpCA,IAAM,eAA2C;AAAA,EAC7C,MAAM;AAAA,EACN,gBAAgB;AAAA,EAChB,iBAAiB;AACrB;AAEA,IAAM,kBAA8C;AAAA,EAChD,UAAU,aAAK,OAAO;AAC1B;AAEO,SAAS,sBAAsB,QAAQ,GAAG,QAAiB;AAC9D,QAAM,YAA0C,CAAC;AACjD,QAAM,IAAI,UAAU,SAAS,IAAI,IAAI,KAAK,IAAI,OAAO,IAAI,CAAC,IAAI;AAC9D,QAAM,WAAW,OAAQ,KAAK,OAAO,IAAI,IAAI,KAAK;AAClD,QAAM,WAAW,MAAO,KAAK,OAAO,IAAI;AACxC,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,UAAM,WAAW,aAAK,WAAW,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;AACnE,QAAI,aAAK,OAAO,QAAQ,IAAI,IAAI,GAAG;AAC/B;AACA;AAAA,IACJ;AACA,UAAM,WAAW,aAAK,UAAU,aAAK,OAAO,GAAG,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;AACjF,cAAU,KAAK,EAAE,UAAU,SAAS,CAAC;AAAA,EACzC;AACA,SAAO;AACX;AAEO,SAAS,iBAA2C;AACvD,QAAM,WAAW,mBAAmB,CAAC,KAAK,MAAM,QAAS,CAAC,GAAG,KAAK,GAAG,MAAM,GAAG,GAAG,CAAE;AACnF,QAAM,UAAU,kBAAkB;AAElC,QAAM,aAAa;AAAA,IACf,UAAU,EAAE,MAAM,cAAc,QAAQ,UAAU,YAAY,IAAI,YAAY,EAAE;AAAA,IAChF,QAAQ,EAAE,MAAM,cAAc,QAAQ,UAAU,YAAY,IAAI,YAAY,GAAG;AAAA,IAC/E,QAAQ,EAAE,MAAM,cAAc,QAAQ,UAAU,YAAY,IAAI,YAAY,GAAG;AAAA,EACnF;AAEA,QAAM,WAAuC;AAAA,IACzC,eAAe;AAAA,IACf;AAAA,IACA;AAAA,EACJ;AAEA,QAAM,YAA6C,EAAE,UAAU,UAAU,aAAa;AACtF,QAAM,OAA+B,EAAE,YAAY,CAAC,SAAS,EAAE;AAC/D,QAAM,YAAY,CAAC,eAAe;AAClC,SAAO,EAAE,MAAM,UAAU;AAC7B;AAEA,SAAS,mBAAmB,MAA+F;AACvH,WAAS,KAAK,GAAiB,GAAiB,OAAqB;AACjE,UAAM,SAAS,aAAK,MAAM,aAAK,OAAO,GAAG,GAAG,CAAC;AAC7C,aAAS,KAAK,IAAmB,IAAmB;AAChD,YAAM,MAAM,aAAK,MAAM,MAAM;AAC7B,mBAAK,EAAE,EAAE,KAAK,KAAK,CAAC;AACpB,mBAAK,EAAE,EAAE,KAAK,KAAK,CAAC;AACpB,aAAO,KAAK,KAAK,QAAQ,KAAK;AAAA,IAElC;AACA,WAAO;AAAA,MACH,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,IACxB;AAAA,EACJ;AAEA,SAAO,IAAI,aAAa;AAAA,IACpB,GAAG,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACxC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACxC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,EAC5C,CAAC;AACL;AAEA,SAAS,oBAAoB;AACzB,MAAI,YAAY;AAChB,WAAS,OAAO;AACZ,UAAM,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,OAAK,IAAI,SAAS;AACrD,iBAAa;AACb,WAAO;AAAA,EACX;AACA,SAAO,IAAI,YAAY;AAAA,IACnB,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,EACZ,CAAC;AACL;AAEO,SAAS,iBAAiB,SAAS,GAA6B;AACnE,QAAM,SAAS;AACf,QAAM,EAAE,gBAAgB,cAAc,eAAe,IAAI,YAAY,QAAQ,MAAM;AAEnF,QAAM,aAAa;AAAA,IACf,UAAU,EAAE,MAAM,cAAc,QAAQ,eAAe;AAAA,IACvD,QAAQ,EAAE,MAAM,cAAc,QAAQ,aAAa;AAAA,IACnD,WAAW,EAAE,MAAM,cAAc,QAAQ,eAAe;AAAA,EAC5D;AAEA,QAAM,WAAuC;AAAA,IACzC,eAAe;AAAA,IACf;AAAA,IACA,SAAS,eAAe,SAAS;AAAA,EACrC;AAEA,QAAM,YAA6C,EAAE,UAAU,UAAU,aAAa;AACtF,QAAM,OAA+B,EAAE,YAAY,CAAC,SAAS,EAAE;AAC/D,SAAO,EAAE,MAAM,WAAW,CAAC,eAAe,EAAE;AAChD;AAEA,SAAS,YAAY,QAAgB,QAAgB;AACjD,QAAM,KAAK,IAAI,KAAK,KAAK,CAAC,KAAK;AAC/B,QAAM,WAAW;AAAA,IACb;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK,CAAE;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,CAAE;AAAA,IAAG;AAAA,IACzC;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK,CAAE;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,CAAE;AAAA,IACzC;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,CAAE;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK,CAAE;AAAA,IAAG;AAAA,IAAG;AAAA,EAC7C;AACA,QAAM,UAAU;AAAA,IACZ;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAC7C;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAC9C;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAC1C;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,EAChD;AACA,SAAO,WAAW,UAAU,SAAS,QAAQ,MAAM;AACvD;AAEA,SAAS,WAAW,UAAoB,SAAmB,QAAgB,QAAgB;AACvF,QAAM,eAAyB,CAAC;AAChC,QAAM,WAAqB,CAAC;AAG5B,YAAU,MAAM;AAGhB,cAAY,MAAM;AAGlB,cAAY;AAGZ,QAAM,iBAAiB,IAAI,aAAa,YAAY;AACpD,QAAM,eAAe,IAAI,aAAa,YAAY;AAClD,QAAM,iBAAiB,IAAI,aAAa,QAAQ;AAEhD,MAAI,UAAU,GAAG;AACb,yBAAqB;AAAA,EACzB,OAAO;AACH,qBAAiB;AAAA,EACrB;AAEA,SAAO,EAAE,gBAAgB,cAAc,eAAe;AAGtD,WAAS,UAAUC,SAAgB;AAC/B,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,IAAI,aAAK,OAAO;AAGtB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AAExC,uBAAiB,QAAQ,IAAI,CAAC,GAAG,CAAC;AAClC,uBAAiB,QAAQ,IAAI,CAAC,GAAG,CAAC;AAClC,uBAAiB,QAAQ,IAAI,CAAC,GAAG,CAAC;AAGlC,oBAAc,GAAG,GAAG,GAAGA,OAAM;AAAA,IACjC;AAAA,EACJ;AAEA,WAAS,cAAc,GAAiB,GAAiB,GAAiBA,SAAgB;AACtF,UAAM,OAAOA,UAAS;AAGtB,UAAM,IAAsB,CAAC;AAG7B,aAAS,IAAI,GAAG,KAAK,MAAM,KAAK;AAC5B,QAAE,CAAC,IAAI,CAAC;AACR,YAAM,KAAK,aAAK,KAAK,aAAK,OAAO,GAAG,GAAG,GAAG,IAAI,IAAI;AAClD,YAAM,KAAK,aAAK,KAAK,aAAK,OAAO,GAAG,GAAG,GAAG,IAAI,IAAI;AAClD,YAAM,OAAO,OAAO;AACpB,eAAS,IAAI,GAAG,KAAK,MAAM,KAAK;AAC5B,YAAI,MAAM,KAAK,MAAM,MAAM;AACvB,YAAE,CAAC,EAAE,CAAC,IAAI;AAAA,QACd,OAAO;AACH,YAAE,CAAC,EAAE,CAAC,IAAI,aAAK,KAAK,aAAK,OAAO,GAAG,IAAI,IAAI,IAAI,IAAI;AAAA,QACvD;AAAA,MACJ;AAAA,IACJ;AAGA,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,eAAS,IAAI,GAAG,IAAI,KAAK,OAAO,KAAK,GAAG,KAAK;AACzC,cAAM,IAAI,KAAK,MAAM,IAAI,CAAC;AAC1B,YAAI,IAAI,MAAM,GAAG;AACb,qBAAW,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACtB,qBAAW,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;AACtB,qBAAW,EAAE,CAAC,EAAE,CAAC,CAAC;AAAA,QACtB,OAAO;AACH,qBAAW,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACtB,qBAAW,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AAC1B,qBAAW,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,YAAYC,SAAgB;AACjC,UAAM,SAAS,aAAK,OAAO;AAE3B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK,GAAG;AAC7C,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,mBAAK,MAAM,QAAQ,aAAK,UAAU,QAAQ,MAAM,GAAGA,OAAM;AACzD,mBAAa,IAAI,CAAC,IAAI,OAAO,CAAC;AAC9B,mBAAa,IAAI,CAAC,IAAI,OAAO,CAAC;AAC9B,mBAAa,IAAI,CAAC,IAAI,OAAO,CAAC;AAAA,IAClC;AAAA,EACJ;AAEA,WAAS,cAAc;AACnB,UAAM,SAAS,aAAK,OAAO;AAC3B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK,GAAG;AAC7C,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAE9B,YAAM,IAAI,QAAQ,MAAM,IAAI,IAAI,KAAK,KAAK;AAC1C,YAAM,IAAI,YAAY,MAAM,IAAI,KAAK,KAAK;AAC1C,eAAS,KAAK,GAAG,IAAI,CAAC;AAAA,IAC1B;AACA,eAAW;AACX,gBAAY;AAAA,EAChB;AAEA,WAAS,cAAc;AAEnB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAEzC,YAAM,KAAK,SAAS,IAAI,CAAC;AACzB,YAAM,KAAK,SAAS,IAAI,CAAC;AACzB,YAAM,KAAK,SAAS,IAAI,CAAC;AAEzB,YAAMC,OAAM,KAAK,IAAI,IAAI,IAAI,EAAE;AAC/B,YAAMC,OAAM,KAAK,IAAI,IAAI,IAAI,EAAE;AAG/B,UAAID,OAAM,OAAOC,OAAM,KAAK;AACxB,YAAI,KAAK;AAAK,mBAAS,IAAI,CAAC,KAAK;AACjC,YAAI,KAAK;AAAK,mBAAS,IAAI,CAAC,KAAK;AACjC,YAAI,KAAK;AAAK,mBAAS,IAAI,CAAC,KAAK;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,WAAW,QAAsB;AACtC,iBAAa,KAAK,GAAG,MAAM;AAAA,EAC/B;AAEA,WAAS,iBAAiBC,QAAe,QAAc;AACnD,UAAM,SAASA,SAAQ;AACvB,WAAO,CAAC,IAAI,SAAS,SAAS,CAAC;AAC/B,WAAO,CAAC,IAAI,SAAS,SAAS,CAAC;AAC/B,WAAO,CAAC,IAAI,SAAS,SAAS,CAAC;AAAA,EACnC;AAEA,WAAS,aAAa;AAClB,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,WAAW,aAAK,OAAO;AAE7B,UAAM,MAAM,aAAK,OAAO;AACxB,UAAM,MAAM,aAAK,OAAO;AACxB,UAAM,MAAM,aAAK,OAAO;AAExB,aAAS,IAAI,GAAG,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK,GAAG,KAAK,GAAG;AAC5D,mBAAK,IAAI,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,CAAC;AACzE,mBAAK,IAAI,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,CAAC;AACzE,mBAAK,IAAI,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,CAAC;AACzE,mBAAK,IAAI,KAAK,SAAS,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC;AAC9C,mBAAK,IAAI,KAAK,SAAS,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC;AAC9C,mBAAK,IAAI,KAAK,SAAS,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC;AAE9C,mBAAK,IAAI,UAAU,GAAG,CAAC;AACvB,mBAAK,IAAI,UAAU,UAAU,CAAC;AAC9B,mBAAK,MAAM,UAAU,UAAU,IAAK,CAAC;AAErC,YAAM,MAAM,QAAQ,QAAQ;AAE5B,gBAAU,KAAK,IAAI,GAAG,GAAG,GAAG;AAC5B,gBAAU,KAAK,IAAI,GAAG,GAAG,GAAG;AAC5B,gBAAU,KAAK,IAAI,GAAG,GAAG,GAAG;AAAA,IAChC;AAAA,EACJ;AAEA,WAAS,UAAU,IAAkB,QAAgB,QAAsBC,UAAiB;AACxF,QAAKA,WAAU,KAAO,GAAG,CAAC,MAAM,GAAI;AAChC,eAAS,MAAM,IAAI,GAAG,CAAC,IAAI;AAAA,IAC/B;AACA,QAAK,OAAO,CAAC,MAAM,KAAO,OAAO,CAAC,MAAM,GAAI;AACxC,eAAS,MAAM,IAAIA,WAAU,IAAI,KAAK,KAAK;AAAA,IAC/C;AAAA,EACJ;AAGA,WAAS,QAAQ,QAAsB;AACnC,WAAO,KAAK,MAAM,OAAO,CAAC,GAAG,CAAE,OAAO,CAAC,CAAC;AAAA,EAC5C;AAGA,WAAS,YAAY,QAAsB;AACvC,WAAO,KAAK,MAAM,CAAE,OAAO,CAAC,GAAG,KAAK,KAAM,OAAO,CAAC,IAAI,OAAO,CAAC,IAAM,OAAO,CAAC,IAAI,OAAO,CAAC,CAAE,CAAC;AAAA,EAC/F;AAEA,WAAS,uBAAuB;AAC5B,QAAI,mBAAmB,QAAW;AAC9B,YAAM,KAAK,aAAK,OAAO,GAAG,KAAK,aAAK,OAAO;AAE3C,eAAS,IAAI,GAAG,KAAK,eAAe,QAAQ,IAAI,IAAI,KAAK,GAAG;AACxD,cAAM,KAAK,eAAe,SAAS,IAAI,GAAG,IAAI,CAAC;AAC/C,cAAM,KAAK,eAAe,SAAS,IAAI,GAAG,IAAI,CAAC;AAC/C,cAAM,KAAK,eAAe,SAAS,IAAI,GAAG,IAAI,CAAC;AAC/C,qBAAK,IAAI,IAAI,IAAI,EAAE;AACnB,qBAAK,IAAI,IAAI,IAAI,EAAE;AACnB,qBAAK,MAAM,IAAI,IAAI,EAAE;AACrB,qBAAK,UAAU,IAAI,EAAE;AACrB,qBAAK,KAAK,aAAa,SAAS,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE;AACjD,qBAAK,KAAK,aAAa,SAAS,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE;AACjD,qBAAK,KAAK,aAAa,SAAS,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,mBAAmB;AACxB,aAAS,IAAI,GAAG,KAAK,aAAa,QAAQ,IAAI,IAAI,KAAK,GAAG;AACtD,YAAM,SAAS,aAAa,SAAS,GAAG,IAAI,CAAC;AAC7C,mBAAK,UAAU,QAAQ,MAAM;AAAA,IACjC;AAAA,EACJ;AACJ;;;AChWA,eAAe,QAAQ,KAAU,iBAAmC;AAChE,QAAM,SAAS,iBAAiB;AAChC,QAAM,WAAW,MAAM,MAAM,IAAI,SAAS,GAAG,EAAE,MAAM,QAAQ,OAAO,CAAC;AACrE,MAAI,CAAC,SAAS,IAAI;AACd,UAAM,IAAI,MAAM,eAAe,SAAS,WAAW,SAAS,eAAe,MAAM;AAAA,EACrF;AACA,SAAO;AACX;AAEA,eAAe,aAAa,KAAU,iBAAmC;AACrE,QAAM,WAAW,MAAM,QAAQ,KAAK,eAAe;AACnD,SAAO,MAAM,SAAS,KAAK;AAC/B;AAEA,eAAe,oBAAoB,KAAU,iBAAmC;AAC5E,QAAM,WAAW,MAAM,QAAQ,KAAK,eAAe;AACnD,SAAO,MAAM,SAAS,YAAY;AACtC;AAEA,eAAe,aAAa,KAAU,iBAAmC;AACrE,QAAM,WAAW,MAAM,QAAQ,KAAK,eAAe;AACnD,SAAO,MAAM,SAAS,KAAK;AAC/B;AAEA,IAAM,sBAAsB;AAC5B,IAAM,uBAAuB;AAC7B,IAAM,qBAAqB,EAAE,MAAM,YAAY,KAAK,QAAW;AAExD,SAAS,SAAS,MAAmB;AACxC,QAAM,aAAa,IAAI,SAAS,MAAM,GAAG,oBAAoB;AAC7D,QAAM,UAAU,IAAI,YAAY;AAEhC,QAAM,SAAS;AAAA,IACX,OAAO,QAAQ,OAAO,IAAI,WAAW,MAAM,GAAG,CAAC,CAAC;AAAA,IAChD,SAAS,WAAW,UAAU,GAAG,IAAI;AAAA,IACrC,QAAQ,WAAW,UAAU,GAAG,IAAI;AAAA,EACxC;AAEA,MAAI,OAAO,UAAU,qBAAqB;AACtC,UAAM,IAAI,MAAM,iCAAiC;AAAA,EACrD,WAAW,OAAO,UAAU,GAAK;AAC7B,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC5D;AAEA,MAAI;AACJ,MAAI;AACJ,QAAM,YAAY,IAAI,SAAS,MAAM,oBAAoB;AACzD,MAAI,aAAa;AACjB,SAAO,aAAa,UAAU,YAAY;AACtC,UAAM,cAAc,UAAU,UAAU,YAAY,IAAI;AAAG,kBAAc;AACzE,UAAM,YAAY,UAAU,UAAU,YAAY,IAAI;AAAG,kBAAc;AACvE,QAAI,cAAc,mBAAmB,MAAM;AACvC,YAAM,eAAe,IAAI,WAAW,MAAM,uBAAuB,YAAY,WAAW;AACxF,aAAO,QAAQ,OAAO,YAAY;AAClC,aAAO,KAAK,UAAU,GAAG,KAAK,YAAY,GAAG,IAAI,CAAC;AAAA,IACtD,WAAW,cAAc,mBAAmB,KAAK;AAC7C,YAAM,eAAe,IAAI,WAAW,MAAM,uBAAuB,YAAY,WAAW;AACxF,YAAM,cAAc,IAAI,WAAW,WAAW;AAC9C,kBAAY,IAAI,YAAY;AAC5B,eAAS,YAAY;AAAA,IACzB;AACA,kBAAc;AAAA,EAClB;AAEA,MAAI,CAAC,MAAM;AACP,UAAM,IAAI,MAAM,sCAAsC;AAAA,EAC1D;AACA,MAAI,CAAC,QAAQ;AACT,UAAM,IAAI,MAAM,sCAAsC;AAAA,EAC1D;AACA,SAAO,EAAE,MAAM,OAAO;AAC1B;AAEA,eAAsB,SAAS,KAAU,iBAAmC;AACxE,QAAM,OAAO,IAAI,SAAS,YAAY;AACtC,MAAI;AACJ,MAAI;AACJ,MAAI,KAAK,SAAS,OAAO,GAAG;AACxB,WAAO,MAAM,aAAa,GAAG;AAE7B,UAAM,kBAAkB,KAAK,WAAW,CAAC,GAAG,IAAI,OAAM,QAAO;AACzD,YAAM,YAAY,IAAI,IAAI,IAAI,KAAM,GAAG;AACvC,UAAI,CAAC,UAAU;AACX,kBAAU,SAAS,IAAI,UAAU;AACrC,aAAO,oBAAoB,WAAW,eAAe;AAAA,IACzD,CAAC;AACD,cAAU,MAAM,QAAQ,IAAI,cAAc;AAAA,EAC9C,WAAW,KAAK,SAAS,MAAM,GAAG;AAC9B,UAAM,MAAM,MAAM,oBAAoB,KAAK,eAAe;AAC1D,UAAM,EAAE,MAAM,OAAO,IAAI,SAAS,GAAG;AACrC,WAAO,KAAK,MAAM,IAAI;AACtB,cAAU,CAAC,MAAM;AAAA,EACrB,OAAO;AACH,UAAM,IAAI,MAAM,gCAAgC,OAAO;AAAA,EAC3D;AACA,QAAM,oBAAoB,KAAK,QAAQ,IAAI,SAAO;AAC9C,QAAI,IAAI,KAAK;AACT,YAAM,WAAW,IAAI,IAAI,IAAI,KAAK,GAAG;AACrC,aAAO,aAAa,UAAU,eAAe;AAAA,IACjD;AAAA,EACJ,CAAC,KAAK,CAAC;AACP,QAAM,qBAAqB,MAAM,QAAQ,IAAI,iBAAiB;AAC9D,SAAO,EAAE,MAAM,SAAS,mBAAmB;AAC/C;;;AClGA,SAAS,gBAAgB,WAAiB;AACtC,QAAM,WAAW,aAAK,SAAS,aAAK,OAAO,GAAG,aAAK,SAAS,aAAK,OAAO,GAAG,SAAS,CAAC;AACrF,QAAM,WAAW,aAAK,WAAW,UAAU,EAAE,GAAG,UAAU,EAAE,GAAG,UAAU,EAAE,CAAC;AAC5E,SAAO,EAAE,UAAU,SAAS;AAChC;AAGA,SAAS,aAAa,MAAiB;AACnC,QAAM,EAAE,QAAQ,aAAa,SAAS,IAAI;AAC1C,QAAM,YAAkB,aAAK,OAAO;AACpC,MAAI,QAAQ;AACR,iBAAK,IAAI,WAAW,GAAI,MAA6C;AAAA,EACzE,WAAW,eAAe,UAAU;AAChC,UAAM,IAAI,cAAc,aAAK,WAAW,GAAI,WAAkD,IAAI,aAAK,OAAO;AAC9G,UAAM,IAAI,WAAW,aAAK,WAAW,GAAI,QAA+C,IAAI,aAAK,OAAO;AACxG,iBAAK,wBAAwB,WAAW,GAAG,CAAC;AAAA,EAChD;AACA,SAAO;AACX;AAEA,eAAsB,UAAU,SAAwB,MAAiB,oBAA0C,cAAqE;AACpL,QAAM,EAAE,oBAAoB,eAAe,IAAI;AAC/C,MAAI,kBAAkB,eAAe,UAAU,KAAK,eAAe,CAAC,KAAK,uBAAuB;AAC5F,YAAQ,KAAK,mEAAmE,eAAe,KAAK,IAAI,IAAI;AAAA,EAChH;AACA,MAAI,sBAAsB,mBAAmB,UAAU,KAAK,mBAAmB,CAAC,KAAK,uBAAuB;AACxG,UAAM,IAAI,MAAM,uEAAuE,mBAAmB,KAAK,IAAI,IAAI;AAAA,EAC3H;AACA,QAAM,UAAU;AAAA,IACZ,mBAAW,GAAG;AAAA,IACd,kBAAU,GAAG;AAAA,IACb,kCAA0B,GAAG;AAAA,IAC7B,iCAAyB,GAAG;AAAA,IAC5B,iCAAyB,GAAG;AAAA,IAC5B,gCAAwB,GAAG;AAAA,EAC/B;AAEA,QAAM,YAAY;AAAA,IACd,0BAAiB,GAAG;AAAA,IACpB,4BAAmB,GAAG;AAAA,IACtB,mBAAU,GAAG;AAAA,EACjB;AAEA,QAAM,iBAAiB;AAAA,IACnB,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,SAAS;AAAA,EACb;AAEA,QAAM,2BAA2B;AAAA,IAC7B,iBAAS,GAAG;AAAA,IACZ,gBAAQ,GAAG;AAAA,IACX,iBAAS,GAAG;AAAA,IACZ,eAAO,GAAG;AAAA,IACV,yBAAiB,GAAG;AAAA,IACpB,0BAAkB,GAAG;AAAA,IACrB,wBAAgB,GAAG;AAAA,EACvB;AAGA,QAAM,2BAA2B;AAAA,IAC7B,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAEA,QAAM,kCAAkC;AAAA,IACpC,iBAAS,GAAG;AAAA,IACZ,gBAAQ,GAAG;AAAA,IACX,iBAAS,GAAG;AAAA,IACZ,eAAO,GAAG;AAAA,IACV,yBAAiB,GAAG;AAAA,IACpB,0BAAkB,GAAG;AAAA,IACrB,wBAAgB,GAAG;AAAA,EACvB;AAEA,QAAM,aAAa;AAAA,IACf,eAAU,GAAG;AAAA,IACb,cAAS,GAAG;AAAA,IACZ,kBAAa,GAAG;AAAA,IAChB,mBAAc,GAAG;AAAA,IACjB,kBAAa,GAAG;AAAA,IAChB,uBAAkB,GAAG;AAAA,IACrB,qBAAgB,GAAG;AAAA,EACvB;AAGA,QAAM,cAAc;AAAA,IAChB,yBAAiB,GAAG;AAAA,IACpB,0BAAkB,GAAG;AAAA,IACrB,wBAAgB,GAAG;AAAA,IACnB,gBAAQ,GAAG;AAAA,IACX,iBAAS,GAAG;AAAA,IACZ,eAAO,GAAG;AAAA,IACV,iBAAS,GAAG;AAAA,EAChB;AAEA,QAAM,cAAc,KAAK,YAAa,IAAI,OAAK;AAC3C,WAAO,IAAI,WAAW,QAAQ,EAAE,MAAM,GAAG,EAAE,YAAY,EAAE,UAAU;AAAA,EACvE,CAAC;AAED,WAAS,aAAa,OAAmB;AACrC,UAAM,aAAa,KAAK,YAAa,MAAM,UAAW;AACtD,UAAM,QAAQ,WAAW,cAAc;AACvC,UAAM,MAAM,WAAW,aAAa,QAAQ,WAAW,aAAa;AACpE,UAAM,SAAS,QAAQ,WAAW,MAAM,EAAE,MAAM,OAAO,GAAG;AAC1D,WAAO,IAAI,KAAK,CAAC,MAAM,CAAC;AAAA,EAC5B;AAEA,QAAM,gBAAgB,KAAK,QAAQ,IAAI,OAAO,KAAK,QAAQ;AAEvD,QAAI,OAAO,mBAAmB,GAAG,KAAK,aAAa,GAAG;AACtD,QAAI,IAAI,UAAU;AACd,aAAO,IAAI,KAAK,CAAC,IAAI,GAAG,EAAE,MAAM,IAAI,SAAS,CAAC;AAAA,IAClD;AACA,UAAM,QAAQ,MAAM,kBAAkB,MAAM,EAAE,sBAAsB,OAAO,CAAC;AAC5E,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,SAAsC,EAAE,MAAM,cAAc,OAAO,QAAQ,iBAAiB,MAAM,gBAAgB,SAAS,MAAM,iBAAiB,MAAM;AAC9J,WAAO,EAAE,OAAO;AAAA,EACpB,CAAC,KAAK,CAAC;AACP,QAAM,SAAS,MAAM,QAAQ,IAAI,aAAa;AAE9C,QAAM,WAAW,KAAK,UAAU,IAAI,OAAK;AAErC,UAAM,EAAE,WAAW,WAAW,OAAO,MAAM,IAAI;AAC/C,UAAM,qBAAqB,QAAQ,4CAAoC;AACvE,UAAM,sBAAsB,QAAQ,8BAAsB;AAC1D,UAAM,OAAO,SAAS,QAAQ,CAAC,UAAU,KAAK,GAAiB,UAAU,KAAK,CAAe,IAAa,CAAC,UAAU,QAAQ;AAC7H,WAAO,EAAE,oBAAoB,qBAAqB,KAAK;AAAA,EAC3D,CAAC,KAAK,CAAC;AAEP,QAAM,WAAW,KAAK,UAAU,IAAI,OAAK;AAErC,UAAM,QAAQ,OAAO,EAAE,MAAO;AAC9B,UAAM,UAAU,SAAS,EAAE,OAAQ;AACnC,WAAO,EAAE,OAAO,QAAQ;AAAA,EAC5B,CAAC,KAAK,CAAC;AAEP,QAAM,kBAAiD,EAAE,MAAM,MAAM;AACrE,QAAM,YAAY,KAAK,WAAW,IAAI,CAAC,GAAG,MAAM;AAC5C,UAAM,UAAU,EAAE,cAAc,yBAAyB,EAAE;AAC3D,UAAM,EAAE,sBAAsB,eAAe,kBAAkB,iBAAiB,gBAAgB,WAAW,aAAa,YAAY,IAAI;AACxI,aAAS,WAAW,SAAiG;AACjH,UAAI,SAAS;AACT,cAAM,YAAY;AAClB,YAAI,WAAW,SAAS;AACpB,iBAAO;AAAA,YACH,SAAS,SAAS,QAAQ,KAAK,KAAK;AAAA,YACpC,UAAU,QAAQ;AAAA,YAClB,OAAO,QAAQ;AAAA,YACf;AAAA,UACJ;AAAA,QACJ,WAAW,cAAc,SAAS;AAC9B,iBAAO;AAAA,YACH,SAAS,SAAS,QAAQ,KAAK,KAAK;AAAA,YACpC,UAAU,QAAQ;AAAA,YAClB,UAAU,QAAQ;AAAA,YAClB;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,UACH,SAAS,SAAS,QAAQ,KAAK,KAAK;AAAA,UACpC,UAAU,QAAQ;AAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,SAAS;AACT,aAAO;AAAA,QACH,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA,iBAAiB,sBAAsB;AAAA,QACvC,kBAAkB,WAAW,sBAAsB,gBAAgB;AAAA,MACvE;AAAA,IACJ,OAAO;AACH,aAAO;AAAA,QACH,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA,iBAAiB,sBAAsB;AAAA,QACvC,gBAAgB,sBAAsB;AAAA,QACtC,iBAAiB,sBAAsB;AAAA,QACvC;AAAA,QACA,kBAAkB,WAAW,sBAAsB,gBAAgB;AAAA,QACnE,0BAA0B,WAAW,sBAAsB,wBAAwB;AAAA,QACnF,eAAe,WAAW,aAAa;AAAA,QACvC,kBAAkB,WAAW,gBAAgB;AAAA,QAC7C,iBAAiB,WAAW,eAAe;AAAA,MAC/C;AAAA,IACJ;AAAA,EACJ,CAAC,KAAK,CAAC;AAEP,QAAM,SAAS,KAAK,QAAQ,IAAI,OAAK;AACjC,UAAM,aAAa,EAAE,WAAW,IAAI,OAAK;AACrC,YAAM,aAAa,CAAC;AACpB,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,EAAE,UAAU,GAAG;AACrD,cAAM,OAAO,eAAe,GAAkC;AAG9D,cAAM,WAAW,KAAK,UAAW,KAAK;AACtC,gBAAQ,OAAO,CAAC,SAAS,MAAM;AAC/B,cAAM,aAAa,KAAK,YAAa,SAAS,UAAW;AACzD,cAAM,SAAS,YAAY,SAAS,UAAW;AAC/C,cAAM,gBAAgB,SAAS;AAC/B,cAAM,SAAS,gCAAgC,aAAa;AAC5D,cAAM,OAAO,SAAS;AACtB,cAAM,OAAO,SAAS,QAAQ,WAAW,SAAS,GAAG,UAAU;AAE/D,cAAM,SAAS;AAAA,UACX;AAAA,UACA;AAAA,UACA,eAAe,yBAAyB,aAAa;AAAA,UACrD,gBAAgB,yBAAyB,IAAI;AAAA,UAC7C,YAAY,SAAS,cAAc;AAAA,UACnC,YAAY,WAAW,cAAc;AAAA,UACrC,YAAY,SAAS,cAAc;AAAA,QACvC;AACA,gBAAQ,IAAI,YAAY,MAAM,MAAM;AAAA,MACxC;AAAC;AAED,YAAM,kBAAkB,EAAE,WAAW,SAAY,KAAK,UAAW,EAAE,OAAO,IAAI;AAC9E,YAAM,QAAQ,kBAAkB,gBAAgB,QAAQ,KAAK,UAAW,EAAE,WAAW,UAAU,CAAE,EAAE;AACnG,YAAM,KAAK,YAAY,iBAAiB,cAAc,EAAE;AACxD,YAAM,kBAAkB,kBAAkB,YAAY,gBAAgB,aAAuE,IAAI;AACjJ,YAAM,UAAU,kBAAkB,IAAI,gBAAgB,GAAG,QAAQ,GAAG,cAAc,gBAAiB,cAAc,IAAI,gBAAiB,KAAK,IAAI;AAC/I,YAAM,OAAO,WAAW,EAAE,IAA+B,KAAK;AAE9D,YAAM,WAAuC;AAAA,QACzC,eAAe;AAAA,QACf;AAAA,QACA;AAAA,MACJ;AACA,YAAM,WAAW,UAAU,EAAE,YAAY,EAAE,KAAK;AAChD,aAAO,EAAE,UAAU,SAAS;AAAA,IAChC,CAAC;AACD,WAAO,EAAE,WAAW;AAAA,EACxB,CAAC,KAAK,CAAC;AAEP,QAAM,UAAsC,CAAC;AAC7C,MAAI,KAAK,UAAU,KAAK,OAAO;AAC3B,UAAM,YAAY,KAAK,OAAO,KAAK,SAAS,CAAC,EAAE;AAC/C,QAAI,WAAW;AACX,UAASC,oBAAT,SAA0B,WAAmB,iBAAgC;AACzE,cAAM,OAAO,KAAK,MAAO,SAAS;AAClC,cAAM,YAAY,aAAa,IAAI;AACnC,YAAI,iBAAiB;AACjB,uBAAK,SAAS,WAAW,iBAAiB,SAAS;AAAA,QACvD;AACA,YAAI,KAAK,QAAQ,QAAW;AACxB,gBAAM,WAAuC,gBAAgB,SAAS;AACtE,gBAAM,OAAO,OAAO,KAAK,IAAI;AAC7B,gBAAM,MAAgC,EAAE,WAAW,CAAC,QAAQ,GAAG,MAAM,aAAa;AAClF,kBAAQ,KAAK,GAAG;AAAA,QACpB;AACA,YAAI,KAAK,UAAU;AACf,qBAAW,SAAS,KAAK,UAAU;AAC/B,YAAAA,kBAAiB,OAAO,SAAS;AAAA,UACrC;AAAA,QACJ;AAAA,MACJ;AAjBS,6BAAAA;AAkBT,iBAAW,iBAAiB,WAAW;AACnC,QAAAA,kBAAiB,aAAa;AAAA,MAClC;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;;;ACrRA,eAAsB,SAAS,KAAU,cAAuB,iBAAmC;AAC/F,QAAM,EAAE,MAAM,SAAS,mBAAmB,IAAI,MAAM,SAAS,KAAK,eAAe;AACjF,SAAO,UAAU,SAAS,MAAM,oBAAoB,YAAY;AACpE;;;ACSO,SAAS,WAAW,eAA8B,QAA2B,kBAAoD;AACpI,QAAM,UAAkC;AAAA,IACpC,OAAO;AAAA,IACP,WAAW;AAAA,IACX,OAAO;AAAA,IACP,gBAAgB;AAAA,IAChB,8BAA8B;AAAA,IAC9B,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,IACpB,uBAAuB;AAAA,IACvB,SAAS;AAAA,EACb;AAEA,QAAM,cAAc,aAAa;AACjC,QAAM,OAAO,IAAI,KAAK,CAAC,eAAW,GAAG,EAAE,MAAM,YAAY,CAAC;AAC1D,QAAM,iBAAiB,kBAAkB,IAAI;AAC7C,MAAI;AACJ,MAAI,UAAU,EAAE,eAAe,OAAuC;AAEtE,SAAO,iBAAiB,oBAAoB,SAAU,OAA0B;AAC5E,UAAM,eAAe;AACrB,YAAQ,KAAK,qBAAqB;AAClC,QAAI,eAAe;AACf,oBAAc,aAAa,EAAE;AAC7B,cAAQ,gBAAgB;AAAA,IAC5B;AAEA,WAAO,QAAQ;AACf,WAAO,SAAS;AAChB,QAAI,WAAW;AACX,2BAAqB,MAAM;AAC/B,aAAS;AAAA,EACb,GAA6B,KAAK;AAElC,SAAO,iBAAiB,wBAAwB,SAAU,OAA0B;AAChF,YAAQ,KAAK,yBAAyB;AACtC,kBAAc;AAAA,EAClB,GAA6B,KAAK;AAGlC,MAAI;AACJ,iBAAe,gBAAgB;AAC3B,UAAM,OAAO,MAAM;AACnB,UAAM,UAAU,MAAM;AACtB,oBAAgB,IAAI,cAAc,eAAe,QAAQ,MAAM,SAAS,OAAO;AAC/E,UAAM,cAAc,KAAK;AACzB,qBAAiB,aAAa;AAAA,EAClC;AACA,gBAAc;AAGd,SAAO,OAAO,UAAyB;AACnC,oBAAgB;AAChB,UAAM,cAAc;AAAA,EACxB;AACJ;;;ACpEO,IAAM,mBAAN,MAAsB;AAAA,EAChB;AAAA,EACT;AAAA,EACS;AAAA,EACT,eAA4F,CAAC;AAAA,EAC5E,QAAQ,oBAAI,IAAY;AAAA,EACjC,mBAAmB;AAAA,EACnB,SAAS;AAAA,EACT,SAAS;AAAA,EACA,iBAAiB,CAAC,GAAG,CAAC;AAAA,EAC/B,yBAAyB;AAAA,EACzB,kBAAoC;AAAA,EAEpC,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,wBAAwB;AAAA,EAEhC,iBAAiB;AAAA,EAEjB,YAAY,YAA0B;AAClC,SAAK,aAAa,cAAc,SAAS;AACzC,SAAK,QAAQ;AACb,SAAK,OAAO,CAAC;AACb,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,UAAU;AACN,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK,uBAAuB,KAAK,KAAK,iBAAiB,KAAK,KAAK,YAAY,KAAK,KAAK,YAAY;AAAA,EAC9G;AAAA,EAEA,IAAI,QAAQ;AACR,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EAEA,IAAI,aAAa;AACb,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,IAAI;AACR,QAAI,MAAM,IAAI,WAAW;AAAG,WAAK;AACjC,QAAI,MAAM,IAAI,YAAY;AAAG,WAAK;AAClC,QAAI,MAAM,IAAI,cAAc;AAAG,WAAK;AACpC,QAAI,MAAM,IAAI,SAAS;AAAG,WAAK;AAC/B,QAAI,MAAM,IAAI,UAAU;AAAG,WAAK;AAChC,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,WAAW;AACX,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,MAAM,IAAI,WAAW;AAAG,aAAO;AACnC,QAAI,MAAM,IAAI,YAAY;AAAG,aAAO;AACpC,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,UAAU;AACV,UAAM,EAAE,OAAO,QAAQ,QAAQ,OAAO,IAAI;AAC1C,QAAI,UAAU,KAAK,UAAU,GAAG;AAC5B,aAAO,CAAC,GAAG,CAAC;AAAA,IAChB;AACA,WAAO,CAAC,EAAE,SAAS,QAAQ,KAAK,SAAS,IAAI,SAAS,SAAS,KAAK,SAAS,CAAC;AAAA,EAClF;AAAA,EAEU,UAAU;AAChB,UAAM,EAAE,WAAW,IAAI;AACvB,QAAI,CAAC;AAAY;AACjB,UAAM,UAAU;AAChB,eAAW,WAAW;AACtB,eAAW,iBAAiB,WAAW,KAAK,SAAS,OAAO;AAC5D,eAAW,iBAAiB,SAAS,KAAK,OAAO,OAAO;AACxD,eAAW,iBAAiB,QAAQ,KAAK,MAAM,OAAO;AACtD,eAAW,iBAAiB,SAAS,KAAK,OAAO,OAAO;AACxD,eAAW,iBAAiB,eAAe,KAAK,aAAa,OAAO;AACpE,eAAW,iBAAiB,aAAa,KAAK,WAAW,OAAO;AAChE,eAAW,iBAAiB,WAAW,KAAK,SAAS,OAAO;AAC5D,eAAW,iBAAiB,aAAa,KAAK,WAAW,OAAO;AAChE,eAAW,iBAAiB,SAAS,KAAK,OAAO,OAAO;AACxD,eAAW,iBAAiB,cAAc,KAAK,YAAY,OAAO;AAClE,eAAW,iBAAiB,aAAa,KAAK,WAAW,OAAO;AAChE,eAAW,iBAAiB,YAAY,KAAK,UAAU,OAAO;AAC9D,eAAW,iBAAiB,eAAe,KAAK,aAAa,OAAO;AACpE,eAAW,MAAM;AAAA,EACrB;AAAA,EAEU,aAAa;AACnB,UAAM,EAAE,WAAW,IAAI;AACvB,QAAI,CAAC;AAAY;AACjB,UAAM,UAAU;AAChB,eAAW,oBAAoB,WAAW,KAAK,SAAS,OAAO;AAC/D,eAAW,oBAAoB,SAAS,KAAK,OAAO,OAAO;AAC3D,eAAW,oBAAoB,QAAQ,KAAK,MAAM,OAAO;AACzD,eAAW,oBAAoB,SAAS,KAAK,OAAO,OAAO;AAC3D,eAAW,oBAAoB,eAAe,KAAK,aAAa,OAAO;AACvE,eAAW,oBAAoB,aAAa,KAAK,WAAW,OAAO;AACnE,eAAW,oBAAoB,WAAW,KAAK,SAAS,OAAO;AAC/D,eAAW,oBAAoB,aAAa,KAAK,WAAW,OAAO;AACnE,eAAW,oBAAoB,SAAS,KAAK,OAAO,OAAO;AAC3D,eAAW,oBAAoB,cAAc,KAAK,YAAY,OAAO;AACrE,eAAW,oBAAoB,aAAa,KAAK,WAAW,OAAO;AACnE,eAAW,oBAAoB,YAAY,KAAK,UAAU,OAAO;AACjE,eAAW,oBAAoB,eAAe,KAAK,aAAa,OAAO;AAAA,EAC3E;AAAA,EAEQ,QAAQ,CAAC,MAAa;AAC1B,MAAE,eAAe;AAAA,EACrB;AAAA,EAEQ,cAAc,CAAC,MAAa;AAChC,MAAE,eAAe;AAAA,EACrB;AAAA,EAEA,OAAe,aAAa,MAAc;AACtC,WAAO,iBAAgB,aAAa,QAAQ,IAAI,KAAK;AAAA,EACzD;AAAA,EAEO,yBAAyB;AAC5B,WAAO,CAAC,GAAG,KAAK,KAAK,EAAE,KAAK,SAAO,iBAAgB,aAAa,GAAG,CAAC;AAAA,EACxE;AAAA,EAEO,cAAc;AACjB,WAAQ,YAAY,IAAI,IAAI,KAAK,wBAAyB;AAAA,EAC9D;AAAA,EAEQ,UAAU,CAAC,MAAqB;AACpC,QAAI,iBAAgB,aAAa,EAAE,IAAI,GAAG;AACtC,QAAE,eAAe;AAAA,IACrB;AACA,SAAK,MAAM,IAAI,EAAE,IAAI;AACrB,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,EAClB;AAAA,EAEQ,QAAQ,CAAC,MAAqB;AAClC,QAAI,iBAAgB,aAAa,EAAE,IAAI,GAAG;AACtC,QAAE,eAAe;AAAA,IACrB;AACA,SAAK,MAAM,OAAO,EAAE,IAAI;AAAA,EAC5B;AAAA,EAEQ,OAAO,CAAC,MAAkB;AAC9B,QAAI,qBAAqB;AAAU,eAAS,gBAAgB;AAC5D,SAAK,MAAM,MAAM;AAAA,EACrB;AAAA,EAEQ,YAAY,OAAO,MAAkB;AACzC,UAAM,EAAE,YAAY,KAAK,IAAI;AAC7B,SAAK,mBAAmB;AACxB,eAAW,MAAM;AACjB,MAAE,eAAe;AACjB,SAAK,WAAW,qBAAqB,CAAC;AACtC,UAAM,KAAK,WAAW,YAAY,CAAC;AACnC,SAAK,gBAAgB,EAAE;AACvB,QAAI,EAAE,UAAU,kBAAsB;AAClC,WAAK;AAAA,IACT,WAAW,EAAE,UAAU,kBAAuB;AAC1C,WAAK;AAAA,IACT;AAAA,EACJ;AAAA,EAEQ,UAAU,OAAO,MAAkB;AACvC,MAAE,eAAe;AACjB,SAAK,gBAAgB,EAAE;AACvB,QAAI,qBAAqB;AAAU,eAAS,gBAAgB;AAC5D,SAAK,WAAW,qBAAqB,CAAC;AACtC,UAAM,KAAK,WAAW,UAAU,CAAC;AACjC,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEQ,QAAQ,OAAO,MAAkB;AACrC,UAAM,EAAE,KAAK,IAAI;AACjB,SAAK,SAAS,EAAE;AAChB,SAAK,SAAS,EAAE;AAChB,UAAM,KAAK,WAAW,YAAY,CAAC;AACnC,SAAK,wBAAwB,YAAY,IAAI;AAC7C,SAAK,eAAe,EAAE;AAAA,EAC1B;AAAA,EAEQ,YAAY,CAAC,MAAkB;AACnC,QAAI,EAAE,UAAU;AAAG;AACnB,QAAI,KAAK,IAAI,EAAE,SAAS,IAAI,OAAO,KAAK,IAAI,EAAE,SAAS,IAAI;AAAK;AAChE,QAAI,KAAK,oBAAoB,KAAK,gBAAgB;AAC9C,MAAC,EAAE,cAA8B,mBAAmB;AACpD,WAAK,mBAAmB;AAAA,IAC5B;AACA,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI,EAAE,UAAU,eAAoB;AAChC,WAAK,oBAAoB,EAAE;AAC3B,WAAK,oBAAoB,EAAE;AAAA,IAC/B,WAAW,EAAE,UAAU,gBAAqB;AACxC,WAAK,oBAAoB,EAAE;AAC3B,WAAK,oBAAoB,EAAE;AAAA,IAC/B,WAAW,EAAE,UAAU,cAAmB;AACtC,WAAK,oBAAoB,EAAE;AAC3B,WAAK,oBAAoB,EAAE;AAAA,IAC/B;AAAA,EACJ;AAAA,EAEQ,aAAa,OAAO,UAAsB;AAC9C,SAAK,eAAe,MAAM,KAAK,MAAM,OAAO,EAAE,IAAI,YAAU,EAAE,IAAI,MAAM,YAAY,GAAG,KAAK,MAAM,MAAM,OAAO,GAAG,GAAG,KAAK,MAAM,MAAM,OAAO,EAAE,EAAE;AACjJ,UAAM,EAAE,cAAc,eAAe,IAAI;AACzC,SAAK,WAAW,MAAM,QAAQ;AAC9B,SAAK,WAAW,eAAe,KAAK;AAEpC,YAAQ,aAAa,QAAQ;AAAA,MACzB,KAAK;AACD,uBAAe,CAAC,IAAI,aAAa,CAAC,EAAE;AACpC,uBAAe,CAAC,IAAI,aAAa,CAAC,EAAE;AACpC;AAAA,MACJ;AACI,cAAM,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE;AAC/C,cAAM,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE;AAC/C,aAAK,yBAAyB,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE;AACzD,uBAAe,CAAC,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK;AAC9D,uBAAe,CAAC,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK;AAC9D;AAAA,IACR;AACA,UAAM,KAAK,WAAW,YAAY,KAAK;AAAA,EAC3C;AAAA,EAEQ,WAAW,OAAO,UAAsB;AAC5C,SAAK,eAAe,MAAM,KAAK,MAAM,OAAO,EAAE,IAAI,YAAU,EAAE,IAAI,MAAM,YAAY,GAAG,KAAK,MAAM,MAAM,OAAO,GAAG,GAAG,KAAK,MAAM,MAAM,OAAO,EAAE,EAAE;AACjJ,UAAM,EAAE,cAAc,eAAe,IAAI;AACzC,SAAK,WAAW,MAAM,QAAQ;AAC9B,SAAK,WAAW,eAAe,KAAK;AACpC,UAAM,KAAK,WAAW,UAAU,KAAK;AACrC,YAAQ,aAAa,QAAQ;AAAA,MACzB,KAAK;AACD;AAAA,MACJ,KAAK;AACD,uBAAe,CAAC,IAAI,aAAa,CAAC,EAAE;AACpC,uBAAe,CAAC,IAAI,aAAa,CAAC,EAAE;AACpC;AAAA,MACJ;AACI,cAAM,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE;AAC/C,cAAM,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE;AAC/C,aAAK,yBAAyB,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE;AACzD,uBAAe,CAAC,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK;AAC9D,uBAAe,CAAC,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK;AAC9D;AAAA,IACR;AAAA,EACJ;AAAA,EAEQ,cAAc,CAAC,UAAsB;AACzC,UAAM,eAAe;AACrB,SAAK,WAAW,MAAM,QAAQ;AAC9B,SAAK,eAAe,MAAM,KAAK,MAAM,OAAO,EAAE,IAAI,YAAU,EAAE,IAAI,MAAM,YAAY,GAAG,KAAK,MAAM,MAAM,OAAO,GAAG,GAAG,KAAK,MAAM,MAAM,OAAO,EAAE,EAAE;AAAA,EACrJ;AAAA,EAEQ,YAAY,CAAC,UAAsB;AACvC,QAAI,MAAM;AAAY,YAAM,eAAe;AAC3C,SAAK,eAAe,MAAM,KAAK,MAAM,OAAO,EAAE,IAAI,YAAU,EAAE,IAAI,MAAM,YAAY,GAAG,KAAK,MAAM,MAAM,OAAO,GAAG,GAAG,KAAK,MAAM,MAAM,OAAO,EAAE,EAAE;AACjJ,UAAM,EAAE,cAAc,eAAe,IAAI;AACzC,QAAI,EAAE,GAAG,EAAE,IAAI,aAAa,CAAC;AAE7B,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI,aAAa,SAAS,GAAG;AACzB,YAAM,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE;AAC/C,YAAM,KAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE;AAC/C,YAAM,oBAAoB,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE;AAErD,WAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK;AAC9C,WAAK,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK;AAE9C,YAAM,cAAc,aAAK,WAAW,GAAG,CAAC;AACxC,UAAIC,QAAO;AACX,UAAI,KAAK,iBAAiB;AACtB,QAAAA,QAAO,aAAK,KAAK,KAAK,iBAAiB,WAAW;AAAA,MACtD;AACA,WAAK,kBAAkB;AAEvB,YAAM,aAAa,KAAK,yBAAyB;AACjD,WAAK,yBAAyB;AAC9B,WAAK,SAAS;AACd,WAAK,SAAS;AACd,UAAIA,QAAO,IAAI,KAAK,IAAI,UAAU,GAAG;AACjC,YAAI,aAAa,UAAU,GAAG;AAC1B,eAAK,gBAAgB;AAAA,QACzB,OAAO;AACH,eAAK,gBAAgB;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AACA,YAAQ,aAAa,QAAQ;AAAA,MACzB,KAAK;AACD,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C;AAAA,MACJ,KAAK;AACD,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C;AAAA,MACJ,KAAK;AACD,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C;AAAA,IACR;AACA,mBAAe,CAAC,IAAI;AACpB,mBAAe,CAAC,IAAI;AAAA,EACxB;AAAA,EAEA,QAAQ,aAAqB;AACzB,UAAM,EAAE,MAAM,MAAM,IAAI;AACxB,UAAM,QAAQ,cAAc,KAAK,SAAS;AAC1C,QAAI,MAAM,MAAM;AACZ,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,WAAW;AAAG,aAAK,6BAA6B;AAC9D,UAAI,MAAM,IAAI,YAAY;AAAG,aAAK,4BAA4B;AAAM;AACpE,UAAI,MAAM,IAAI,SAAS;AAAG,aAAK,0BAA0B;AACzD,UAAI,MAAM,IAAI,WAAW;AAAG,aAAK,0BAA0B;AAAA,IAC/D;AAAA,EACJ;AAAA,EAEA,YAAY;AACR,UAAM,EAAE,KAAK,IAAI;AACjB,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,4BAA4B;AACjC,SAAK,yBAAyB;AAC9B,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,eAAe;AAAA,EACxB;AACJ;AA3VO,IAAM,kBAAN;AAgBH,cAhBS,iBAgBe,gBAAe,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAAW,aAAa,aAAa,YAAY;AA6UtI,IAAK,eAAL,kBAAKC,kBAAL;AACH,EAAAA,4BAAA,UAAO,KAAP;AACA,EAAAA,4BAAA,UAAO,KAAP;AACA,EAAAA,4BAAA,WAAQ,KAAR;AACA,EAAAA,4BAAA,YAAS,KAAT;AACA,EAAAA,4BAAA,cAAW,KAAX;AACA,EAAAA,4BAAA,aAAU,MAAV;AANQ,SAAAA;AAAA,GAAA;;;ACtUL,IAAe,iBAAf,MAA8B;AAAA,EAMjC,YAAqB,OAAwB;AAAxB;AAAA,EAIrB;AAAA,EANQ;AAAA,EAQR,UAAU;AAAA,EAEV;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,QAAQ;AACR,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,aAAa;AACb,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,eAAe;AACf,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,WAAW;AACX,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAI,eAAe;AACf,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEU,SAAS,OAAoB;AAEnC,QAAI,EAAE,IAAI,IAAI,MAAM;AACpB,UAAM,SAAS,MAAM,IAAI;AACzB,QAAI,MAAM,SAAS;AAAM,aAAO;AAAA,aACvB,MAAM,SAAS;AAAK,aAAO;AACpC,UAAM,QAAQ,EAAE,GAAG,MAAM,OAAO,IAAI;AACpC,SAAK,QAAQ,EAAE,GAAG,OAAO,OAAO,mBAAmB,GAAG,SAAS,MAAM;AAAA,EACzE;AAAA,EAEA,QAAQ,aAAqB;AACzB,QAAI,cAAc,KAAK,cAAc;AAAK,oBAAc,MAAO;AAC/D,SAAK,MAAM,QAAQ,WAAW;AAC9B,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,OAAO;AACP,UAAI,MAAM,qBAAqB,MAAM,iBAAiB;AAClD,aAAK,QAAQ;AAAA,MACjB,OAAO;AACH,cAAM,qBAAqB;AAC3B,cAAM,EAAE,mBAAmB,iBAAiB,OAAO,KAAK,QAAQ,IAAI;AACpE,YAAI,oBAAoB,iBAAiB;AACrC,gBAAMC,QAAO,CAAC,GAAW,GAAWC,OAAe,KAAK,IAAI,KAAKA;AACjE,gBAAM,YAAY,CAACA,OAAeA,KAAI,MAAM,IAAIA,KAAIA,KAAI,IAAI,KAAK,IAAI,KAAKA,KAAI,GAAG,CAAC,IAAI;AACtF,gBAAM,IAAI,UAAU,oBAAoB,eAAe;AACvD,gBAAM,MAAM,aAAK,KAAK,aAAK,OAAO,GAAG,MAAM,KAAK,IAAI,KAAK,CAAC;AAC1D,gBAAM,QAAQD,MAAK,MAAM,OAAO,IAAI,OAAO,CAAC;AAC5C,cAAI,MAAMA,MAAK,MAAM,KAAK,IAAI,KAAK,CAAC;AACpC,cAAI,MAAM;AAAM,mBAAO;AAAA,mBACd,MAAM;AAAK,mBAAO;AAC3B,gBAAM,UAAU,EAAE,KAAK,KAAK,MAAM;AAAA,QACtC,OAAO;AACH,iBAAO,OAAO,SAAS,GAAG;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAQA,SAAS;AACL,SAAK,MAAM,YAAY;AAAA,EAC3B;AAAA,EAEA,mBAAmB,OAAyC;AAAA,EAAE;AAAA,EAC9D,aAAa,OAAyC;AAAA,EAAE;AAAA,EACxD,UAAU,OAAsD;AAAA,EAAE;AAAA,EAClE,QAAQ,OAAsD;AAAA,EAAE;AAAA,EAChE,OAAO,gBAA8B,UAAkB,KAAM,UAA+B;AAAA,EAAE;AAAA,EAC9F,OAAO,gBAAgC,UAAkB,KAAY;AAAA,EAAE;AAAA,EAEvE,mBAAmB,OAA0B,aAAqD;AAC9F,SAAK,QAAQ,WAAW;AACxB,QAAI,OAAO,OAAO,KAAK,MAAM,IAAI,EAAE,KAAK,OAAK,KAAK,CAAC,KAAK,KAAK,gBAAgB,KAAK,SAAS;AACvF,WAAK,OAAO;AACZ,WAAK,MAAM,UAAU;AACrB,YAAM,UAAU,KAAK,aAAa,KAAK;AACvC,aAAO,OAAO,KAAK,OAAO,EAAE,SAAS,EAAE,QAAQ,QAAQ,IAAI;AAAA,IAC/D;AAAA,EACJ;AAAA,EAEA,OAAiB,yBAAyB,OAAqB,gBAA8B,gBAAsC;AAC/H,UAAM,MAAM,aAAK,WAAW,GAAG,GAAG,EAAE;AACpC,iBAAK,cAAc,KAAK,KAAK,cAAc;AAC3C,UAAM,SAAS,CAAC,aAAK,IAAI,KAAK,cAAc;AAC5C,WAAO,aAAK,IAAI,OAAO,GAAG,IAAI;AAAA,EAClC;AACJ;;;ACjJO,IAAM,0BAAN,MAA8B;AAAA,EAEzB,SAAS;AAAA,EACT,OAAO;AAAA,EACP,QAAQ;AAAA,EACR;AAAA,EAER,IAAI,QAAQ;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,MAAM,OAAe;AACrB,YAAQ,MAAM,OAAO,KAAK,EAAE;AAC5B,QAAI,SAAS,KAAK,QAAQ;AACtB,WAAK,SAAS;AACd,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA,EAEA,IAAI,MAAM;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,IAAI,OAAe;AACnB,WAAO,SAAS;AAAK,eAAS;AAC9B,WAAO,QAAQ;AAAG,eAAS;AAC3B,QAAI,SAAS,KAAK,MAAM;AACpB,WAAK,OAAO;AACZ,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,KAAK,OAAe;AACpB,WAAO,SAAS;AAAK,eAAS;AAC9B,WAAO,QAAQ;AAAG,eAAS;AAC3B,QAAI,SAAS,KAAK,OAAO;AACrB,WAAK,QAAQ;AACb,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA,EAEA,IAAI,WAAW;AACX,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO,KAAK,gBAAgB;AAAA,IACrC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,kBAAkB,KAAmB;AACjC,UAAM,EAAE,KAAK,OAAO,KAAK,IAAI,kBAAkB,GAAG;AAClD,SAAK,MAAM,MAAM,MAAM,KAAK;AAC5B,SAAK,QAAQ,QAAQ,MAAM,KAAK;AAChC,SAAK,OAAO,OAAO,MAAM,KAAK;AAC9B,SAAK,OAAO;AAAA,EAChB;AAAA,EAEQ,kBAAgC;AAEpC,UAAM,EAAE,OAAO,QAAQ,KAAK,IAAI;AAChC,WAAO,gBAAgB,OAAO,QAAQ,IAAI;AAAA,EAC9C;AACJ;AAEO,SAAS,gBAAgB,MAAc,OAAe,KAAa;AACtE,QAAM,UAAU,eAAS,SAAS,GAAG,IAAI;AACzC,QAAM,YAAY,eAAS,SAAS,KAAK,IAAI;AAC7C,QAAM,WAAW,eAAS,SAAS,IAAI,IAAI;AAE3C,QAAM,UAAU,KAAK,IAAI,QAAQ;AACjC,QAAM,UAAU,KAAK,IAAI,QAAQ;AACjC,QAAM,WAAW,KAAK,IAAI,SAAS;AACnC,QAAM,WAAW,KAAK,IAAI,SAAS;AACnC,QAAM,SAAS,KAAK,IAAI,OAAO;AAC/B,QAAM,SAAS,KAAK,IAAI,OAAO;AAE/B,QAAM,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC5D,QAAM,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC5D,QAAM,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC5D,QAAM,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC5D,QAAM,SAAS,aAAK,WAAW,oBAAoB,GAAG,GAAG,kBAAkB;AAC3E,SAAO,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC,CAAC;AACtE;AAEO,SAAS,kBAAkB,KAAmB;AAEjD,QAAM,SAAS,aAAK,WAAW,qBAAqB,GAAG,GAAG,kBAAkB;AAE5E,QAAM,CAAC,IAAI,IAAI,IAAI,EAAE,IAAI,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AAC5D,QAAM,SAAS,KAAK,KAAK,KAAK;AAC9B,QAAM,QAAQ;AAEd,MAAI,MAAM;AACV,MAAI,QAAQ;AACZ,MAAI,OAAO;AACX,MAAI,SAAS,CAAC,OAAO;AACjB,UAAM,IAAI,KAAK,MAAM,IAAI,EAAE;AAC3B,YAAQ,KAAK,KAAK;AAClB,WAAO;AAAA,EACX,WAAW,SAAS,OAAO;AACvB,UAAM,IAAI,KAAK,MAAM,IAAI,EAAE;AAC3B,YAAQ,CAAC,KAAK,KAAK;AACnB,WAAO;AAAA,EACX,OAAO;AACH,UAAM,MAAM,KAAK;AACjB,UAAM,MAAM,KAAK;AACjB,UAAM,MAAM,KAAK;AACjB,UAAM,MAAM,KAAK;AACjB,WAAO,KAAK,MAAM,KAAO,KAAK,KAAK,KAAK,KAAK,CAAC,MAAM,MAAM,MAAM,GAAG;AACnE,YAAQ,KAAK,KAAK,KAAO,MAAM;AAC/B,UAAM,KAAK,MAAM,KAAO,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,GAAG;AAAA,EACrE;AACA,SAAO,EAAE,KAAK,OAAO,KAAK;AAC9B;AAEO,SAAS,MAAM,GAAWE,MAAaC,MAAa;AACvD,MAAI,IAAID,MAAK;AACT,QAAIA;AAAA,EACR,WAAW,IAAIC,MAAK;AAChB,QAAIA;AAAA,EACR;AACA,SAAO;AACX;AAEO,SAAS,sBAAsB,KAAmB;AACrD,QAAM,KAAK,eAAS,OAAO,KAAK,IAAI,aAAK,IAAI,aAAK,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,IACzE,aAAK,WAAW,GAAG,GAAG,CAAC,IACvB,aAAK,WAAW,GAAG,GAAG,CAAC;AAE7B,QAAM,QAAQ,aAAK,MAAM,aAAK,OAAO,GAAG,IAAI,GAAG;AAE/C,eAAK,MAAM,IAAI,KAAK,KAAK;AACzB,eAAK,UAAU,IAAI,EAAE;AAErB,eAAK,MAAM,OAAO,IAAI,GAAG;AACzB,eAAK,UAAU,OAAO,KAAK;AAE3B,SAAO,aAAK;AAAA,IACR,aAAK,OAAO;AAAA,IACZ,aAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,EAC7F;AACJ;;;AChHO,IAAM,mBAAN,cAA8B,eAAe;AAAA,EAYvC,OAAO;AAAA,EACP,aAAa;AAAA,EACb,UAAU;AAAA,EACX;AAAA,EACS,cAAc,IAAI,wBAAwB;AAAA,EACnD,QAAsB,aAAK,OAAO;AAAA,EAClC;AAAA,EACA;AAAA,EAER,YAAY,OAAwB,QAAgC;AAChE,UAAM,KAAK;AACX,UAAM,EAAE,OAAO,KAAK,UAAAC,WAAU,OAAO,YAAY,IAAI,KAAK,SAAS,EAAE,GAAG,iBAAgB,eAAe,GAAG,OAAO;AACjH,UAAM,EAAE,YAAY,IAAI;AACxB,gBAAY,QAAQ;AACpB,gBAAY,MAAM;AAClB,SAAK,WAAWA;AAChB,SAAK,MAAM;AACX,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,IAAY,WAAW;AACnB,UAAM,EAAE,aAAa,OAAO,UAAAA,UAAS,IAAI;AACzC,UAAM,MAAM,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC1C,iBAAK,cAAc,KAAK,KAAK,YAAY,QAAQ;AACjD,iBAAK,IAAI,KAAK,KAAK,KAAK;AACxB,WAAO;AAAA,EACX;AAAA,EAES,UAAU,iBAAiB,OAA6B;AAC7D,UAAM,EAAE,MAAM,OAAO,aAAa,UAAAA,WAAU,IAAI,IAAI;AACpD,UAAM,EAAE,SAAS,IAAI;AACrB,SAAK,UAAU;AACf,WAAO,EAAE,MAAM,OAAO,UAAU,UAAAA,WAAU,YAAY,KAAK,GAAI,iBAAiB,EAAE,UAAU,KAAK,SAAS,IAAI,OAAW;AAAA,EAC7H;AAAA,EAES,aAAa,QAAiD;AACnE,SAAK,SAAS,eAAe,KAAK,QAAQ,MAAM;AAAA,EACpD;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,MAAM,UAAU,UAAU,OAAO,YAAY,UAAAA,UAAS,IAAI;AAClE,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAI,cAAc,QAAW;AACzB,WAAK,MAAM;AAAA,IACf;AACA,QAAI,OAAO;AACP,WAAK,QAAQ;AAAA,IACjB;AACA,QAAI,UAAU;AACV,WAAK,YAAY,kBAAkB,QAAQ;AAC3C,WAAK,YAAY,OAAO;AAAA,IAC5B;AACA,QAAIA,WAAU;AACV,WAAK,WAAWA;AAChB,UAAI,CAAC,SAAS,YAAY,UAAU;AAChC,cAAM,MAAM,aAAK,WAAW,GAAG,GAAG,CAACA,SAAQ;AAC3C,qBAAK,cAAc,KAAK,KAAK,QAAQ;AACrC,aAAK,QAAQ,aAAK,IAAI,KAAK,KAAK,QAAQ;AAAA,MAC5C;AAAA,IACJ;AACA,QAAI,YAAY,OAAO;AACnB,YAAM,EAAE,YAAY,IAAI;AACxB,UAAI,CAACA,WAAU;AACX,aAAK,WAAW,aAAK,SAAS,UAAU,KAAK;AAAA,MACjD;AACA,UAAI,CAAC,UAAU;AACX,cAAM,CAAC,GAAG,GAAG,CAAC,IAAI,aAAK,IAAI,aAAK,OAAO,GAAG,UAAU,KAAK;AACzD,cAAM,QAAQ,KAAK,MAAM,CAAC,GAAG,aAAK,IAAI,aAAK,WAAW,GAAG,CAAC,CAAC,CAAC;AAC5D,cAAM,MAAM,KAAK,MAAM,GAAG,CAAC;AAC3B,oBAAY,MAAM,MAAM,MAAM,KAAK;AACnC,oBAAY,QAAQ,QAAQ,MAAM,KAAK;AACvC,oBAAY,OAAO;AAAA,MACvB;AAAA,IACJ;AACA,SAAK,OAAO;AACZ,SAAK,UAAU;AAAA,EACnB;AAAA,EAES,QAAQ,QAAsB,QAAsB;AACzD,UAAM,EAAE,OAAO,IAAI;AACnB,SAAK,QAAQ;AACb,SAAK,WAAW,KAAK,IAAI,OAAO,aAAa,SAAS,KAAK,IAAI,eAAS,SAAS,KAAK,GAAG,IAAI,CAAC,CAAC;AAC/F,SAAK,UAAU;AAAA,EACnB;AAAA,EAES,SAAS;AACd,UAAM,EAAE,MAAM,YAAY,OAAO,aAAa,UAAAA,WAAU,KAAK,QAAQ,OAAO,IAAI;AAChF,UAAM,KAAK,KAAK,cAAc,KAAK,mBAAmB,KAAK;AAC3D,UAAM,KAAK,CAAC,KAAK,cAAc,KAAK,mBAAmB,KAAK;AAC5D,UAAM,KAAK,KAAK,cAAc,IAAI,KAAK,mBAAmB,KAAK,cAAc,IAAI,KAAK,eAAe;AACrG,UAAM,KAAK,KAAK,yBAAyB,IAAI,KAAK,mBAAmB,KAAK;AAC1E,UAAM,KAAK,KAAK,4BAA4B,IAAI,KAAK,mBAAmB,KAAK;AAE7E,gBAAY,OAAO;AACnB,UAAM,qBAAqB,MAAM,OAAO,qBAAqB;AAC7D,QAAI,MAAM,IAAI;AACV,kBAAY,SAAS,CAAC,KAAK;AAC3B,kBAAY,OAAO,CAAC,KAAK;AACzB,WAAK,UAAU;AAAA,IACnB;AAEA,UAAM,WAAW,KAAK,IAAM,KAAK,KAAK,MAAO,MAAO,CAAC,IAAI;AACzD,UAAM,iBAAiBA,YAAW,WAAW,aAAa,OAAO,iBAAiB;AAClF,QAAI,IAAI;AACJ,WAAK,YAAY,KAAK;AACtB,WAAK,UAAU;AAAA,IACnB,WAAW,MAAM,IAAI;AACjB,YAAM,gBAAgB,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,KAAK,gBAAgB,CAAC,KAAK,gBAAgB,CAAC,GAAG,YAAY,QAAQ;AAC3I,WAAK,QAAQ,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,aAAa;AACzD,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAES,aAAa,OAAuD;AACzE,UAAM,EAAE,OAAO,aAAa,UAAU,IAAI,IAAI;AAC9C,UAAM,UAA8B,CAAC;AACrC,QAAI,CAAC,SAAS,CAAC,aAAK,YAAY,MAAM,UAAU,QAAQ,GAAG;AACvD,cAAQ,WAAW;AAAA,IACvB;AACA,QAAI,CAAC,SAAS,MAAM,aAAa,YAAY,UAAU;AACnD,cAAQ,WAAW,YAAY;AAAA,IACnC;AACA,QAAI,CAAC,SAAS,MAAM,UAAU,OAAO;AACjC,cAAQ,QAAQ;AAAA,IACpB;AACA,QAAI,CAAC,SAAS,MAAM,QAAQ,KAAK;AAC7B,cAAQ,MAAM;AAAA,IAClB;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AACJ;AAjJO,IAAM,kBAAN;AACH,cADS,iBACO,iBAAgB;AAAA,EAC5B,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,EACf,UAAU;AAAA,EACV,OAAO;AAAA,EACP,KAAK;AAAA,EACL,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,aAAa;AACjB;;;AC5BG,IAAM,mBAAN,cAA8B,eAAe;AAAA,EASvC,OAAO;AAAA,EACP,aAAa;AAAA,EACb,UAAU;AAAA,EACX;AAAA,EACA;AAAA,EACA,cAAc,IAAI,wBAAwB;AAAA,EAC1C;AAAA,EACA,qBAAqB;AAAA,EAE7B,YAAY,OAAwB,QAAgC;AAChE,UAAM,KAAK;AACX,UAAM,EAAE,UAAU,UAAU,YAAY,IAAI,KAAK,SAAS,EAAE,GAAG,iBAAgB,eAAe,GAAG,OAAO;AACxG,SAAK,WAAW;AAChB,SAAK,YAAY,kBAAkB,QAAQ;AAC3C,SAAK,MAAM;AAAA,EACf;AAAA,EAES,YAAkC;AACvC,UAAM,EAAE,MAAM,UAAU,aAAa,IAAI,IAAI;AAC7C,UAAM,EAAE,SAAS,IAAI;AACrB,SAAK,UAAU;AACf,WAAO,EAAE,MAAM,UAAU,UAAU,WAAW,IAAI;AAAA,EACtD;AAAA,EAES,aAAa,QAAiD;AACnE,SAAK,SAAS,eAAe,KAAK,QAAQ,MAAM;AAChD,QAAI,KAAK,MAAM,aAAa,MAAM;AAC9B,WAAK,MAAM,iBAAiB,KAAK,OAAO;AAAA,IAC5C;AAAA,EACJ;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,MAAM,UAAU,UAAU,WAAW,UAAAC,WAAU,WAAW,IAAI;AACtE,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAI,UAAU;AACV,WAAK,WAAW;AAAA,IACpB;AACA,QAAI,UAAU;AACV,WAAK,YAAY,kBAAkB,QAAQ;AAAA,IAC/C;AACA,QAAI,WAAW;AACX,WAAK,MAAM;AAAA,IACf,WAAW,cAAcA,WAAU;AAC/B,WAAK,MAAM,iBAAgB,mBAAmB,YAAYA,SAAQ;AAAA,IACtE;AACA,SAAK,UAAU;AACf,SAAK,MAAM,iBAAiB,KAAK,OAAO;AACxC,SAAK,MAAM,YAAY;AAAA,EAC3B;AAAA,EAES,QAAQ,QAAsB,QAAsB;AACzD,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,MAAM,aAAK,WAAW,GAAG,GAAG,MAAM;AACxC,iBAAK,cAAc,KAAK,KAAK,YAAY,QAAQ;AACjD,SAAK,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AACnD,SAAK,YAAY,QAAQ;AACzB,SAAK,YAAY,MAAM;AACvB,SAAK,YAAY,OAAO;AACxB,SAAK,MAAM,SAAS;AACpB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK,MAAM,uBAAuB,KAAK,KAAK,MAAM,YAAY,KAAK,KAAK;AAAA,EACnF;AAAA,EAEA,MAAM,QAAQ,OAA+C;AACzD,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EAES,OAAO,gBAA8B,UAAkB,KAAM,UAAuB;AACzF,UAAM,EAAE,aAAa,SAAS,IAAI;AAClC,QAAI,SAAS;AACT,UAAI,cAAc,YAAY;AAC9B,UAAI,YAAY,YAAY;AAC5B,UAAI,UAAU;AACV,cAAM,EAAE,OAAO,IAAI,IAAI,kBAAkB,QAAQ;AACjD,sBAAc,QAAQ,KAAK,KAAK;AAChC,oBAAY,MAAM,KAAK,KAAK;AAAA,MAChC;AAEA,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,aAAa,KAAK,UAAU;AAAA,QAC3E,OAAO,EAAE,KAAK,aAAK,MAAM,QAAQ,GAAG,OAAO,YAAY,OAAO,KAAK,YAAY,IAAI;AAAA,MACvF,CAAC;AAAA,IACL,OACK;AACD,WAAK,WAAW;AAChB,UAAI,UAAU;AACV,aAAK,YAAY,kBAAkB,QAAQ;AAAA,MAC/C;AACA,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAES,OAAO,gBAAgC,UAAkB,KAAY;AAC1E,UAAM,EAAE,aAAa,UAAU,IAAI,IAAI;AACvC,QAAI,SAAS;AACT,YAAMC,QAAO,KAAK,IAAI,eAAe,SAAS,KAAK,IAAI,eAAS,SAAS,GAAG,IAAI,CAAC,GAAG,eAAe,MAAM;AACzG,YAAM,iBAAiB,aAAK,OAAO;AACnC,mBAAK,IAAI,gBAAgB,aAAK,cAAc,gBAAgB,aAAK,WAAW,GAAG,GAAGA,KAAI,GAAG,YAAY,QAAQ,GAAG,eAAe,MAAM;AACrI,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,YAAY,OAAO,KAAK,YAAY,MAAM,KAAK;AAAA,QAC9F,OAAO,EAAE,KAAK,aAAK,MAAM,QAAQ,GAAG,OAAO,YAAY,OAAO,KAAK,YAAY,IAAI;AAAA,MACvF,CAAC;AAAA,IACL,OAAO;AACH,YAAMA,QAAO,eAAe,SAAS,KAAK,IAAI,eAAS,SAAS,GAAG,IAAI,CAAC;AACxE,WAAK,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,GAAG,GAAGA,KAAI,GAAG,YAAY,QAAQ,GAAG,eAAe,MAAM;AACnJ,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAES,SAAS;AACd,UAAM,EAAE,MAAM,SAAS,QAAQ,UAAU,aAAa,UAAU,aAAa,IAAI;AAEjF,QAAI,cAAc;AACd,WAAK,WAAW,aAAK,MAAM,aAAa,GAAG;AAC3C,kBAAY,QAAQ,aAAa;AACjC,kBAAY,MAAM,aAAa;AAC/B,WAAK,UAAU;AACf;AAAA,IACJ;AAGA,QAAI,KAAK,CAAC,KAAK,cAAc,KAAK,mBAAmB,KAAK,mBAAmB,KAAK,mBAAmB,KAAK;AAC1G,QAAI,KAAK,CAAC,KAAK,cAAc,KAAK,mBAAmB,KAAK,mBAAmB,KAAK,mBAAmB,KAAK;AAC1G,UAAM,KAAM,KAAK,iBAAiB,KAAK,OAAO,eAAiB,KAAK,eAAe,OAAQ,WAAW,KAAK,cAAc,OAAO;AAChI,UAAM,KAAK,KAAK;AAChB,UAAM,QAAQ,WAAW,IAAI,KAAK,eAAe,KAAK;AACtD,UAAM,CAAC,OAAO,KAAK,IAAI;AAEvB,QAAI,CAAC,KAAK,oBAAoB;AAC1B,WAAK,qBAAqB,KAAK,OAAO,KAAK,OAAO,KAAK;AAAA,IAC3D;AAEA,QAAI,IAAI;AACJ,kBAAY,QAAQ,KAAK;AACzB,WAAK,UAAU;AAAA,IACnB;AACA,QAAI,MAAM,MAAM,MAAM,MAAM;AACxB,UAAI,QAAQ,GAAG;AACX,cAAM,KAAK,IAAK,OAAO;AACvB,cAAM,QAAQ,CAAC,OAAO;AACtB,cAAM,QAAQ,OAAO;AACrB,aAAK,OAAO;AAAA,MAChB;AACA,YAAMC,SAAQ,KAAK,MAAM;AACzB,YAAM,WAAW,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,KAAKA,SAAQ,IAAI,KAAKA,QAAO,EAAE,GAAG,YAAY,QAAQ;AACzH,WAAK,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,UAAU,QAAQ;AAC1D,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAES,aAAa,OAAuD;AACzE,UAAM,UAA8B,CAAC;AACrC,QAAI,CAAC,SAAS,MAAM,aAAa,KAAK,UAAU;AAC5C,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,QAAI,CAAC,SAAS,MAAM,aAAa,KAAK,YAAY,UAAU;AACxD,cAAQ,WAAW,KAAK,YAAY;AAAA,IACxC;AACA,QAAI,CAAC,SAAS,MAAM,QAAQ,KAAK,KAAK;AAClC,cAAQ,MAAM,KAAK;AAAA,IACvB;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAGA,OAAO,mBAAmB,gBAAwB,kBAA0B;AACxE,WAAO,KAAK,IAAI,KAAK,gBAAgB,IAAI,KAAK,IAAM,KAAK,KAAK,MAAO,iBAAkB,CAAC,IAAI;AAAA,EAChG;AACJ;AAzLO,IAAM,kBAAN;AACH,cADS,iBACO,iBAAgB;AAAA,EAC5B,UAAU,CAAC,GAAG,GAAG,CAAC;AAAA,EAClB,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,EACrB,aAAa;AAAA,EACb,cAAc;AAAA,EACd,gBAAgB;AACpB;;;ACcG,IAAM,oBAAN,cAA+B,eAAe;AAAA,EAgCjD,YAAqB,eAA8B,OAAwB,QAAiC;AACxG,UAAM,KAAK;AADM;AAEjB,SAAK,SAAS,EAAE,GAAG,kBAAiB,eAAe,GAAG,OAAO;AAC7D,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,EAAE,OAAO,KAAK,YAAY,IAAI,KAAK;AACzC,gBAAY,QAAQ;AACpB,gBAAY,MAAM;AAClB,SAAK,MAAM;AAAA,EACf;AAAA,EA1BS,OAAe;AAAA,EACf,aAAa;AAAA,EACb,UAAU;AAAA,EACT;AAAA,EACA,eAAuB;AAAA,EACzB;AAAA,EACA,WAAyB,aAAK,OAAO;AAAA,EAC5B,cAAc,IAAI,wBAAwB;AAAA,EACnD;AAAA,EACA;AAAA,EAES,iBAAiB;AAAA,EAC1B,uBAA+B;AAAA,EAC/B,aAAqB;AAAA,EACrB,oBAA8C;AAAA,EAC9C,cAAc;AAAA,EACd,qBAAqB;AAAA,EAYpB,YAAkC;AACvC,UAAM,EAAE,MAAM,UAAU,aAAa,IAAI,IAAI;AAC7C,UAAM,EAAE,SAAS,IAAI;AACrB,SAAK,UAAU;AACf,WAAO,EAAE,MAAM,UAAU,UAAU,YAAY,IAAI;AAAA,EACvD;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,MAAM,UAAU,UAAU,WAAW,IAAI;AACjD,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAI,UAAU;AACV,WAAK,WAAW;AAAA,IACpB;AACA,QAAI,UAAU;AACV,WAAK,YAAY,kBAAkB,QAAQ;AAC3C,WAAK,YAAY,OAAO;AAAA,IAC5B;AACA,QAAI,cAAc,QAAW;AACzB,WAAK,MAAM;AAAA,IACf;AACA,SAAK,UAAU;AACf,SAAK,MAAM,YAAY;AACvB,SAAK,MAAM,iBAAiB;AAAA,EAChC;AAAA,EAES,QAAQ,QAAsB,QAAsB;AACzD,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,cAAc;AACpB,UAAMC,YAAW,KAAK,IAAI,aAAa,SAAS,KAAK,IAAI,eAAS,SAAS,KAAK,GAAG,IAAI,CAAC,CAAC;AACzF,UAAM,MAAM,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC1C,iBAAK,cAAc,KAAK,KAAK,YAAY,QAAQ;AACjD,SAAK,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AAAA,EACvD;AAAA,EAES,aAAa,QAAkD;AACpE,SAAK,SAAS,eAAe,KAAK,QAAQ,MAAM;AAAA,EACpD;AAAA,EAES,OAAO,gBAA8B,UAAkB,KAAM,UAAuB;AACzF,UAAM,EAAE,aAAa,SAAS,IAAI;AAClC,QAAI,SAAS;AACT,UAAI,cAAc,YAAY;AAC9B,UAAI,YAAY,YAAY;AAC5B,UAAI,UAAU;AACV,cAAM,EAAE,OAAO,IAAI,IAAI,kBAAkB,QAAQ;AACjD,sBAAc,QAAQ,KAAK,KAAK;AAChC,oBAAY,MAAM,KAAK,KAAK;AAAA,MAChC;AAEA,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,aAAa,KAAK,UAAU;AAAA,QAC3E,OAAO,EAAE,KAAK,aAAK,MAAM,QAAQ,GAAG,OAAO,YAAY,OAAO,KAAK,YAAY,IAAI;AAAA,MACvF,CAAC;AAAA,IACL,OACK;AACD,WAAK,WAAW;AAChB,UAAI,UAAU;AACV,aAAK,YAAY,kBAAkB,QAAQ;AAAA,MAC/C;AACA,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAES,OAAO,gBAAgC,UAAkB,KAAY;AAC1E,UAAM,EAAE,aAAa,UAAU,IAAI,IAAI;AACvC,QAAI,SAAS;AACT,YAAMC,QAAO,KAAK,IAAI,eAAe,SAAS,KAAK,IAAI,eAAS,SAAS,GAAG,IAAI,CAAC,GAAG,eAAe,MAAM;AACzG,YAAM,iBAAiB,aAAK,OAAO;AACnC,mBAAK,IAAI,gBAAgB,aAAK,cAAc,gBAAgB,aAAK,WAAW,GAAG,GAAGA,KAAI,GAAG,YAAY,QAAQ,GAAG,eAAe,MAAM;AACrI,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,YAAY,OAAO,KAAK,YAAY,MAAM,KAAK;AAAA,QAC9F,OAAO,EAAE,KAAK,aAAK,MAAM,QAAQ,GAAG,OAAO,YAAY,OAAO,KAAK,YAAY,IAAI;AAAA,MACvF,CAAC;AAAA,IACL,OAAO;AACH,YAAMA,QAAO,eAAe,SAAS,KAAK,IAAI,eAAS,SAAS,GAAG,IAAI,CAAC;AACxE,WAAK,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,GAAG,GAAGA,KAAI,GAAG,YAAY,QAAQ,GAAG,eAAe,MAAM;AACnJ,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAEU,YAAY;AAClB,UAAM,EAAE,QAAQ,mBAAmB,UAAU,IAAI,IAAI;AACrD,UAAM,EAAE,wBAAwB,IAAI;AACpC,QAAIC,SAAQ;AACZ,QAAI,2BAA2B,mBAAmB;AAC9C,MAAAA,SAAQ,aAAK,KAAK,UAAU,iBAAiB,IAAI,KAAK,IAAM,KAAK,KAAK,MAAO,MAAO,CAAC,IAAI;AACzF,YAAM,qBAAqB,KAAK,MAAM,WAAW,IAAI,MAAMA,SAAQ,GAAG,wBAAwB,KAAK,wBAAwB,GAAG;AAC9H,YAAM,mBAAmB,MAAMA,QAAO,wBAAwB,KAAK,wBAAwB,GAAG;AAC9F,YAAM,wBAAwB,MAAMA,QAAO,wBAAwB,KAAK,wBAAwB,GAAG;AACnG,YAAM,gBAAgB,MAAMA,QAAO,wBAAwB,KAAK,wBAAwB,GAAG;AAC3F,aAAO;AAAA,QACH;AAAA,QAAoB;AAAA,QAAkB;AAAA,QAAuB;AAAA,QAAe,OAAO;AAAA,MACvF;AAAA,IACJ;AACA,WAAO;AAAA,MACH,oBAAoB,KAAK,MAAM,WAAW,IAAIA;AAAA,MAAO,kBAAkBA;AAAA,MAAO,uBAAuBA;AAAA,MAAO,eAAeA;AAAA,MAAO,OAAAA;AAAA,IACtI;AAAA,EACJ;AAAA,EAEU,qBAA4C;AAClD,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,OAAO,CAAC,KAAK,yBAAyB,IAAI,KAAK,mBAAmB,KAAK;AAC7E,UAAM,OAAO,CAAC,KAAK,4BAA4B,IAAI,KAAK,mBAAmB,KAAK;AAChF,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,cAAc,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAExF,UAAM,EAAE,oBAAoB,kBAAkB,uBAAuB,eAAe,OAAAA,OAAM,IAAI,KAAK,UAAU;AAC7G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,cAAc,qBAAuB,KAAK,eAAe;AACvG,UAAM,KAAK,cAAc,SAAS;AAClC,UAAM,KAAK,cAAc,SAAS;AAClC,WAAO,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY;AAAA,EAC7C;AAAA,EAES,SAAe;AACpB,UAAM,EAAE,YAAY,aAAa,QAAQ,QAAQ,OAAO,SAAS,aAAa,IAAI;AAClF,QAAI,cAAc;AACd,WAAK,WAAW,aAAK,MAAM,aAAa,GAAG;AAC3C,kBAAY,QAAQ,aAAa;AACjC,kBAAY,MAAM,aAAa;AAC/B,WAAK,UAAU;AACf;AAAA,IACJ;AACA,SAAK,aAAa,YAAY,IAAI;AAClC,QAAI,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,IAAI,KAAK,mBAAmB;AAClE,QAAI,CAAC,KAAK,oBAAoB;AAC1B,WAAK,qBAAqB,KAAK,OAAO,KAAK,OAAO,KAAK,OAAO,KAAK;AAAA,IACvE;AACA,gBAAY,OAAO;AACnB,UAAM,CAAC,OAAO,KAAK,IAAI;AAEvB,QAAI,MAAM,IAAI;AACV,YAAM,sBAAsB,cAAc,MAAM,KAAK,OAAO,OAAO,qBAAqB;AACxF,kBAAY,SAAS,KAAK;AAC1B,kBAAY,OAAO,KAAK;AACxB,UAAI,SAAS,eAAe,MAAM,QAAQ;AACtC,cAAM,EAAE,QAAQ,QAAQ,UAAAF,UAAS,IAAI;AACrC,cAAM,MAAM,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC1C,qBAAK,IAAI,KAAK,KAAK,MAAM;AACzB,qBAAK,cAAc,KAAK,KAAK,YAAY,QAAQ;AACjD,aAAK,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AAAA,MACvD;AACA,WAAK,UAAU;AAAA,IACnB;AAEA,QAAI,MAAM,MAAM,IAAI;AAChB,UAAI,MAAM,GAAG;AACT,cAAM,QAAQ,KAAK;AACnB,cAAM,CAAC,QAAQ,KAAK;AAAA,MACxB;AACA,YAAM,iBAAiB,aAAa,OAAO,iBAAiB;AAC5D,YAAM,gBAAgB,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,KAAK,gBAAgB,CAAC,KAAK,gBAAgB,KAAK,cAAc,GAAG,YAAY,QAAQ;AAC7J,WAAK,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,UAAU,aAAa;AACpE,UAAI,SAAS,MAAM,QAAQ;AACvB,aAAK,SAAS,MAAM,QAAQ,MAAM,MAAM;AAAA,MAC5C;AACA,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAES,aAAa,OAAuD;AACzE,UAAM,UAA8B,CAAC;AACrC,UAAM,EAAE,UAAU,aAAa,OAAO,IAAI,IAAI;AAC9C,QAAI,CAAC,SAAS,CAAC,aAAK,YAAY,MAAM,UAAU,QAAQ,GAAG;AACvD,cAAQ,WAAW;AAAA,IACvB;AACA,QAAI,CAAC,SAAS,CAAC,aAAK,YAAY,MAAM,UAAU,YAAY,QAAQ,GAAG;AACnE,cAAQ,WAAW,YAAY;AAAA,IACnC;AACA,QAAI,CAAC,SAAU,SAAS,MAAM,SAAS,aAAK,YAAY,MAAM,OAAO,OAAO,MAAM,GAAI;AAClF,cAAQ,QAAQ,OAAO;AAAA,IAC3B;AACA,QAAI,CAAC,SAAS,MAAM,QAAQ,KAAK;AAC7B,cAAQ,MAAM;AAAA,IAClB;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAe,mBAAmB,OAAkC;AAChE,UAAM,EAAE,eAAe,YAAY,IAAI;AACvC,QAAI,eAAe;AACf,YAAM,UAAU,MAAM;AACtB,UAAI,UAAU,aAAa;AACvB,cAAM,SAAS,MAAM,cAAc,KAAK,MAAM,SAAS,MAAM,OAAO;AACpE,YAAI,QAAQ;AACR,eAAK,SAAS,OAAO,UAAU,IAAI;AAAA,QACvC,OAAO;AACH,eAAK,WAAW,IAAI;AAAA,QACxB;AAAA,MACJ,OAAO;AACH,aAAK,WAAW,KAAK;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAe,aAAa,OAAkC;AAC1D,UAAM,EAAE,cAAc,eAAe,aAAa,IAAI;AACtD,QAAI,aAAa,UAAU,gBAAgB,eAAe;AACtD,YAAM,IAAI,aAAa,SAAS,IAAI,KAAK,OAAO,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK,CAAC,IAAI,aAAa,CAAC,EAAE;AAC9G,YAAM,IAAI,aAAa,SAAS,IAAI,KAAK,OAAO,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK,CAAC,IAAI,aAAa,CAAC,EAAE;AAC9G,YAAM,SAAS,MAAM,cAAc,KAAK,GAAG,CAAC;AAC5C,UAAI,QAAQ;AACR,aAAK,SAAS,OAAO,UAAU,IAAI;AAAA,MACvC,OAAO;AACH,aAAK,WAAW,IAAI;AAAA,MACxB;AAAA,IACJ,OAAO;AACH,WAAK,WAAW,KAAK;AAAA,IACzB;AAAA,EACJ;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK,MAAM,uBAAuB,KAAK,KAAK,MAAM,YAAY,KAAK,KAAK;AAAA,EACnF;AAAA,EAEA,MAAM,QAAQ,OAA+C;AACzD,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EAEA,MAAM,UAAU,OAA+C;AAC3D,UAAM,EAAE,cAAc,eAAe,eAAe,IAAI;AAExD,UAAM,YAAY,KAAK,aAAa,KAAK;AAEzC,QAAI,iBAAiB,UAAa,YAAY,KAAK,OAAO,aAAa,KAAK,aAAa;AACrF;AAAA,IACJ;AACA,SAAK,cAAc;AACnB,UAAM,kBAAkB,OAAO,GAAW,MAAc;AACpD,YAAM,SAAS,MAAM,cAAc,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAC9D,UAAI,QAAQ;AACR,aAAK,oBAAoB,OAAO;AAChC,aAAK,uBAAuB,YAAY,IAAI;AAAA,MAChD,WAAW,iBAAiB,WAAW;AACnC,aAAK,oBAAoB;AACzB,aAAK,uBAAuB,YAAY,IAAI;AAAA,MAChD;AAAA,IACJ;AAEA,QAAI,aAAa,KAAK,GAAG;AACrB,UAAI,aAAa,SAAS,GAAG;AACzB,cAAM,gBAAgB,KAAK,OAAO,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK,CAAC,GAAG,KAAK,OAAO,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;AAAA,MAC1I;AAAA,IACJ,OAAO;AACH,YAAM,gBAAgB,MAAM,SAAS,MAAM,OAAO;AAAA,IACtD;AACA,SAAK,cAAc;AAAA,EAEvB;AAAA,EAEQ,WAAW,QAAiB;AAChC,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,OAAO;AACP,WAAK,SAAS,MAAM,QAAQ,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EAEQ,SAAS,QAAsB,QAAiB;AACpD,UAAM,EAAE,UAAU,YAAY,IAAI;AAClC,UAAMA,YAAW,aAAK,SAAS,QAAQ,QAAQ;AAC/C,UAAM,SAAS,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC7C,iBAAK,cAAc,QAAQ,QAAQ,YAAY,QAAQ;AACvD,iBAAK,IAAI,QAAQ,QAAQ,MAAM;AAC/B,iBAAK,IAAI,QAAQ,UAAU,MAAM;AACjC,UAAM,SAAS,aAAK,OAAO,aAAK,OAAO,GAAG,YAAY,QAAQ;AAC9D,iBAAK,cAAc,QAAQ,QAAQ,MAAM;AACzC,SAAK,QAAQ,EAAE,QAAQ,QAAQ,UAAAA,WAAU,OAAO;AAAA,EACpD;AACJ;AA7TO,IAAM,mBAAN;AACH,cADS,kBACO,iBAAgB;AAAA,EAC5B,UAAU,CAAC,GAAG,GAAG,CAAC;AAAA,EAClB,OAAO;AAAA,EACP,KAAK;AAAA,EACL,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,yBAAyB,EAAE,KAAK,KAAK,KAAK,IAAK;AACnD;AAmTJ,SAAS,aAAa,OAAqD;AACvE,SAAO,gBAAgB,cAAc,iBAAiB;AAC1D;AAEO,IAAM,yBAAN,cAAqC,iBAAiB;AAAA,EAGzD,YAAqB,eAA8B,OAAwB,QAAiC;AACxG,UAAM,eAAe,KAAK;AADT;AAEjB,SAAK;AACL,SAAK,eAAe;AAAA,EACxB;AAAA,EANS,OAAO;AAAA,EAQP,qBAA4C;AACjD,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,OAAO,CAAC,KAAK,yBAAyB,IAAI,KAAK,mBAAmB,KAAK;AAC7E,UAAM,OAAO,CAAC,KAAK,4BAA4B,IAAI,KAAK,mBAAmB,KAAK;AAChF,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,cAAc,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAExF,UAAM,EAAE,oBAAoB,kBAAkB,uBAAuB,eAAe,OAAAE,OAAM,IAAI,KAAK,UAAU;AAC7G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,cAAc,qBAAuB,KAAK,eAAe;AACvG,UAAM,KAAK,cAAc,SAAS;AAClC,UAAM,KAAK,cAAc,SAAS;AAElC,WAAO,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY;AAAA,EAC7C;AACJ;AAEO,IAAM,wBAAN,cAAoC,iBAAiB;AAAA,EAGxD,YAAqB,eAA8B,OAAwB,QAAiC;AACxG,UAAM,eAAe,KAAK;AADT;AAEjB,SAAK;AACL,SAAK,eAAe;AAAA,EACxB;AAAA,EANS,OAAO;AAAA,EAQP,qBAA4C;AACjD,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,OAAO,CAAC,KAAK,yBAAyB,IAAI,KAAK,mBAAmB,KAAK;AAC7E,UAAM,OAAO,CAAC,KAAK,4BAA4B,IAAI,KAAK,mBAAmB,KAAK;AAChF,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,cAAc,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAExF,UAAM,EAAE,oBAAoB,kBAAkB,uBAAuB,eAAe,OAAAA,OAAM,IAAI,KAAK,UAAU;AAC7G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,cAAc,qBAAuB,KAAK,eAAe;AACvG,UAAM,KAAK,cAAc,SAAS;AAClC,UAAM,KAAK,cAAc,SAAS;AAElC,WAAO,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY;AAAA,EAC7C;AACJ;AAEO,IAAM,0BAAN,cAAsC,iBAAiB;AAAA,EAG1D,YAAqB,eAA8B,OAAwB,QAAiC;AACxG,UAAM,eAAe,KAAK;AADT;AAEjB,SAAK;AACL,SAAK,eAAe;AAAA,EACxB;AAAA,EANS,OAAO;AAAA,EAQP,qBAA4C;AACjD,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,OAAO,CAAC,KAAK,yBAAyB,IAAI,KAAK,mBAAmB,KAAK;AAC7E,UAAM,OAAO,CAAC,KAAK,4BAA4B,IAAI,KAAK,mBAAmB,KAAK;AAChF,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,cAAc,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAExF,UAAM,EAAE,oBAAoB,kBAAkB,uBAAuB,eAAe,OAAAA,OAAM,IAAI,KAAK,UAAU;AAC7G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,cAAc,qBAAuB,KAAK,eAAe;AACvG,UAAM,KAAK,cAAc,SAAS;AAClC,UAAM,KAAK,cAAc,SAAS;AAElC,WAAO,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY;AAAA,EAC7C;AACJ;;;ACzaO,IAAM,sBAAN,cAAiC,eAAe;AAAA,EAS1C,OAAO;AAAA,EACP,aAAa;AAAA,EACb,UAAU;AAAA,EACX;AAAA,EACA,WAAyB,aAAK,OAAO;AAAA,EAC5B,cAAc,IAAI,wBAAwB;AAAA,EACnD;AAAA,EAER,YAAY,OAAwB,QAAmC;AACnE,UAAM,KAAK;AACX,SAAK,SAAS,EAAE,GAAG,oBAAmB,eAAe,GAAG,OAAO;AAC/D,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,EAAE,OAAO,KAAK,YAAY,IAAI,KAAK;AACzC,gBAAY,QAAQ;AACpB,gBAAY,MAAM;AAClB,SAAK,MAAM;AAAA,EACf;AAAA,EAES,YAAkC;AACvC,UAAM,EAAE,MAAM,UAAU,aAAa,IAAI,IAAI;AAC7C,UAAM,EAAE,SAAS,IAAI;AACrB,SAAK,UAAU;AACf,WAAO,EAAE,MAAM,UAAU,UAAU,YAAY,IAAI;AAAA,EACvD;AAAA,EAES,aAAa,QAAoD;AACtE,SAAK,SAAS,eAAe,KAAK,QAAQ,MAAM;AAAA,EACpD;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,MAAM,UAAU,UAAU,WAAW,IAAI;AACjD,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAI,UAAU;AACV,WAAK,WAAW;AAAA,IACpB;AACA,QAAI,UAAU;AACV,WAAK,YAAY,kBAAkB,QAAQ;AAC3C,WAAK,YAAY,OAAO;AAAA,IAC5B;AACA,QAAI,cAAc,QAAW;AACzB,WAAK,MAAM;AAAA,IACf;AACA,SAAK,UAAU;AACf,SAAK,MAAM,YAAY;AACvB,SAAK,MAAM,iBAAiB;AAC5B,SAAK,OAAO;AAAA,EAChB;AAAA,EAES,QAAQ,QAAsB,QAAsB;AACzD,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,cAAc;AACpB,UAAMC,YAAW,KAAK,IAAI,aAAa,SAAS,KAAK,IAAI,eAAS,SAAS,KAAK,GAAG,IAAI,CAAC,CAAC;AACzF,UAAM,MAAM,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC1C,iBAAK,cAAc,KAAK,KAAK,YAAY,QAAQ;AACjD,SAAK,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AAAA,EACvD;AAAA,EAES,OAAO,gBAA8B,UAAkB,KAAM,UAAuB;AACzF,UAAM,EAAE,aAAa,SAAS,IAAI;AAClC,QAAI,SAAS;AACT,UAAI,cAAc,YAAY;AAC9B,UAAI,YAAY,YAAY;AAC5B,UAAI,UAAU;AACV,cAAM,EAAE,OAAO,IAAI,IAAI,kBAAkB,QAAQ;AACjD,sBAAc,QAAQ,KAAK,KAAK;AAChC,oBAAY,MAAM,KAAK,KAAK;AAAA,MAChC;AAEA,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,aAAa,KAAK,UAAU;AAAA,QAC3E,OAAO,EAAE,KAAK,aAAK,MAAM,QAAQ,GAAG,OAAO,YAAY,OAAO,KAAK,YAAY,IAAI;AAAA,MACvF,CAAC;AAAA,IACL,OACK;AACD,WAAK,WAAW;AAChB,UAAI,UAAU;AACV,aAAK,YAAY,kBAAkB,QAAQ;AAAA,MAC/C;AACA,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAES,SAAe;AACpB,UAAM,EAAE,MAAM,aAAa,QAAQ,QAAQ,KAAK,aAAa,IAAI;AACjE,QAAI,cAAc;AACd,WAAK,WAAW,aAAK,MAAM,aAAa,GAAG;AAC3C,kBAAY,QAAQ,aAAa;AACjC,kBAAY,MAAM,aAAa;AAC/B,WAAK,UAAU;AACf;AAAA,IACJ;AACA,UAAM,KAAK,KAAK,cAAc,KAAK,cAAc,KAAK;AACtD,UAAM,KAAK,CAAC,KAAK,yBAAyB,IAAI,KAAK,mBAAmB,KAAK;AAC3E,UAAM,KAAK,CAAC,KAAK,4BAA4B,IAAI,KAAK,mBAAmB,KAAK;AAC9E,gBAAY,OAAO;AAEnB,QAAI,MAAM,IAAI;AACV,YAAM,qBAAqB,KAAK,MAAM,OAAO,qBAAqB;AAClE,kBAAY,SAAS,KAAK;AAC1B,kBAAY,OAAO,KAAK;AACxB,WAAK,UAAU;AAAA,IACnB;AAEA,QAAI,IAAI;AACJ,YAAM,KAAK,IAAK,KAAK;AACrB,WAAK,MAAM,KAAK,IAAI,KAAK,IAAI,IAAI,MAAM,EAAE,GAAG,GAAG;AAC/C,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAES,aAAa,OAAuD;AACzE,UAAM,UAA8B,CAAC;AACrC,UAAM,EAAE,UAAU,aAAa,IAAI,IAAI;AACvC,QAAI,CAAC,SAAS,MAAM,aAAa,UAAU;AACvC,cAAQ,WAAW;AAAA,IACvB;AACA,QAAI,CAAC,SAAS,MAAM,aAAa,YAAY,UAAU;AACnD,cAAQ,WAAW,YAAY;AAAA,IACnC;AACA,QAAI,CAAC,SAAS,MAAM,QAAQ,KAAK;AAC7B,cAAQ,MAAM;AAAA,IAClB;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AACJ;AAzIO,IAAM,qBAAN;AACH,cADS,oBACO,iBAAgB;AAAA,EAC5B,UAAU,CAAC,GAAG,GAAG,CAAC;AAAA,EAClB,OAAO;AAAA,EACP,KAAK;AAAA,EACL,oBAAoB;AAAA,EACpB,aAAa;AACjB;;;ACrBJ,IAAM,aAAa;AAAA,EACf,SAAS,UAAU,gBAAgB,eAAe;AAAA,EAClD,SAAS,UAAU,gBAAgB,eAAe;AACtD;AAEO,SAAS,UAAU,SAAc,WAAkC;AACtE,gBAAc,SAAS,WAAW,SAAS,CAAC;AAChD;AAGA,SAAS,UAAU,aAAwC,cAAiC;AACxF,QAAM,QAAQ;AAAA,IACV,QAAQ;AAAA,MACJ,UAAU;AAAA,MACV,UAAU;AAAA,MACV,OAAO;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACF,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACF,UAAU;AAAA,IACd;AAAA,IAEA,UAAU;AAAA,MACN,QAAQ,UAAU,WAAW;AAAA,IACjC;AAAA,IACA,UAAU;AAAA,MACN,OAAO;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACH,QAAQ;AAAA,QACJ,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,gBAAgB;AAAA,UACZ,QAAQ;AAAA,QACZ;AAAA,QACA,MAAM;AAAA,UACF,KAAK;AAAA,UACL,KAAK;AAAA,QACT;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,SAAS;AAAA,MACL,SAAS,kBAAkB,aAAa,YAAY;AAAA,IACxD;AAAA,EACJ;AACA,SAAO;AACX;AAEA,SAAS,eAAe,GAAa;AACjC,QAAMC,SAAQ,CAAC,GAAG,CAAC;AACnB,QAAM,MAAMA,OAAM,CAAC;AACnB,EAAAA,OAAM,CAAC,IAAIA,OAAM,CAAC;AAClB,EAAAA,OAAM,CAAC,IAAI,CAAC;AACZ,SAAOA;AACX;AAGO,SAAS,eAAe,GAAa;AACxC,QAAMA,SAAQ,CAAC,GAAG,CAAC;AACnB,QAAM,MAAMA,OAAM,CAAC;AACnB,EAAAA,OAAM,CAAC,IAAI,CAACA,OAAM,CAAC;AACnB,EAAAA,OAAM,CAAC,IAAI;AACX,SAAOA;AACX;AAOO,SAAS,gBAAgB,GAAS;AACrC,MAAI,KAAK,qBACL,KAAK;AACT,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,aAAK;AAAA,IACR,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,CAAE,KAAK;AAAA,IACjB,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,EAAE;AACzB;AAOO,SAAS,gBAAgB,GAAS;AACrC,MAAI,KAAK,oBACL,KAAK;AACT,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,aAAK;AAAA,IACR,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,CAAE,KAAK;AAAA,IACjB,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,EAAE;AACzB;AAEA,SAAS,kBAAkB,aAAwC,cAAiC;AAChG,SAAO,SAAU,IAAgC;AAC7C,UAAM,iBAA6C,CAAC;AACpD,eAAW,OAAO,IAAI;AAClB,YAAM,mBAAiD,CAAC;AACxD,iBAAW,QAAQ,IAAI,WAAW;AAC9B,yBAAiB,KAAK;AAAA,UAClB,UAAU,YAAY,KAAK,QAAe;AAAA,UAAW,UAAU,KAAK,WAAW,aAAa,KAAK,QAAe,IAAI;AAAA,QACxH,CAAC;AAAA,MACL;AACA,qBAAe,KAAK,EAAE,MAAM,IAAI,MAAM,WAAW,kBAAkB,cAAc,IAAI,aAAa,CAAC;AAAA,IACvG;AACA,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,UAAU,UAAqC;AACpD,SAAO,SAAU,IAAgC;AAC7C,UAAM,gBAA4C,CAAC;AACnD,eAAW,SAAS,IAAI;AACpB,oBAAc,KAAK,EAAE,OAAO,MAAM,OAAO,cAAc,SAAS,MAAM,YAA+B,EAAyB,CAAC;AAAA,IACnI;AACA,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,cAAc,OAAY,OAAY;AAClD,aAAW,OAAO,OAAO;AACrB,UAAM,OAAO,QAAQ,MAAM,GAAG,IAAI;AAClC,UAAM,QAAQ,MAAM,GAAG;AACvB,QAAI,QAAQ,OAAO;AACf,UAAI,OAAO,QAAQ,YAAY;AAC3B,cAAM,GAAG,IAAI,KAAK,KAAK;AAAA,MAC3B,OAAO;AACH,sBAAc,OAAO,IAAI;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC/IO,IAAe,OAAf,MAAoB;AAAA,EA8BvB,YAAqB,QAA2B,eAA8B;AAAzD;AACjB,SAAK,iBAAiB;AACtB,SAAK,oBAAoB,WAAW,eAAe,QAAQ,KAAK,gBAAgB;AAChF,SAAK,gBAAgB,mBAAmB;AACxC,SAAK,iBAAiB,KAAK,kBAAkB,KAAK,aAAa;AAE/D,UAAM,QAAQ,IAAI,gBAAgB,MAAM;AAExC,SAAK,cAAc;AAAA,MACf,QAAQ,IAAI,iBAAiB,MAAM,KAAK;AAAA,MACxC,OAAO,IAAI,gBAAgB,KAAK;AAAA,MAChC,OAAO,IAAI,gBAAgB,KAAK;AAAA,MAChC,UAAU,IAAI,mBAAmB,KAAK;AAAA,MACtC,cAAc,IAAI,uBAAuB,MAAM,KAAK;AAAA,MACpD,aAAa,IAAI,sBAAsB,MAAM,KAAK;AAAA,MAClD,SAAS,IAAI,wBAAwB,MAAM,KAAK;AAAA,IACpD;AACA,SAAK,mBAAmB,KAAK,YAAY,QAAQ;AACjD,SAAK,iBAAiB,OAAO;AAE7B,UAAM,iBAAiB,IAAI,eAAe,MAAM;AAAE,WAAK,OAAO;AAAA,IAAG,CAAC;AAClE,mBAAe,QAAQ,MAAM;AAAA,EACjC;AAAA,EAnDS,YAAa,SAAS,eAA4C,OAAO,YAAY;AAAA,EACrF,eAAe,IAAI,IAAI,+BAA+B,EAAE,SAAS;AAAA;AAAA,EAEnE;AAAA,EACC;AAAA,EACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACF;AAAA,EACA,aAAwC;AAAA;AAAA,EAGhD;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA,iBAA6C,CAAC;AAAA,EACtC,cAAgG;AAAA;AAAA,EAGhG,qBAAqB;AAAA,EACrB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,wBAAwB;AAAA,EACxB,iBAA4B;AAAA,EAE5B,oBAA4B;AAAA,EA0BpC,UAAU;AACN,SAAK,eAAe,QAAQ;AAC5B,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEA,cAAc,SAA6B;AACvC,SAAK,qBAAqB,KAAK;AAC/B,SAAK,iBAAiB,eAAe,KAAK,gBAAgB,OAAO;AACjE,cAAU,SAAS,SAAS;AAC5B,SAAK,gBAAgB,kBAAkB,KAAK,eAAe,OAAO;AAAA,EACtE;AAAA,EAEA,kBAAkB,OAAoB;AAClC,UAAMC,SAAQ,gBAAgB,KAAK;AACnC,cAAUA,QAAO,SAAS;AAC1B,WAAOA;AAAA,EACX;AAAA,EAEA,MAAM,gBAAiC;AACnC,SAAK,aAAa;AAClB,aAAS,MAAM,IAAY;AACvB,aAAO,IAAI,QAAQ,aAAW,WAAW,SAAS,EAAE,CAAC;AAAA,IACzD;AACA,WAAO,KAAK,eAAe,QAAW;AAClC,YAAM,MAAM,EAAE;AAAA,IAClB;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,cAAc;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,kBAAkB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,gBAAgB;AAAE,WAAO,KAAK;AAAA,EAAgB;AAAA,EAClD,IAAI,cAAc,OAAsB;AACpC,SAAK,iBAAiB;AACtB,SAAK,oBAAoB,KAAK;AAAA,EAClC;AAAA,EAES,mBAAmB,CAAC,YAA2B;AACpD,SAAK,gBAAgB;AACrB,SAAK,iBAAiB,KAAK,cAAc;AAAA,EAC7C;AAAA,EAEQ,iBAAiB,eAA8B;AACnD,SAAK,qBAAqB,cAAc;AACxC,SAAK,kBAAmB,MAAO,cAAc,kBAAmB;AAChE,SAAK,iBAAkB,MAAO,cAAc,kBAAmB;AAAA,EACnE;AAAA,EAEQ,SAAS;AACb,UAAMC,SAAQ,mBAAmB,KAAK;AAEtC,QAAI,EAAE,OAAO,OAAO,IAAI,KAAK,OAAO,sBAAsB;AAC1D,YAAQ,KAAK,MAAM,QAAQA,MAAK;AAChC,aAAS,KAAK,MAAM,SAASA,MAAK;AAClC,UAAM,EAAE,OAAO,IAAI,KAAK;AACxB,QAAI,SAAS,OAAO,SAAS,UAAU,OAAO,QAAQ;AAClD,WAAK,cAAc,EAAE,QAAQ,EAAE,OAAO,OAAO,EAAE,CAAC;AAAA,IACpD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,sBAAsB,UAAsD;AAC9E,QAAI,eAAyC,CAAC;AAC9C,UAAM,MAAM,IAAI,IAAI,YAAY,0BAA0B,KAAK,SAAS;AACxE,UAAM,WAAW,MAAM,MAAM,IAAI,SAAS,CAAC;AAC3C,QAAI,SAAS,IAAI;AACb,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,qBAAgB,KAAkB,IAAI,UAAQ;AAC1C,eAAO,EAAE,MAAM,KAAK,IAAI,IAAI,MAAM,GAAG,EAAE,SAAS,IAAI,KAAK,eAAe,IAAI,IAAI,cAAc,YAAY,GAAG,EAAE,SAAS,EAAE;AAAA,MAC9H,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,iBAAiB,KAAgC;AACnD,UAAM,QAAQ,MAAM,cAAc,IAAI,SAAS,CAAC;AAChD,UAAM,eAAe,EAAE,MAAM;AAC7B,cAAU,cAAc,SAAS;AACjC,SAAK,kBAAkB,YAAY;AACnC,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,MAAM,KAAK,GAAW,GAAW,SAAuB;AACpD,UAAM,UAAU,KAAK;AACrB,QAAI,SAAS;AACT,YAAM,UAAU,MAAM,QAAQ,KAAK,GAAG,GAAG,OAAO;AAChD,UAAI,QAAQ,QAAQ;AAChB,YAAI,SAAS;AACb,cAAM,eAAe,QAAQ,OAAO,CAAC,GAAG,MAAM;AAC1C,cAAI,CAAC,UAAU,aAAK,IAAI,EAAE,QAAQ,EAAE,MAAM,IAAI,KAAK;AAC/C,qBAAS;AAAA,UACb;AACA,iBAAO,EAAE,QAAQ,EAAE,QAAQ,IAAI;AAAA,QACnC,CAAC;AACD,cAAM,EAAE,sBAAsB,IAAI,QAAQ,gBAAgB;AAC1D,cAAM,kBAAkB,aAAK,OAAO,aAAK,OAAO,GAAG,qBAAqB;AACxE,cAAM,gBAAgB;AAAA,UAClB,GAAG;AAAA,UACH,UAAU,aAAK,WAAW,aAAa,SAAS,CAAC,GAAG,CAAC,aAAa,SAAS,CAAC,GAAG,aAAa,SAAS,CAAC,CAAC;AAAA,UACvG,QAAQ,aAAK,WAAW,aAAa,OAAO,CAAC,GAAG,CAAC,aAAa,OAAO,CAAC,GAAG,aAAa,OAAO,CAAC,CAAC;AAAA,UAC/F,QAAQ,QAAQ,SAAS,IAAI,SAAS;AAAA,UACtC,UAAU,aAAK,cAAc,aAAK,OAAO,GAAG,aAAa,QAAQ,eAAe;AAAA,QACpF;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,uBAAuB,MAAc,WAAgF,SAAkC;AACzJ,UAAM,WAAW,SAAS,YAAY;AACtC,aAAS,iBAAiBC,OAAcC,cAAwD;AAC5F,aAAOD,SAAQC;AAAA,IACnB;AACA,QAAI,CAAC,iBAAiB,MAAM,KAAK,WAAW;AACxC,YAAM,IAAI,MAAM,4BAA4B,OAAO;AAEvD,UAAM,EAAE,aAAa,cAAc,IAAI;AACvC,QAAI,EAAE,iBAAiB,IAAI;AAG3B,QAAIC;AACJ,QAAI,YAAY,iBAAiB,cAAc,WAAW;AACtD,oBAAc,kBAAkB;AAChC,YAAM,QAAQ,MAAM,cAAc,QAAQ,YAAY,GAAG;AACzD,YAAM,SAAS,MAAM,cAAc,gBAAgB,IAAI;AACvD,MAAAA,YAAW,OAAO;AAClB,iBAAW,SAAS,QAAQ;AACxB,QAAAA,YAAW,KAAK,IAAIA,WAAU,KAAK;AAAA,MACvC;AAAA,IACJ;AAGA,UAAM,YAAY,iBAAiB;AAAA,MAAU;AAAA;AAAA,IAA6C;AAC1F,uBAAmB,KAAK,mBAAmB,YAAY,IAAI;AAC3D,UAAM,EAAE,UAAU,UAAU,OAAO,YAAY,UAAU,IAAI;AAE7D,qBAAiB,KAAK,EAAE,MAAM,UAAU,WAAW,YAAY,UAAU,UAAU,WAAW,YAAY,UAAU,OAAO,UAAAA,WAAU,YAAY,WAAW,WAAW,OAAO,UAAU,CAAC;AACzL,UAAM,UAAU,iBAAiB,aAAa;AAC9C,SAAK,kBAAkB,EAAE,QAAQ,QAAQ,CAAC;AAAA,EAC9C;AAAA;AAAA,EAGA,yBAAyB,gBAA0B;AAC/C,UAAM,UAAU;AAChB,QAAI,eAAe,UAAU,SAAS;AAClC,YAAM,EAAE,cAAc,IAAI;AAC1B,YAAM,oBAAoB,KAAK;AAC/B,YAAM,mBAAmB,KAAK;AAC9B,YAAM,kBAAkB,CAAC,GAAG,cAAc;AAC1C,sBAAgB,KAAK;AACrB,YAAM,iBAAiB,gBAAgB,KAAK,MAAM,UAAU,CAAC,CAAC;AAC9D,qBAAe,OAAO,GAAG,CAAC;AAC1B,YAAM,WAAW;AACjB,YAAM,MAAM,YAAY,IAAI;AAC5B,UAAI,MAAM,KAAK,wBAAwB,UAAU;AAC7C,cAAM,kBAAkB,CAAC,KAAK,KAAK,CAAC;AACpC,YAAI,iBAAiB,mBAAmB;AACpC,cAAI,KAAK,kBAAkB,GAAG;AAC1B,iBAAK,qBAAqB,cAAc,mBAAmB,gBAAgB,EAAE,KAAK,cAAc;AAChG,iBAAK,OAAO;AAAA,UAChB;AACA,eAAK,wBAAwB;AAC7B;AAAA,QACJ,WAAW,iBAAiB,kBAAkB;AAC1C,cAAI,KAAK,kBAAkB,GAAG;AAC1B,iBAAK,qBAAqB,cAAc,mBAAmB,gBAAgB,EAAE,KAAK,cAAc;AAChG,iBAAK,wBAAwB;AAC7B,iBAAK,OAAO;AAAA,UAChB;AACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAQA,MAAM,MAAM;AACR,QAAI;AACJ,QAAI;AACJ,QAAI,iBAAiB,YAAY,IAAI;AACrC,QAAI,kBAAkB;AACtB,QAAI,gBAAgB;AACpB,QAAI,UAAU;AACd,UAAM,iBAA2B,CAAC;AAClC,eAAU;AACN,YAAM,EAAE,eAAe,kBAAkB,cAAc,IAAI;AAC3D,YAAM,aAAa,MAAM,cAAc,UAAU,aAAa;AAC9D,YAAM,YAAY,aAAa;AAC/B,YAAM,gBAAgB,iBAAiB,mBAAmB,KAAK,eAAe,QAAQ,aAAa,cAAc;AACjH,UAAI,eAAe;AACf,aAAK,kBAAkB,aAAa;AAAA,MACxC;AAEA,YAAM,cAAc,gBAAgB;AACpC,UAAI,iBAAiB,CAAC,cAAc,cAAc,GAAG;AACjD,sBAAc,KAAK;AACnB,sBAAc,cAAc;AAE5B,YAAI,aAAa;AACb,cAAI,CAAC,SAAS;AACV,iBAAK,qBAAqB,KAAK,IAAI,GAAG,cAAc,mBAAmB,CAAC;AACxE,iBAAK,OAAO;AACZ,iBAAK,kBAAkB,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,CAAC;AACjD,iBAAK,oBAAoB;AACzB,sBAAU;AACV,gBAAI,mBAAmB,cAAc,YAAY,GAAG;AAChD,4BAAc,kBAAkB;AAChC,gCAAkB;AAAA,YACtB;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,cAAI,SAAS;AACT,iBAAK,qBAAqB,cAAc;AACxC,iBAAK,iBAAiB;AACtB,sBAAU;AAAA,UACd,OAAO;AACH,2BAAe,KAAK,SAAS;AAC7B,iBAAK,yBAAyB,cAAc;AAAA,UAChD;AACA,gBAAM,uBAAuB;AAC7B,cAAI,KAAK,cAAc,QAAQ,UAAU,sBAAsB;AAC3D,iBAAK,oBAAoB;AACzB,iBAAK,kBAAkB,EAAE,SAAS,EAAE,QAAQ,qBAAqB,EAAE,CAAC;AAAA,UACxE;AAAA,QACJ;AAEA,aAAK,UAAU,UAAU;AAEzB,YAAI,KAAK,cAAc;AACnB,eAAK,cAAc,KAAK,YAAY;AACpC,eAAK,eAAe;AAAA,QACxB;AAEA,cAAM,EAAE,eAAe,WAAW,IAAI;AACtC,YAAI,cAAc,iBAAiB,cAAc,WAAW,eAAe,QAAW;AAClF,sBAAY;AACZ,eAAK,SAAS,WAAW;AACzB,gBAAM,eAAe,cAAc,OAAO,aAAa;AACvD,cAAI,eAAe,QAAW;AAC1B,iBAAK,aAAa,KAAK,OAAO,UAAU;AAAA,UAC5C;AACA,uBAAa,KAAK,CAAC,UAAU;AACzB,iBAAK,cAAc,EAAE,QAAQ,OAAO,MAAM,EAAE,YAAY,KAAK,oBAAoB,YAAY,cAAc,aAAa,KAAK,mBAAmB,KAAK,MAAM,gBAAgB,MAAO,MAAM,gBAAgB,OAAU,EAAE;AAAA,UACxN,CAAC;AACD,4BAAkB;AAAA,QACtB;AAAA,MACJ;AAEA,UAAI,KAAK,iBAAiB,QAAQ;AAC9B,0BAAkB;AAClB,wBAAgB;AAAA,MACpB,WAAW,CAAC,iBAAiB;AACzB,yBAAiB;AAAA,MACrB;AACA,wBAAkB,KAAK,iBAAiB;AACxC,uBAAiB;AAAA,IACrB;AAAA,EACJ;AAAA;AAAA,EAGA,kBAAkB,SAAmC;AACjD,SAAK,eAAe,eAAe,KAAK,cAAc,OAAO;AAAA,EACjE;AACJ;;;AC/VO,IAAM,sBAAN,MAA0B;AAAA,EAI7B,YAAqB,kBAAmC,OAAuB,MAAkC;AAA5F;AAAmC;AAAuB;AAAA,EAC/E;AAAA,EAJQ;AAAA,EACA,SAAS,IAAI,WAAwB;AAAA,EAK7C,qBAAqB,SAAuC;AACxD,UAAM,EAAE,KAAK,IAAI;AACjB,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK,WAAW;AACZ,cAAM,EAAE,KAAK,IAAI;AACjB,aAAK,QAAQ;AACb,aAAK,YAAY,KAAK,gBAAgB,KAAK,IAAI;AAC/C,gBAAQ,IAAI,eAAe;AAC3B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,gBAAgB,SAAqC;AACzD,UAAM,EAAE,KAAK,IAAI;AACjB,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK,QAAQ;AACT,cAAM,EAAE,IAAI,QAAQ,MAAM,IAAI;AAC9B,aAAK,OAAO,QAAQ,IAAI,UAAU,IAAI,MAAM,KAAK,CAAC;AAClD;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,QAAQ,KAAa;AACjB,WAAO,KAAK,iBAAiB,KAAK,IAAI,IAAI,GAAG,EAAE,QAAQ;AAAA,EAC3D;AAAA,EAEQ,cAAc,KAAU;AAC5B,UAAM,IAAI,KAAK,iBAAiB,KAAK,IAAI,QAAQ;AACjD,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,yBAAyB,IAAI,UAAU;AAC3D,UAAM,CAAC,GAAG,KAAK,IAAI,IAAI;AACvB,WAAO,EAAE,KAAK,KAAK;AAAA,EACvB;AAAA,EAEA,MAAM,MAAMC,UAAqC;AAC7C,UAAM,MAAM,IAAI,IAAIA,SAAQ,GAAG;AAC/B,UAAM,EAAE,KAAK,KAAK,IAAI,KAAK,cAAc,GAAG;AAC5C,UAAM,OAAO,MAAM,KAAK,SAAS,KAAK,IAAI;AAC1C,QAAI,MAAM;AACN,aAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAS,EAAE,gBAAgB,2BAA2B,EAAE,CAAC;AAAA,IACtG,OAAO;AAAA,IAKP;AAEA,YAAQ,IAAI,SAAS,KAAK;AAC1B,WAAO,MAAM,MAAMA,QAAO;AAAA,EAC9B;AAAA,EAEA,MAAM,SAAS,KAAa,UAAkB;AAC1C,QAAI;AACA,UAAI,KAAK,MAAM;AAEX,cAAM,SAAS,MAAM,KAAK,KAAK,mBAAmB,KAAK,EAAE,QAAQ,MAAM,CAAC;AACxE,cAAM,aAAa,MAAM,OAAO,cAAc,UAAU,EAAE,QAAQ,MAAM,CAAC;AACzE,cAAM,OAAO,MAAM,WAAW,QAAQ;AACtC,eAAO,KAAK,OAAO;AAAA,MACvB,OAAO;AACH,cAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,YAAI,OAAO;AACP,gBAAM,KAAK,OAAO,MAAM;AACxB,gBAAM,MAAmB,EAAE,MAAM,QAAQ,IAAI,KAAK,MAAM,SAAS;AACjE,iBAAO,YAAY,GAAG;AACtB,iBAAO,MAAM,OAAO,OAAO,EAAE;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ,SAAS,IAAP;AAAA,IAEF;AAAA,EACJ;AACJ;;;ACpFO,IAAM,aAAN,MAA2B;AAAA,EACb,WAAW,oBAAI,IAA+B;AAAA,EACvD,YAAY;AAAA,EAEpB,QAAgB;AACZ,UAAM,KAAK,KAAK;AAChB,SAAK,aAAa;AAClB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,IAAwB;AAC3B,WAAO,IAAI,QAAW,CAAC,SAAS,WAAW;AACvC,WAAK,SAAS,IAAI,IAAI,EAAE,SAAS,OAAO,CAAC;AAAA,IAC7C,CAAC;AAAA,EACL;AAAA,EAEA,QAAQ,IAAY,QAAmB;AACnC,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,iBAAiB,SAAS,IAAI,EAAE;AACtC,QAAI,gBAAgB;AAChB,eAAS,OAAO,EAAE;AAClB,YAAM,EAAE,SAAS,OAAO,IAAI;AAC5B,UAAI,CAAC,QAAQ,MAAM,GAAG;AAClB,gBAAQ,MAAM;AAAA,MAClB,OAAO;AACH,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,SAAS,QAAQ,QAA8B;AAC3C,SAAO,UAAU,OAAO,UAAU,YAAY,kBAAkB;AACpE;;;ACvBO,IAAM,iBAAiB;AAE9B,eAAS,mBAAmB,KAAK;",
  "names": ["equals", "scale", "equals", "add", "adjoint", "clone", "copy", "create", "determinant", "equals", "exactEquals", "frob", "fromQuat", "fromRotation", "fromScaling", "fromTranslation", "fromValues", "identity", "invert", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "rotate", "scale", "set", "str", "sub", "subtract", "translate", "transpose", "create", "clone", "copy", "fromValues", "set", "identity", "transpose", "invert", "adjoint", "determinant", "multiply", "translate", "scale", "rotate", "len", "fromTranslation", "fromScaling", "fromRotation", "fromQuat", "str", "frob", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "mul", "sub", "add", "clone", "copy", "create", "dot", "equals", "exactEquals", "fromValues", "identity", "invert", "len", "length", "lerp", "mul", "multiply", "normalize", "random", "rotateX", "rotateY", "rotateZ", "scale", "set", "sqrLen", "squaredLength", "str", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotateX", "rotateY", "rotateZ", "str", "exactEquals", "equals", "sub", "mul", "add", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat4", "transformQuat", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat4", "transformQuat", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "create", "identity", "dot", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "random", "invert", "str", "clone", "fromValues", "copy", "set", "add", "mul", "lerp", "length", "len", "squaredLength", "sqrLen", "normalize", "exactEquals", "equals", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotate", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat3", "transformMat4", "rotate", "angle", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "set", "isMatrix", "isScalar", "set", "value", "values", "clone", "CoordSpace", "ClippingMode", "ClippingId", "TonemappingMode", "distance", "isPowerOf2", "isPowerOf2", "len", "width", "height", "dist", "snap", "distance", "scale", "shader_default", "download", "shader_default", "render_default", "line_default", "debug_default", "convertAttrib", "isElements", "calcNumPrimitives", "distance", "projection", "scale", "min", "max", "textureBytes", "scale", "objectId", "enumerateBuffers", "indices", "index", "deviations", "count", "numTriangles", "download", "self", "download", "Worker", "Worker", "getColor", "index", "values", "terrain", "points", "transforms", "zeroes", "ones", "index", "shader_default", "camera", "tonemapping", "shaders", "render_default", "line_default", "intersect_default", "pos", "shaders", "scale", "stats", "shader_default", "shader_default", "shader_default", "create", "shader_default", "scale", "shaders", "fillrate_default", "pointrate_default", "shaders", "shaders", "detail", "radius", "max", "min", "index", "azimuth", "traverseNodeTree", "dist", "MouseButtons", "lerp", "t", "min", "max", "distance", "distance", "dist", "scale", "distance", "dist", "scale", "distance", "clone", "clone", "scale", "kind", "controllers", "distance", "request"]
}
